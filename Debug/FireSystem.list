
FireSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000858  08010db8  08010db8  00020db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011610  08011610  000306b8  2**0
                  CONTENTS
  4 .ARM          00000008  08011610  08011610  00021610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011618  08011618  000306b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011618  08011618  00021618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801161c  0801161c  0002161c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006b8  20000000  08011620  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003190  200006b8  08011cd8  000306b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003848  08011cd8  00033848  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000306b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034263  00000000  00000000  000306e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005a1d  00000000  00000000  0006494b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002580  00000000  00000000  0006a368  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000022e8  00000000  00000000  0006c8e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002f379  00000000  00000000  0006ebd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001e8f3  00000000  00000000  0009df49  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001092e2  00000000  00000000  000bc83c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c5b1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a704  00000000  00000000  001c5b9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200006b8 	.word	0x200006b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010da0 	.word	0x08010da0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200006bc 	.word	0x200006bc
 80001cc:	08010da0 	.word	0x08010da0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2iz>:
 80005e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d215      	bcs.n	800061e <__aeabi_d2iz+0x36>
 80005f2:	d511      	bpl.n	8000618 <__aeabi_d2iz+0x30>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d912      	bls.n	8000624 <__aeabi_d2iz+0x3c>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800060e:	fa23 f002 	lsr.w	r0, r3, r2
 8000612:	bf18      	it	ne
 8000614:	4240      	negne	r0, r0
 8000616:	4770      	bx	lr
 8000618:	f04f 0000 	mov.w	r0, #0
 800061c:	4770      	bx	lr
 800061e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000622:	d105      	bne.n	8000630 <__aeabi_d2iz+0x48>
 8000624:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000628:	bf08      	it	eq
 800062a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800062e:	4770      	bx	lr
 8000630:	f04f 0000 	mov.w	r0, #0
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295
 8000648:	f04f 30ff 	movne.w	r0, #4294967295
 800064c:	f000 b972 	b.w	8000934 <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9e08      	ldr	r6, [sp, #32]
 800066e:	4604      	mov	r4, r0
 8000670:	4688      	mov	r8, r1
 8000672:	2b00      	cmp	r3, #0
 8000674:	d14b      	bne.n	800070e <__udivmoddi4+0xa6>
 8000676:	428a      	cmp	r2, r1
 8000678:	4615      	mov	r5, r2
 800067a:	d967      	bls.n	800074c <__udivmoddi4+0xe4>
 800067c:	fab2 f282 	clz	r2, r2
 8000680:	b14a      	cbz	r2, 8000696 <__udivmoddi4+0x2e>
 8000682:	f1c2 0720 	rsb	r7, r2, #32
 8000686:	fa01 f302 	lsl.w	r3, r1, r2
 800068a:	fa20 f707 	lsr.w	r7, r0, r7
 800068e:	4095      	lsls	r5, r2
 8000690:	ea47 0803 	orr.w	r8, r7, r3
 8000694:	4094      	lsls	r4, r2
 8000696:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800069a:	0c23      	lsrs	r3, r4, #16
 800069c:	fbb8 f7fe 	udiv	r7, r8, lr
 80006a0:	fa1f fc85 	uxth.w	ip, r5
 80006a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80006a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006ac:	fb07 f10c 	mul.w	r1, r7, ip
 80006b0:	4299      	cmp	r1, r3
 80006b2:	d909      	bls.n	80006c8 <__udivmoddi4+0x60>
 80006b4:	18eb      	adds	r3, r5, r3
 80006b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80006ba:	f080 811b 	bcs.w	80008f4 <__udivmoddi4+0x28c>
 80006be:	4299      	cmp	r1, r3
 80006c0:	f240 8118 	bls.w	80008f4 <__udivmoddi4+0x28c>
 80006c4:	3f02      	subs	r7, #2
 80006c6:	442b      	add	r3, r5
 80006c8:	1a5b      	subs	r3, r3, r1
 80006ca:	b2a4      	uxth	r4, r4
 80006cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80006d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80006d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80006dc:	45a4      	cmp	ip, r4
 80006de:	d909      	bls.n	80006f4 <__udivmoddi4+0x8c>
 80006e0:	192c      	adds	r4, r5, r4
 80006e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006e6:	f080 8107 	bcs.w	80008f8 <__udivmoddi4+0x290>
 80006ea:	45a4      	cmp	ip, r4
 80006ec:	f240 8104 	bls.w	80008f8 <__udivmoddi4+0x290>
 80006f0:	3802      	subs	r0, #2
 80006f2:	442c      	add	r4, r5
 80006f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006f8:	eba4 040c 	sub.w	r4, r4, ip
 80006fc:	2700      	movs	r7, #0
 80006fe:	b11e      	cbz	r6, 8000708 <__udivmoddi4+0xa0>
 8000700:	40d4      	lsrs	r4, r2
 8000702:	2300      	movs	r3, #0
 8000704:	e9c6 4300 	strd	r4, r3, [r6]
 8000708:	4639      	mov	r1, r7
 800070a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070e:	428b      	cmp	r3, r1
 8000710:	d909      	bls.n	8000726 <__udivmoddi4+0xbe>
 8000712:	2e00      	cmp	r6, #0
 8000714:	f000 80eb 	beq.w	80008ee <__udivmoddi4+0x286>
 8000718:	2700      	movs	r7, #0
 800071a:	e9c6 0100 	strd	r0, r1, [r6]
 800071e:	4638      	mov	r0, r7
 8000720:	4639      	mov	r1, r7
 8000722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000726:	fab3 f783 	clz	r7, r3
 800072a:	2f00      	cmp	r7, #0
 800072c:	d147      	bne.n	80007be <__udivmoddi4+0x156>
 800072e:	428b      	cmp	r3, r1
 8000730:	d302      	bcc.n	8000738 <__udivmoddi4+0xd0>
 8000732:	4282      	cmp	r2, r0
 8000734:	f200 80fa 	bhi.w	800092c <__udivmoddi4+0x2c4>
 8000738:	1a84      	subs	r4, r0, r2
 800073a:	eb61 0303 	sbc.w	r3, r1, r3
 800073e:	2001      	movs	r0, #1
 8000740:	4698      	mov	r8, r3
 8000742:	2e00      	cmp	r6, #0
 8000744:	d0e0      	beq.n	8000708 <__udivmoddi4+0xa0>
 8000746:	e9c6 4800 	strd	r4, r8, [r6]
 800074a:	e7dd      	b.n	8000708 <__udivmoddi4+0xa0>
 800074c:	b902      	cbnz	r2, 8000750 <__udivmoddi4+0xe8>
 800074e:	deff      	udf	#255	; 0xff
 8000750:	fab2 f282 	clz	r2, r2
 8000754:	2a00      	cmp	r2, #0
 8000756:	f040 808f 	bne.w	8000878 <__udivmoddi4+0x210>
 800075a:	1b49      	subs	r1, r1, r5
 800075c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000760:	fa1f f885 	uxth.w	r8, r5
 8000764:	2701      	movs	r7, #1
 8000766:	fbb1 fcfe 	udiv	ip, r1, lr
 800076a:	0c23      	lsrs	r3, r4, #16
 800076c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000770:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000774:	fb08 f10c 	mul.w	r1, r8, ip
 8000778:	4299      	cmp	r1, r3
 800077a:	d907      	bls.n	800078c <__udivmoddi4+0x124>
 800077c:	18eb      	adds	r3, r5, r3
 800077e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000782:	d202      	bcs.n	800078a <__udivmoddi4+0x122>
 8000784:	4299      	cmp	r1, r3
 8000786:	f200 80cd 	bhi.w	8000924 <__udivmoddi4+0x2bc>
 800078a:	4684      	mov	ip, r0
 800078c:	1a59      	subs	r1, r3, r1
 800078e:	b2a3      	uxth	r3, r4
 8000790:	fbb1 f0fe 	udiv	r0, r1, lr
 8000794:	fb0e 1410 	mls	r4, lr, r0, r1
 8000798:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800079c:	fb08 f800 	mul.w	r8, r8, r0
 80007a0:	45a0      	cmp	r8, r4
 80007a2:	d907      	bls.n	80007b4 <__udivmoddi4+0x14c>
 80007a4:	192c      	adds	r4, r5, r4
 80007a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80007aa:	d202      	bcs.n	80007b2 <__udivmoddi4+0x14a>
 80007ac:	45a0      	cmp	r8, r4
 80007ae:	f200 80b6 	bhi.w	800091e <__udivmoddi4+0x2b6>
 80007b2:	4618      	mov	r0, r3
 80007b4:	eba4 0408 	sub.w	r4, r4, r8
 80007b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007bc:	e79f      	b.n	80006fe <__udivmoddi4+0x96>
 80007be:	f1c7 0c20 	rsb	ip, r7, #32
 80007c2:	40bb      	lsls	r3, r7
 80007c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80007c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80007cc:	fa01 f407 	lsl.w	r4, r1, r7
 80007d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80007d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80007d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007dc:	4325      	orrs	r5, r4
 80007de:	fbb3 f9f8 	udiv	r9, r3, r8
 80007e2:	0c2c      	lsrs	r4, r5, #16
 80007e4:	fb08 3319 	mls	r3, r8, r9, r3
 80007e8:	fa1f fa8e 	uxth.w	sl, lr
 80007ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80007f0:	fb09 f40a 	mul.w	r4, r9, sl
 80007f4:	429c      	cmp	r4, r3
 80007f6:	fa02 f207 	lsl.w	r2, r2, r7
 80007fa:	fa00 f107 	lsl.w	r1, r0, r7
 80007fe:	d90b      	bls.n	8000818 <__udivmoddi4+0x1b0>
 8000800:	eb1e 0303 	adds.w	r3, lr, r3
 8000804:	f109 30ff 	add.w	r0, r9, #4294967295
 8000808:	f080 8087 	bcs.w	800091a <__udivmoddi4+0x2b2>
 800080c:	429c      	cmp	r4, r3
 800080e:	f240 8084 	bls.w	800091a <__udivmoddi4+0x2b2>
 8000812:	f1a9 0902 	sub.w	r9, r9, #2
 8000816:	4473      	add	r3, lr
 8000818:	1b1b      	subs	r3, r3, r4
 800081a:	b2ad      	uxth	r5, r5
 800081c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000820:	fb08 3310 	mls	r3, r8, r0, r3
 8000824:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000828:	fb00 fa0a 	mul.w	sl, r0, sl
 800082c:	45a2      	cmp	sl, r4
 800082e:	d908      	bls.n	8000842 <__udivmoddi4+0x1da>
 8000830:	eb1e 0404 	adds.w	r4, lr, r4
 8000834:	f100 33ff 	add.w	r3, r0, #4294967295
 8000838:	d26b      	bcs.n	8000912 <__udivmoddi4+0x2aa>
 800083a:	45a2      	cmp	sl, r4
 800083c:	d969      	bls.n	8000912 <__udivmoddi4+0x2aa>
 800083e:	3802      	subs	r0, #2
 8000840:	4474      	add	r4, lr
 8000842:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000846:	fba0 8902 	umull	r8, r9, r0, r2
 800084a:	eba4 040a 	sub.w	r4, r4, sl
 800084e:	454c      	cmp	r4, r9
 8000850:	46c2      	mov	sl, r8
 8000852:	464b      	mov	r3, r9
 8000854:	d354      	bcc.n	8000900 <__udivmoddi4+0x298>
 8000856:	d051      	beq.n	80008fc <__udivmoddi4+0x294>
 8000858:	2e00      	cmp	r6, #0
 800085a:	d069      	beq.n	8000930 <__udivmoddi4+0x2c8>
 800085c:	ebb1 050a 	subs.w	r5, r1, sl
 8000860:	eb64 0403 	sbc.w	r4, r4, r3
 8000864:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000868:	40fd      	lsrs	r5, r7
 800086a:	40fc      	lsrs	r4, r7
 800086c:	ea4c 0505 	orr.w	r5, ip, r5
 8000870:	e9c6 5400 	strd	r5, r4, [r6]
 8000874:	2700      	movs	r7, #0
 8000876:	e747      	b.n	8000708 <__udivmoddi4+0xa0>
 8000878:	f1c2 0320 	rsb	r3, r2, #32
 800087c:	fa20 f703 	lsr.w	r7, r0, r3
 8000880:	4095      	lsls	r5, r2
 8000882:	fa01 f002 	lsl.w	r0, r1, r2
 8000886:	fa21 f303 	lsr.w	r3, r1, r3
 800088a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800088e:	4338      	orrs	r0, r7
 8000890:	0c01      	lsrs	r1, r0, #16
 8000892:	fbb3 f7fe 	udiv	r7, r3, lr
 8000896:	fa1f f885 	uxth.w	r8, r5
 800089a:	fb0e 3317 	mls	r3, lr, r7, r3
 800089e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008a2:	fb07 f308 	mul.w	r3, r7, r8
 80008a6:	428b      	cmp	r3, r1
 80008a8:	fa04 f402 	lsl.w	r4, r4, r2
 80008ac:	d907      	bls.n	80008be <__udivmoddi4+0x256>
 80008ae:	1869      	adds	r1, r5, r1
 80008b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80008b4:	d22f      	bcs.n	8000916 <__udivmoddi4+0x2ae>
 80008b6:	428b      	cmp	r3, r1
 80008b8:	d92d      	bls.n	8000916 <__udivmoddi4+0x2ae>
 80008ba:	3f02      	subs	r7, #2
 80008bc:	4429      	add	r1, r5
 80008be:	1acb      	subs	r3, r1, r3
 80008c0:	b281      	uxth	r1, r0
 80008c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80008c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80008ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008ce:	fb00 f308 	mul.w	r3, r0, r8
 80008d2:	428b      	cmp	r3, r1
 80008d4:	d907      	bls.n	80008e6 <__udivmoddi4+0x27e>
 80008d6:	1869      	adds	r1, r5, r1
 80008d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80008dc:	d217      	bcs.n	800090e <__udivmoddi4+0x2a6>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d915      	bls.n	800090e <__udivmoddi4+0x2a6>
 80008e2:	3802      	subs	r0, #2
 80008e4:	4429      	add	r1, r5
 80008e6:	1ac9      	subs	r1, r1, r3
 80008e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80008ec:	e73b      	b.n	8000766 <__udivmoddi4+0xfe>
 80008ee:	4637      	mov	r7, r6
 80008f0:	4630      	mov	r0, r6
 80008f2:	e709      	b.n	8000708 <__udivmoddi4+0xa0>
 80008f4:	4607      	mov	r7, r0
 80008f6:	e6e7      	b.n	80006c8 <__udivmoddi4+0x60>
 80008f8:	4618      	mov	r0, r3
 80008fa:	e6fb      	b.n	80006f4 <__udivmoddi4+0x8c>
 80008fc:	4541      	cmp	r1, r8
 80008fe:	d2ab      	bcs.n	8000858 <__udivmoddi4+0x1f0>
 8000900:	ebb8 0a02 	subs.w	sl, r8, r2
 8000904:	eb69 020e 	sbc.w	r2, r9, lr
 8000908:	3801      	subs	r0, #1
 800090a:	4613      	mov	r3, r2
 800090c:	e7a4      	b.n	8000858 <__udivmoddi4+0x1f0>
 800090e:	4660      	mov	r0, ip
 8000910:	e7e9      	b.n	80008e6 <__udivmoddi4+0x27e>
 8000912:	4618      	mov	r0, r3
 8000914:	e795      	b.n	8000842 <__udivmoddi4+0x1da>
 8000916:	4667      	mov	r7, ip
 8000918:	e7d1      	b.n	80008be <__udivmoddi4+0x256>
 800091a:	4681      	mov	r9, r0
 800091c:	e77c      	b.n	8000818 <__udivmoddi4+0x1b0>
 800091e:	3802      	subs	r0, #2
 8000920:	442c      	add	r4, r5
 8000922:	e747      	b.n	80007b4 <__udivmoddi4+0x14c>
 8000924:	f1ac 0c02 	sub.w	ip, ip, #2
 8000928:	442b      	add	r3, r5
 800092a:	e72f      	b.n	800078c <__udivmoddi4+0x124>
 800092c:	4638      	mov	r0, r7
 800092e:	e708      	b.n	8000742 <__udivmoddi4+0xda>
 8000930:	4637      	mov	r7, r6
 8000932:	e6e9      	b.n	8000708 <__udivmoddi4+0xa0>

08000934 <__aeabi_idiv0>:
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <configureTimerForRunTimeStats>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0

}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
return 0;
 800094a:	2300      	movs	r3, #0
}
 800094c:	4618      	mov	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <vApplicationMallocFailedHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	4a07      	ldr	r2, [pc, #28]	; (80009ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000990:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	4a06      	ldr	r2, [pc, #24]	; (80009b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000996:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2280      	movs	r2, #128	; 0x80
 800099c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800099e:	bf00      	nop
 80009a0:	3714      	adds	r7, #20
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	200006d4 	.word	0x200006d4
 80009b0:	2000073c 	.word	0x2000073c

080009b4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	4a07      	ldr	r2, [pc, #28]	; (80009e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80009c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	4a06      	ldr	r2, [pc, #24]	; (80009e4 <vApplicationGetTimerTaskMemory+0x30>)
 80009ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009d2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80009d4:	bf00      	nop
 80009d6:	3714      	adds	r7, #20
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	2000093c 	.word	0x2000093c
 80009e4:	200009a4 	.word	0x200009a4

080009e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e8:	b5b0      	push	{r4, r5, r7, lr}
 80009ea:	b0ae      	sub	sp, #184	; 0xb8
 80009ec:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ee:	f001 fc9b 	bl	8002328 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f2:	f000 f8df 	bl	8000bb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f6:	f000 faeb 	bl	8000fd0 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80009fa:	f000 f97f 	bl	8000cfc <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80009fe:	f000 f9b5 	bl	8000d6c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000a02:	f000 f9f3 	bl	8000dec <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000a06:	f000 fa17 	bl	8000e38 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000a0a:	f000 fa53 	bl	8000eb4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000a0e:	f000 fa81 	bl	8000f14 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a12:	f000 faaf 	bl	8000f74 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  VL53L0X_PROXIMITY_Init();
 8000a16:	f00b fd9d 	bl	800c554 <VL53L0X_PROXIMITY_Init>
  BSP_TSENSOR_Init();
 8000a1a:	f001 fba7 	bl	800216c <BSP_TSENSOR_Init>
  tof_gestures_initSWIPE_1(&gestureSwipeData);
 8000a1e:	4854      	ldr	r0, [pc, #336]	; (8000b70 <main+0x188>)
 8000a20:	f006 fa3e 	bl	8006ea0 <tof_gestures_initSWIPE_1>
  /* USER CODE END 2 */
  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 8000a24:	2300      	movs	r3, #0
 8000a26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8000a30:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000a34:	4618      	mov	r0, r3
 8000a36:	f00b ff66 	bl	800c906 <osMutexCreate>
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	4b4d      	ldr	r3, [pc, #308]	; (8000b74 <main+0x18c>)
 8000a3e:	601a      	str	r2, [r3, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
   /* definition and creation of myBinarySem02 */
  osSemaphoreDef(myBinarySem02);
 8000a40:	2300      	movs	r3, #0
 8000a42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000a46:	2300      	movs	r3, #0
 8000a48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  myBinarySem02Handle = osSemaphoreCreate(osSemaphore(myBinarySem02), 1);
 8000a4c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000a50:	2101      	movs	r1, #1
 8000a52:	4618      	mov	r0, r3
 8000a54:	f00b ff6f 	bl	800c936 <osSemaphoreCreate>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	4b47      	ldr	r3, [pc, #284]	; (8000b78 <main+0x190>)
 8000a5c:	601a      	str	r2, [r3, #0]

  /* definition and creation of myBinarySem03 */
  osSemaphoreDef(myBinarySem03);
 8000a5e:	2300      	movs	r3, #0
 8000a60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000a64:	2300      	movs	r3, #0
 8000a66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  myBinarySem03Handle = osSemaphoreCreate(osSemaphore(myBinarySem03), 1);
 8000a6a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000a6e:	2101      	movs	r1, #1
 8000a70:	4618      	mov	r0, r3
 8000a72:	f00b ff60 	bl	800c936 <osSemaphoreCreate>
 8000a76:	4602      	mov	r2, r0
 8000a78:	4b40      	ldr	r3, [pc, #256]	; (8000b7c <main+0x194>)
 8000a7a:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 256, Data);
 8000a7c:	4b40      	ldr	r3, [pc, #256]	; (8000b80 <main+0x198>)
 8000a7e:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000a82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8000a88:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f00c f816 	bl	800cac0 <osMessageCreate>
 8000a94:	4602      	mov	r2, r0
 8000a96:	4b3b      	ldr	r3, [pc, #236]	; (8000b84 <main+0x19c>)
 8000a98:	601a      	str	r2, [r3, #0]

  /* definition and creation of myQueue02 */
  osMessageQDef(myQueue02, 64, Temp);
 8000a9a:	4b3b      	ldr	r3, [pc, #236]	; (8000b88 <main+0x1a0>)
 8000a9c:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8000aa0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000aa2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue02Handle = osMessageCreate(osMessageQ(myQueue02), NULL);
 8000aa6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4618      	mov	r0, r3
 8000aae:	f00c f807 	bl	800cac0 <osMessageCreate>
 8000ab2:	4602      	mov	r2, r0
 8000ab4:	4b35      	ldr	r3, [pc, #212]	; (8000b8c <main+0x1a4>)
 8000ab6:	601a      	str	r2, [r3, #0]

  /* definition and creation of myQueue03 */
  osMessageQDef(myQueue03, 64, Temp);
 8000ab8:	4b33      	ldr	r3, [pc, #204]	; (8000b88 <main+0x1a0>)
 8000aba:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000abe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ac0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue03Handle = osMessageCreate(osMessageQ(myQueue03), NULL);
 8000ac4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f00b fff8 	bl	800cac0 <osMessageCreate>
 8000ad0:	4602      	mov	r2, r0
 8000ad2:	4b2f      	ldr	r3, [pc, #188]	; (8000b90 <main+0x1a8>)
 8000ad4:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskBottone */
  osThreadDef(TaskBottone, StartTaskBottone, osPriorityHigh, 0, 128);
 8000ad6:	4b2f      	ldr	r3, [pc, #188]	; (8000b94 <main+0x1ac>)
 8000ad8:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000adc:	461d      	mov	r5, r3
 8000ade:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ae0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ae2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ae6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskBottoneHandle = osThreadCreate(osThread(TaskBottone), NULL);
 8000aea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000aee:	2100      	movs	r1, #0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f00b fea8 	bl	800c846 <osThreadCreate>
 8000af6:	4602      	mov	r2, r0
 8000af8:	4b27      	ldr	r3, [pc, #156]	; (8000b98 <main+0x1b0>)
 8000afa:	601a      	str	r2, [r3, #0]

  /* definition and creation of TaskTemperatura */
  osThreadDef(TaskTemperatura, StartTaskTemperatura, osPriorityNormal, 0, 128);
 8000afc:	4b27      	ldr	r3, [pc, #156]	; (8000b9c <main+0x1b4>)
 8000afe:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000b02:	461d      	mov	r5, r3
 8000b04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskTemperaturaHandle = osThreadCreate(osThread(TaskTemperatura), NULL);
 8000b10:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f00b fe95 	bl	800c846 <osThreadCreate>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	4b20      	ldr	r3, [pc, #128]	; (8000ba0 <main+0x1b8>)
 8000b20:	601a      	str	r2, [r3, #0]

  /* definition and creation of TaskDistanza */
  osThreadDef(TaskDistanza, StartTaskDistanza, osPriorityNormal, 0, 512);
 8000b22:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <main+0x1bc>)
 8000b24:	f107 041c 	add.w	r4, r7, #28
 8000b28:	461d      	mov	r5, r3
 8000b2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskDistanzaHandle = osThreadCreate(osThread(TaskDistanza), NULL);
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f00b fe82 	bl	800c846 <osThreadCreate>
 8000b42:	4602      	mov	r2, r0
 8000b44:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <main+0x1c0>)
 8000b46:	601a      	str	r2, [r3, #0]

  /* definition and creation of TaskLed */
  osThreadDef(TaskLed, StartTaskLed, osPriorityNormal, 0, 128);
 8000b48:	4b18      	ldr	r3, [pc, #96]	; (8000bac <main+0x1c4>)
 8000b4a:	463c      	mov	r4, r7
 8000b4c:	461d      	mov	r5, r3
 8000b4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskLedHandle = osThreadCreate(osThread(TaskLed), NULL);
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f00b fe71 	bl	800c846 <osThreadCreate>
 8000b64:	4602      	mov	r2, r0
 8000b66:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <main+0x1c8>)
 8000b68:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b6a:	f00b fe65 	bl	800c838 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <main+0x186>
 8000b70:	2000362c 	.word	0x2000362c
 8000b74:	20003628 	.word	0x20003628
 8000b78:	200035c0 	.word	0x200035c0
 8000b7c:	2000353c 	.word	0x2000353c
 8000b80:	08010db8 	.word	0x08010db8
 8000b84:	20003620 	.word	0x20003620
 8000b88:	08010dc8 	.word	0x08010dc8
 8000b8c:	20003624 	.word	0x20003624
 8000b90:	200035d8 	.word	0x200035d8
 8000b94:	08010de4 	.word	0x08010de4
 8000b98:	20002fa8 	.word	0x20002fa8
 8000b9c:	08010e10 	.word	0x08010e10
 8000ba0:	20003694 	.word	0x20003694
 8000ba4:	08010e3c 	.word	0x08010e3c
 8000ba8:	200035d4 	.word	0x200035d4
 8000bac:	08010e60 	.word	0x08010e60
 8000bb0:	200035d0 	.word	0x200035d0

08000bb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b0b8      	sub	sp, #224	; 0xe0
 8000bb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bbe:	2244      	movs	r2, #68	; 0x44
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f00f f91d 	bl	800fe02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bd8:	463b      	mov	r3, r7
 8000bda:	2288      	movs	r2, #136	; 0x88
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f00f f90f 	bl	800fe02 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000be4:	f003 fa98 	bl	8004118 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000be8:	4b42      	ldr	r3, [pc, #264]	; (8000cf4 <SystemClock_Config+0x140>)
 8000bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000bee:	4a41      	ldr	r2, [pc, #260]	; (8000cf4 <SystemClock_Config+0x140>)
 8000bf0:	f023 0318 	bic.w	r3, r3, #24
 8000bf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000bf8:	2314      	movs	r3, #20
 8000bfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c04:	2301      	movs	r3, #1
 8000c06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c10:	2360      	movs	r3, #96	; 0x60
 8000c12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c16:	2302      	movs	r3, #2
 8000c18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c22:	2301      	movs	r3, #1
 8000c24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000c28:	2328      	movs	r3, #40	; 0x28
 8000c2a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c2e:	2307      	movs	r3, #7
 8000c30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c34:	2302      	movs	r3, #2
 8000c36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c40:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c44:	4618      	mov	r0, r3
 8000c46:	f003 fbb3 	bl	80043b0 <HAL_RCC_OscConfig>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000c50:	f000 ff02 	bl	8001a58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c54:	230f      	movs	r3, #15
 8000c56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c72:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000c76:	2104      	movs	r1, #4
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f003 ff7f 	bl	8004b7c <HAL_RCC_ClockConfig>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000c84:	f000 fee8 	bl	8001a58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8000c88:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <SystemClock_Config+0x144>)
 8000c8a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c90:	2300      	movs	r3, #0
 8000c92:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000c94:	2300      	movs	r3, #0
 8000c96:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000c9e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000ca2:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000cac:	2318      	movs	r3, #24
 8000cae:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000cb0:	2307      	movs	r3, #7
 8000cb2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000cbc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000cc0:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc2:	463b      	mov	r3, r7
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f004 f95d 	bl	8004f84 <HAL_RCCEx_PeriphCLKConfig>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8000cd0:	f000 fec2 	bl	8001a58 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000cd4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000cd8:	f003 fa3c 	bl	8004154 <HAL_PWREx_ControlVoltageScaling>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <SystemClock_Config+0x132>
  {
    Error_Handler();
 8000ce2:	f000 feb9 	bl	8001a58 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000ce6:	f004 fc33 	bl	8005550 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000cea:	bf00      	nop
 8000cec:	37e0      	adds	r7, #224	; 0xe0
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	00012085 	.word	0x00012085

08000cfc <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000d00:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <MX_DFSDM1_Init+0x68>)
 8000d02:	4a19      	ldr	r2, [pc, #100]	; (8000d68 <MX_DFSDM1_Init+0x6c>)
 8000d04:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000d06:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <MX_DFSDM1_Init+0x68>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000d0c:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <MX_DFSDM1_Init+0x68>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000d12:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <MX_DFSDM1_Init+0x68>)
 8000d14:	2202      	movs	r2, #2
 8000d16:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <MX_DFSDM1_Init+0x68>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <MX_DFSDM1_Init+0x68>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <MX_DFSDM1_Init+0x68>)
 8000d26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d2a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000d2c:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <MX_DFSDM1_Init+0x68>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000d32:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <MX_DFSDM1_Init+0x68>)
 8000d34:	2204      	movs	r2, #4
 8000d36:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <MX_DFSDM1_Init+0x68>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <MX_DFSDM1_Init+0x68>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000d44:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <MX_DFSDM1_Init+0x68>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <MX_DFSDM1_Init+0x68>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000d50:	4804      	ldr	r0, [pc, #16]	; (8000d64 <MX_DFSDM1_Init+0x68>)
 8000d52:	f001 fc8d 	bl	8002670 <HAL_DFSDM_ChannelInit>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000d5c:	f000 fe7c 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20002fac 	.word	0x20002fac
 8000d68:	40016020 	.word	0x40016020

08000d6c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d70:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <MX_I2C2_Init+0x74>)
 8000d72:	4a1c      	ldr	r2, [pc, #112]	; (8000de4 <MX_I2C2_Init+0x78>)
 8000d74:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000d76:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <MX_I2C2_Init+0x74>)
 8000d78:	4a1b      	ldr	r2, [pc, #108]	; (8000de8 <MX_I2C2_Init+0x7c>)
 8000d7a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d7c:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <MX_I2C2_Init+0x74>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d82:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <MX_I2C2_Init+0x74>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d88:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <MX_I2C2_Init+0x74>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d8e:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <MX_I2C2_Init+0x74>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <MX_I2C2_Init+0x74>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d9a:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <MX_I2C2_Init+0x74>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <MX_I2C2_Init+0x74>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000da6:	480e      	ldr	r0, [pc, #56]	; (8000de0 <MX_I2C2_Init+0x74>)
 8000da8:	f002 f877 	bl	8002e9a <HAL_I2C_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000db2:	f000 fe51 	bl	8001a58 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000db6:	2100      	movs	r1, #0
 8000db8:	4809      	ldr	r0, [pc, #36]	; (8000de0 <MX_I2C2_Init+0x74>)
 8000dba:	f002 ffcd 	bl	8003d58 <HAL_I2CEx_ConfigAnalogFilter>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000dc4:	f000 fe48 	bl	8001a58 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4805      	ldr	r0, [pc, #20]	; (8000de0 <MX_I2C2_Init+0x74>)
 8000dcc:	f003 f80f 	bl	8003dee <HAL_I2CEx_ConfigDigitalFilter>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000dd6:	f000 fe3f 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	2000346c 	.word	0x2000346c
 8000de4:	40005800 	.word	0x40005800
 8000de8:	10909cec 	.word	0x10909cec

08000dec <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <MX_QUADSPI_Init+0x44>)
 8000df2:	4a10      	ldr	r2, [pc, #64]	; (8000e34 <MX_QUADSPI_Init+0x48>)
 8000df4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <MX_QUADSPI_Init+0x44>)
 8000df8:	22ff      	movs	r2, #255	; 0xff
 8000dfa:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <MX_QUADSPI_Init+0x44>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <MX_QUADSPI_Init+0x44>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <MX_QUADSPI_Init+0x44>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000e0e:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <MX_QUADSPI_Init+0x44>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <MX_QUADSPI_Init+0x44>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000e1a:	4805      	ldr	r0, [pc, #20]	; (8000e30 <MX_QUADSPI_Init+0x44>)
 8000e1c:	f003 fa00 	bl	8004220 <HAL_QSPI_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000e26:	f000 fe17 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200036b0 	.word	0x200036b0
 8000e34:	a0001000 	.word	0xa0001000

08000e38 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000e3c:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <MX_SPI3_Init+0x74>)
 8000e3e:	4a1c      	ldr	r2, [pc, #112]	; (8000eb0 <MX_SPI3_Init+0x78>)
 8000e40:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000e42:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <MX_SPI3_Init+0x74>)
 8000e44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e48:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000e4a:	4b18      	ldr	r3, [pc, #96]	; (8000eac <MX_SPI3_Init+0x74>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e50:	4b16      	ldr	r3, [pc, #88]	; (8000eac <MX_SPI3_Init+0x74>)
 8000e52:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e56:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e58:	4b14      	ldr	r3, [pc, #80]	; (8000eac <MX_SPI3_Init+0x74>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e5e:	4b13      	ldr	r3, [pc, #76]	; (8000eac <MX_SPI3_Init+0x74>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000e64:	4b11      	ldr	r3, [pc, #68]	; (8000eac <MX_SPI3_Init+0x74>)
 8000e66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e6a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <MX_SPI3_Init+0x74>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e72:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <MX_SPI3_Init+0x74>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <MX_SPI3_Init+0x74>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <MX_SPI3_Init+0x74>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000e84:	4b09      	ldr	r3, [pc, #36]	; (8000eac <MX_SPI3_Init+0x74>)
 8000e86:	2207      	movs	r2, #7
 8000e88:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e8a:	4b08      	ldr	r3, [pc, #32]	; (8000eac <MX_SPI3_Init+0x74>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <MX_SPI3_Init+0x74>)
 8000e92:	2208      	movs	r2, #8
 8000e94:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000e96:	4805      	ldr	r0, [pc, #20]	; (8000eac <MX_SPI3_Init+0x74>)
 8000e98:	f004 fd34 	bl	8005904 <HAL_SPI_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000ea2:	f000 fdd9 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200034d8 	.word	0x200034d8
 8000eb0:	40003c00 	.word	0x40003c00

08000eb4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000eb8:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <MX_USART1_UART_Init+0x58>)
 8000eba:	4a15      	ldr	r2, [pc, #84]	; (8000f10 <MX_USART1_UART_Init+0x5c>)
 8000ebc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ebe:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <MX_USART1_UART_Init+0x58>)
 8000ec0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ec4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ec6:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <MX_USART1_UART_Init+0x58>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <MX_USART1_UART_Init+0x58>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <MX_USART1_UART_Init+0x58>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <MX_USART1_UART_Init+0x58>)
 8000eda:	220c      	movs	r2, #12
 8000edc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <MX_USART1_UART_Init+0x58>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <MX_USART1_UART_Init+0x58>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <MX_USART1_UART_Init+0x58>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <MX_USART1_UART_Init+0x58>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ef6:	4805      	ldr	r0, [pc, #20]	; (8000f0c <MX_USART1_UART_Init+0x58>)
 8000ef8:	f004 fd8e 	bl	8005a18 <HAL_UART_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f02:	f000 fda9 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20003540 	.word	0x20003540
 8000f10:	40013800 	.word	0x40013800

08000f14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f18:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <MX_USART3_UART_Init+0x58>)
 8000f1a:	4a15      	ldr	r2, [pc, #84]	; (8000f70 <MX_USART3_UART_Init+0x5c>)
 8000f1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f1e:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <MX_USART3_UART_Init+0x58>)
 8000f20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <MX_USART3_UART_Init+0x58>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <MX_USART3_UART_Init+0x58>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <MX_USART3_UART_Init+0x58>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <MX_USART3_UART_Init+0x58>)
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <MX_USART3_UART_Init+0x58>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f44:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <MX_USART3_UART_Init+0x58>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f4a:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <MX_USART3_UART_Init+0x58>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <MX_USART3_UART_Init+0x58>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f56:	4805      	ldr	r0, [pc, #20]	; (8000f6c <MX_USART3_UART_Init+0x58>)
 8000f58:	f004 fd5e 	bl	8005a18 <HAL_UART_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f62:	f000 fd79 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20002fe4 	.word	0x20002fe4
 8000f70:	40004800 	.word	0x40004800

08000f74 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f7e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f82:	2206      	movs	r2, #6
 8000f84:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f88:	2202      	movs	r2, #2
 8000f8a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f8e:	2202      	movs	r2, #2
 8000f90:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000fa4:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000faa:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fb8:	f002 ff65 	bl	8003e86 <HAL_PCD_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000fc2:	f000 fd49 	bl	8001a58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20003064 	.word	0x20003064

08000fd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fe6:	4bba      	ldr	r3, [pc, #744]	; (80012d0 <MX_GPIO_Init+0x300>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	4ab9      	ldr	r2, [pc, #740]	; (80012d0 <MX_GPIO_Init+0x300>)
 8000fec:	f043 0310 	orr.w	r3, r3, #16
 8000ff0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff2:	4bb7      	ldr	r3, [pc, #732]	; (80012d0 <MX_GPIO_Init+0x300>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	f003 0310 	and.w	r3, r3, #16
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffe:	4bb4      	ldr	r3, [pc, #720]	; (80012d0 <MX_GPIO_Init+0x300>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	4ab3      	ldr	r2, [pc, #716]	; (80012d0 <MX_GPIO_Init+0x300>)
 8001004:	f043 0304 	orr.w	r3, r3, #4
 8001008:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100a:	4bb1      	ldr	r3, [pc, #708]	; (80012d0 <MX_GPIO_Init+0x300>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	f003 0304 	and.w	r3, r3, #4
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	4bae      	ldr	r3, [pc, #696]	; (80012d0 <MX_GPIO_Init+0x300>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	4aad      	ldr	r2, [pc, #692]	; (80012d0 <MX_GPIO_Init+0x300>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001022:	4bab      	ldr	r3, [pc, #684]	; (80012d0 <MX_GPIO_Init+0x300>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102e:	4ba8      	ldr	r3, [pc, #672]	; (80012d0 <MX_GPIO_Init+0x300>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001032:	4aa7      	ldr	r2, [pc, #668]	; (80012d0 <MX_GPIO_Init+0x300>)
 8001034:	f043 0302 	orr.w	r3, r3, #2
 8001038:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103a:	4ba5      	ldr	r3, [pc, #660]	; (80012d0 <MX_GPIO_Init+0x300>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001046:	4ba2      	ldr	r3, [pc, #648]	; (80012d0 <MX_GPIO_Init+0x300>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104a:	4aa1      	ldr	r2, [pc, #644]	; (80012d0 <MX_GPIO_Init+0x300>)
 800104c:	f043 0308 	orr.w	r3, r3, #8
 8001050:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001052:	4b9f      	ldr	r3, [pc, #636]	; (80012d0 <MX_GPIO_Init+0x300>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001056:	f003 0308 	and.w	r3, r3, #8
 800105a:	603b      	str	r3, [r7, #0]
 800105c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001064:	489b      	ldr	r0, [pc, #620]	; (80012d4 <MX_GPIO_Init+0x304>)
 8001066:	f001 fec3 	bl	8002df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	f248 1104 	movw	r1, #33028	; 0x8104
 8001070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001074:	f001 febc 	bl	8002df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8001078:	2200      	movs	r2, #0
 800107a:	f24f 0114 	movw	r1, #61460	; 0xf014
 800107e:	4896      	ldr	r0, [pc, #600]	; (80012d8 <MX_GPIO_Init+0x308>)
 8001080:	f001 feb6 	bl	8002df0 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	f241 0181 	movw	r1, #4225	; 0x1081
 800108a:	4894      	ldr	r0, [pc, #592]	; (80012dc <MX_GPIO_Init+0x30c>)
 800108c:	f001 feb0 	bl	8002df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001090:	2201      	movs	r2, #1
 8001092:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001096:	4891      	ldr	r0, [pc, #580]	; (80012dc <MX_GPIO_Init+0x30c>)
 8001098:	f001 feaa 	bl	8002df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	f44f 7110 	mov.w	r1, #576	; 0x240
 80010a2:	488f      	ldr	r0, [pc, #572]	; (80012e0 <MX_GPIO_Init+0x310>)
 80010a4:	f001 fea4 	bl	8002df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	2120      	movs	r1, #32
 80010ac:	488a      	ldr	r0, [pc, #552]	; (80012d8 <MX_GPIO_Init+0x308>)
 80010ae:	f001 fe9f 	bl	8002df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80010b2:	2201      	movs	r2, #1
 80010b4:	2101      	movs	r1, #1
 80010b6:	4887      	ldr	r0, [pc, #540]	; (80012d4 <MX_GPIO_Init+0x304>)
 80010b8:	f001 fe9a 	bl	8002df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80010bc:	f240 1315 	movw	r3, #277	; 0x115
 80010c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	4619      	mov	r1, r3
 80010d4:	487f      	ldr	r0, [pc, #508]	; (80012d4 <MX_GPIO_Init+0x304>)
 80010d6:	f001 fbd7 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80010da:	236a      	movs	r3, #106	; 0x6a
 80010dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010de:	4b81      	ldr	r3, [pc, #516]	; (80012e4 <MX_GPIO_Init+0x314>)
 80010e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4619      	mov	r1, r3
 80010ec:	4879      	ldr	r0, [pc, #484]	; (80012d4 <MX_GPIO_Init+0x304>)
 80010ee:	f001 fbcb 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80010f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010f8:	4b7b      	ldr	r3, [pc, #492]	; (80012e8 <MX_GPIO_Init+0x318>)
 80010fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	4619      	mov	r1, r3
 8001106:	4876      	ldr	r0, [pc, #472]	; (80012e0 <MX_GPIO_Init+0x310>)
 8001108:	f001 fbbe 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin 
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 800110c:	233f      	movs	r3, #63	; 0x3f
 800110e:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001110:	230b      	movs	r3, #11
 8001112:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	4619      	mov	r1, r3
 800111e:	4870      	ldr	r0, [pc, #448]	; (80012e0 <MX_GPIO_Init+0x310>)
 8001120:	f001 fbb2 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001124:	2303      	movs	r3, #3
 8001126:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001130:	2303      	movs	r3, #3
 8001132:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001134:	2308      	movs	r3, #8
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4619      	mov	r1, r3
 800113e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001142:	f001 fba1 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001146:	f248 1304 	movw	r3, #33028	; 0x8104
 800114a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114c:	2301      	movs	r3, #1
 800114e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2300      	movs	r3, #0
 8001156:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	4619      	mov	r1, r3
 800115e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001162:	f001 fb91 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001166:	2308      	movs	r3, #8
 8001168:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001176:	2301      	movs	r3, #1
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4619      	mov	r1, r3
 8001180:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001184:	f001 fb80 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001188:	2310      	movs	r3, #16
 800118a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800118c:	230b      	movs	r3, #11
 800118e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800119e:	f001 fb73 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80011a2:	23e0      	movs	r3, #224	; 0xe0
 80011a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a6:	2302      	movs	r3, #2
 80011a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ae:	2303      	movs	r3, #3
 80011b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011b2:	2305      	movs	r3, #5
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	4619      	mov	r1, r3
 80011bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c0:	f001 fb62 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80011c4:	2301      	movs	r3, #1
 80011c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011c8:	4b46      	ldr	r3, [pc, #280]	; (80012e4 <MX_GPIO_Init+0x314>)
 80011ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	4619      	mov	r1, r3
 80011d6:	4840      	ldr	r0, [pc, #256]	; (80012d8 <MX_GPIO_Init+0x308>)
 80011d8:	f001 fb56 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80011dc:	2302      	movs	r3, #2
 80011de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011e0:	230b      	movs	r3, #11
 80011e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	4619      	mov	r1, r3
 80011ee:	483a      	ldr	r0, [pc, #232]	; (80012d8 <MX_GPIO_Init+0x308>)
 80011f0:	f001 fb4a 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin 
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 80011f4:	f24f 0334 	movw	r3, #61492	; 0xf034
 80011f8:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fa:	2301      	movs	r3, #1
 80011fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4619      	mov	r1, r3
 800120c:	4832      	ldr	r0, [pc, #200]	; (80012d8 <MX_GPIO_Init+0x308>)
 800120e:	f001 fb3b 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin 
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 8001212:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001216:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001218:	4b32      	ldr	r3, [pc, #200]	; (80012e4 <MX_GPIO_Init+0x314>)
 800121a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	4619      	mov	r1, r3
 8001226:	482d      	ldr	r0, [pc, #180]	; (80012dc <MX_GPIO_Init+0x30c>)
 8001228:	f001 fb2e 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 800122c:	f243 0381 	movw	r3, #12417	; 0x3081
 8001230:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001232:	2301      	movs	r3, #1
 8001234:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123a:	2300      	movs	r3, #0
 800123c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	4619      	mov	r1, r3
 8001244:	4825      	ldr	r0, [pc, #148]	; (80012dc <MX_GPIO_Init+0x30c>)
 8001246:	f001 fb1f 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800124a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800124e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001250:	2301      	movs	r3, #1
 8001252:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2300      	movs	r3, #0
 800125a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	4619      	mov	r1, r3
 8001262:	481f      	ldr	r0, [pc, #124]	; (80012e0 <MX_GPIO_Init+0x310>)
 8001264:	f001 fb10 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001268:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800126c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800126e:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <MX_GPIO_Init+0x314>)
 8001270:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	4818      	ldr	r0, [pc, #96]	; (80012e0 <MX_GPIO_Init+0x310>)
 800127e:	f001 fb03 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001282:	2302      	movs	r3, #2
 8001284:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128e:	2303      	movs	r3, #3
 8001290:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001292:	2305      	movs	r3, #5
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	4619      	mov	r1, r3
 800129c:	480f      	ldr	r0, [pc, #60]	; (80012dc <MX_GPIO_Init+0x30c>)
 800129e:	f001 faf3 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80012a2:	2378      	movs	r3, #120	; 0x78
 80012a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	2302      	movs	r3, #2
 80012a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ae:	2303      	movs	r3, #3
 80012b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012b2:	2307      	movs	r3, #7
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	4619      	mov	r1, r3
 80012bc:	4807      	ldr	r0, [pc, #28]	; (80012dc <MX_GPIO_Init+0x30c>)
 80012be:	f001 fae3 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80012c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012c8:	2312      	movs	r3, #18
 80012ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e00d      	b.n	80012ec <MX_GPIO_Init+0x31c>
 80012d0:	40021000 	.word	0x40021000
 80012d4:	48001000 	.word	0x48001000
 80012d8:	48000400 	.word	0x48000400
 80012dc:	48000c00 	.word	0x48000c00
 80012e0:	48000800 	.word	0x48000800
 80012e4:	10110000 	.word	0x10110000
 80012e8:	10210000 	.word	0x10210000
 80012ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ee:	2303      	movs	r3, #3
 80012f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012f2:	2304      	movs	r3, #4
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	4619      	mov	r1, r3
 80012fc:	480b      	ldr	r0, [pc, #44]	; (800132c <MX_GPIO_Init+0x35c>)
 80012fe:	f001 fac3 	bl	8002888 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2105      	movs	r1, #5
 8001306:	2017      	movs	r0, #23
 8001308:	f001 f97b 	bl	8002602 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800130c:	2017      	movs	r0, #23
 800130e:	f001 f994 	bl	800263a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	2105      	movs	r1, #5
 8001316:	2028      	movs	r0, #40	; 0x28
 8001318:	f001 f973 	bl	8002602 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800131c:	2028      	movs	r0, #40	; 0x28
 800131e:	f001 f98c 	bl	800263a <HAL_NVIC_EnableIRQ>

}
 8001322:	bf00      	nop
 8001324:	3728      	adds	r7, #40	; 0x28
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	48000400 	.word	0x48000400

08001330 <StartTaskBottone>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartTaskBottone */
void StartTaskBottone(void const * argument)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(150);
 8001338:	2096      	movs	r0, #150	; 0x96
 800133a:	f00b fad0 	bl	800c8de <osDelay>
	  osSemaphoreWait(myMutex01Handle,osWaitForever);
 800133e:	4b45      	ldr	r3, [pc, #276]	; (8001454 <StartTaskBottone+0x124>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f04f 31ff 	mov.w	r1, #4294967295
 8001346:	4618      	mov	r0, r3
 8001348:	f00b fb36 	bl	800c9b8 <osSemaphoreWait>
	  uint32_t start = HAL_GetTick();
 800134c:	f001 f850 	bl	80023f0 <HAL_GetTick>
 8001350:	61f8      	str	r0, [r7, #28]

	  	  	  bitstatus = HAL_GPIO_ReadPin(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin);
 8001352:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001356:	4840      	ldr	r0, [pc, #256]	; (8001458 <StartTaskBottone+0x128>)
 8001358:	f001 fd32 	bl	8002dc0 <HAL_GPIO_ReadPin>
 800135c:	4603      	mov	r3, r0
 800135e:	461a      	mov	r2, r3
 8001360:	4b3e      	ldr	r3, [pc, #248]	; (800145c <StartTaskBottone+0x12c>)
 8001362:	601a      	str	r2, [r3, #0]

	  	  	  //temperature basse, premo il pulsante -> il sistema si attiva
	  	  	  if(bitstatus == 0 && pulsante == 0 && incendio==0){
 8001364:	4b3d      	ldr	r3, [pc, #244]	; (800145c <StartTaskBottone+0x12c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d137      	bne.n	80013dc <StartTaskBottone+0xac>
 800136c:	4b3c      	ldr	r3, [pc, #240]	; (8001460 <StartTaskBottone+0x130>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d133      	bne.n	80013dc <StartTaskBottone+0xac>
 8001374:	4b3b      	ldr	r3, [pc, #236]	; (8001464 <StartTaskBottone+0x134>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d12f      	bne.n	80013dc <StartTaskBottone+0xac>
	  	  		  if(b2>0){
 800137c:	4b3a      	ldr	r3, [pc, #232]	; (8001468 <StartTaskBottone+0x138>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	dd07      	ble.n	8001394 <StartTaskBottone+0x64>
	  	  			b2=0;
 8001384:	4b38      	ldr	r3, [pc, #224]	; (8001468 <StartTaskBottone+0x138>)
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
	  	  			osSemaphoreRelease(myBinarySem02Handle);
 800138a:	4b38      	ldr	r3, [pc, #224]	; (800146c <StartTaskBottone+0x13c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f00b fb60 	bl	800ca54 <osSemaphoreRelease>
	  	  		  }
	  	  		  pulsante = 1;
 8001394:	4b32      	ldr	r3, [pc, #200]	; (8001460 <StartTaskBottone+0x130>)
 8001396:	2201      	movs	r2, #1
 8001398:	601a      	str	r2, [r3, #0]
	  	  		  action = 0;
 800139a:	4b35      	ldr	r3, [pc, #212]	; (8001470 <StartTaskBottone+0x140>)
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
	  	  		  nTempBasse=0;
 80013a0:	4b34      	ldr	r3, [pc, #208]	; (8001474 <StartTaskBottone+0x144>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
	  	  		  nTempAlte = nTempValid+1;
 80013a6:	4b34      	ldr	r3, [pc, #208]	; (8001478 <StartTaskBottone+0x148>)
 80013a8:	2206      	movs	r2, #6
 80013aa:	601a      	str	r2, [r3, #0]
	  	  		  delay = 500;
 80013ac:	4b33      	ldr	r3, [pc, #204]	; (800147c <StartTaskBottone+0x14c>)
 80013ae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80013b2:	601a      	str	r2, [r3, #0]
	  	  		  Temp DataToSend = {1,0};
 80013b4:	2301      	movs	r3, #1
 80013b6:	823b      	strh	r3, [r7, #16]
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
	  	  		  osMessagePut(myQueue03Handle,(uint32_t)&DataToSend,200);
 80013bc:	4b30      	ldr	r3, [pc, #192]	; (8001480 <StartTaskBottone+0x150>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f107 0110 	add.w	r1, r7, #16
 80013c4:	22c8      	movs	r2, #200	; 0xc8
 80013c6:	4618      	mov	r0, r3
 80013c8:	f00b fba4 	bl	800cb14 <osMessagePut>
	  	  		  HAL_UART_Transmit(&huart1,( uint8_t * )msg_attivato,sizeof(msg_attivato),HAL_MAX_DELAY);
 80013cc:	f04f 33ff 	mov.w	r3, #4294967295
 80013d0:	2264      	movs	r2, #100	; 0x64
 80013d2:	492c      	ldr	r1, [pc, #176]	; (8001484 <StartTaskBottone+0x154>)
 80013d4:	482c      	ldr	r0, [pc, #176]	; (8001488 <StartTaskBottone+0x158>)
 80013d6:	f004 fb6d 	bl	8005ab4 <HAL_UART_Transmit>
	  	  	  if(bitstatus == 0 && pulsante == 0 && incendio==0){
 80013da:	e02c      	b.n	8001436 <StartTaskBottone+0x106>
	  	  	  }

	  	  	  // premo il pulsante -> il sistema si disattiva indipendentemente dalle temperature
	  	  	  else if (bitstatus == 0){
 80013dc:	4b1f      	ldr	r3, [pc, #124]	; (800145c <StartTaskBottone+0x12c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d128      	bne.n	8001436 <StartTaskBottone+0x106>
	  	  		 b2=1;
 80013e4:	4b20      	ldr	r3, [pc, #128]	; (8001468 <StartTaskBottone+0x138>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	601a      	str	r2, [r3, #0]
	  	  		 pulsante = 0;
 80013ea:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <StartTaskBottone+0x130>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
	  	  		 incendio=0;
 80013f0:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <StartTaskBottone+0x134>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
	  	  		 nTempAlte=0;
 80013f6:	4b20      	ldr	r3, [pc, #128]	; (8001478 <StartTaskBottone+0x148>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
	  	  		 nTempBasse = 0;
 80013fc:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <StartTaskBottone+0x144>)
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
	  	  		 action = 0;
 8001402:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <StartTaskBottone+0x140>)
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
	  	  		 delay = 1500;
 8001408:	4b1c      	ldr	r3, [pc, #112]	; (800147c <StartTaskBottone+0x14c>)
 800140a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800140e:	601a      	str	r2, [r3, #0]
	  	  		 Temp DataToSend = {0,0};
 8001410:	2300      	movs	r3, #0
 8001412:	813b      	strh	r3, [r7, #8]
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
	  	  		 osMessagePut(myQueue03Handle,(uint32_t)&DataToSend,200);
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <StartTaskBottone+0x150>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f107 0108 	add.w	r1, r7, #8
 8001420:	22c8      	movs	r2, #200	; 0xc8
 8001422:	4618      	mov	r0, r3
 8001424:	f00b fb76 	bl	800cb14 <osMessagePut>
	  	  		 HAL_UART_Transmit(&huart1,( uint8_t * )msg_disattivato,sizeof(msg_disattivato),HAL_MAX_DELAY);
 8001428:	f04f 33ff 	mov.w	r3, #4294967295
 800142c:	2264      	movs	r2, #100	; 0x64
 800142e:	4917      	ldr	r1, [pc, #92]	; (800148c <StartTaskBottone+0x15c>)
 8001430:	4815      	ldr	r0, [pc, #84]	; (8001488 <StartTaskBottone+0x158>)
 8001432:	f004 fb3f 	bl	8005ab4 <HAL_UART_Transmit>
	  	  	  }

	  		   uint32_t end = HAL_GetTick();
 8001436:	f000 ffdb 	bl	80023f0 <HAL_GetTick>
 800143a:	61b8      	str	r0, [r7, #24]
	  		   time1 = end - start;
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	4a13      	ldr	r2, [pc, #76]	; (8001490 <StartTaskBottone+0x160>)
 8001444:	6013      	str	r3, [r2, #0]
	  	       osSemaphoreRelease(myMutex01Handle);
 8001446:	4b03      	ldr	r3, [pc, #12]	; (8001454 <StartTaskBottone+0x124>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f00b fb02 	bl	800ca54 <osSemaphoreRelease>
  {
 8001450:	e772      	b.n	8001338 <StartTaskBottone+0x8>
 8001452:	bf00      	nop
 8001454:	20003628 	.word	0x20003628
 8001458:	48000800 	.word	0x48000800
 800145c:	20000db8 	.word	0x20000db8
 8001460:	20000dbc 	.word	0x20000dbc
 8001464:	20000dc0 	.word	0x20000dc0
 8001468:	200001c0 	.word	0x200001c0
 800146c:	200035c0 	.word	0x200035c0
 8001470:	20000dc4 	.word	0x20000dc4
 8001474:	20000db0 	.word	0x20000db0
 8001478:	20000db4 	.word	0x20000db4
 800147c:	200001bc 	.word	0x200001bc
 8001480:	200035d8 	.word	0x200035d8
 8001484:	20000034 	.word	0x20000034
 8001488:	20003540 	.word	0x20003540
 800148c:	20000098 	.word	0x20000098
 8001490:	20000dc8 	.word	0x20000dc8

08001494 <StartTaskTemperatura>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskTemperatura */
void StartTaskTemperatura(void const * argument)
{
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b08f      	sub	sp, #60	; 0x3c
 8001498:	af02      	add	r7, sp, #8
 800149a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskTemperatura */
  /* Infinite loop */
	  for(;;)
	  {
		  osDelay(delay);
 800149c:	4b73      	ldr	r3, [pc, #460]	; (800166c <StartTaskTemperatura+0x1d8>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f00b fa1c 	bl	800c8de <osDelay>
		  osSemaphoreWait(myMutex01Handle,osWaitForever);
 80014a6:	4b72      	ldr	r3, [pc, #456]	; (8001670 <StartTaskTemperatura+0x1dc>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f04f 31ff 	mov.w	r1, #4294967295
 80014ae:	4618      	mov	r0, r3
 80014b0:	f00b fa82 	bl	800c9b8 <osSemaphoreWait>
		  uint32_t start = HAL_GetTick();
 80014b4:	f000 ff9c 	bl	80023f0 <HAL_GetTick>
 80014b8:	62f8      	str	r0, [r7, #44]	; 0x2c

		  //accendo il led verde quando la situazione è normale
		  if(nTempAlte == 0 && nTempBasse == 0){
 80014ba:	4b6e      	ldr	r3, [pc, #440]	; (8001674 <StartTaskTemperatura+0x1e0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10f      	bne.n	80014e2 <StartTaskTemperatura+0x4e>
 80014c2:	4b6d      	ldr	r3, [pc, #436]	; (8001678 <StartTaskTemperatura+0x1e4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10b      	bne.n	80014e2 <StartTaskTemperatura+0x4e>
			  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80014ca:	2201      	movs	r2, #1
 80014cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014d0:	486a      	ldr	r0, [pc, #424]	; (800167c <StartTaskTemperatura+0x1e8>)
 80014d2:	f001 fc8d 	bl	8002df0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED3_WIFI__LED4_BLE_GPIO_Port, LED3_WIFI__LED4_BLE_Pin,  GPIO_PIN_SET);
 80014d6:	2201      	movs	r2, #1
 80014d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014dc:	4868      	ldr	r0, [pc, #416]	; (8001680 <StartTaskTemperatura+0x1ec>)
 80014de:	f001 fc87 	bl	8002df0 <HAL_GPIO_WritePin>
		  }

		   temp_value = BSP_TSENSOR_ReadTemp();
 80014e2:	f000 fe5f 	bl	80021a4 <BSP_TSENSOR_ReadTemp>
 80014e6:	eef0 7a40 	vmov.f32	s15, s0
 80014ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014ee:	edc7 7a00 	vstr	s15, [r7]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4b63      	ldr	r3, [pc, #396]	; (8001684 <StartTaskTemperatura+0x1f0>)
 80014f8:	701a      	strb	r2, [r3, #0]
		   if(temp_value > tempMax){
 80014fa:	4b62      	ldr	r3, [pc, #392]	; (8001684 <StartTaskTemperatura+0x1f0>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b1c      	cmp	r3, #28
 8001500:	d908      	bls.n	8001514 <StartTaskTemperatura+0x80>
			   nTempAlte++;
 8001502:	4b5c      	ldr	r3, [pc, #368]	; (8001674 <StartTaskTemperatura+0x1e0>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	3301      	adds	r3, #1
 8001508:	4a5a      	ldr	r2, [pc, #360]	; (8001674 <StartTaskTemperatura+0x1e0>)
 800150a:	6013      	str	r3, [r2, #0]
			   nTempBasse=0;
 800150c:	4b5a      	ldr	r3, [pc, #360]	; (8001678 <StartTaskTemperatura+0x1e4>)
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	e019      	b.n	8001548 <StartTaskTemperatura+0xb4>
		   } else{
			   nTempBasse++;
 8001514:	4b58      	ldr	r3, [pc, #352]	; (8001678 <StartTaskTemperatura+0x1e4>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	3301      	adds	r3, #1
 800151a:	4a57      	ldr	r2, [pc, #348]	; (8001678 <StartTaskTemperatura+0x1e4>)
 800151c:	6013      	str	r3, [r2, #0]
			   if(nTempBasse>nTempValid && pulsante == 0){
 800151e:	4b56      	ldr	r3, [pc, #344]	; (8001678 <StartTaskTemperatura+0x1e4>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b05      	cmp	r3, #5
 8001524:	dd10      	ble.n	8001548 <StartTaskTemperatura+0xb4>
 8001526:	4b58      	ldr	r3, [pc, #352]	; (8001688 <StartTaskTemperatura+0x1f4>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10c      	bne.n	8001548 <StartTaskTemperatura+0xb4>
					   nTempAlte = 0;
 800152e:	4b51      	ldr	r3, [pc, #324]	; (8001674 <StartTaskTemperatura+0x1e0>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
					   nTempBasse=0;
 8001534:	4b50      	ldr	r3, [pc, #320]	; (8001678 <StartTaskTemperatura+0x1e4>)
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
					   if(incendio==1){
 800153a:	4b54      	ldr	r3, [pc, #336]	; (800168c <StartTaskTemperatura+0x1f8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d102      	bne.n	8001548 <StartTaskTemperatura+0xb4>
						   incendio=0;
 8001542:	4b52      	ldr	r3, [pc, #328]	; (800168c <StartTaskTemperatura+0x1f8>)
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
					   }
			   }
		   }


		   int tmpInt1 = temp_value;
 8001548:	4b4e      	ldr	r3, [pc, #312]	; (8001684 <StartTaskTemperatura+0x1f0>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	62bb      	str	r3, [r7, #40]	; 0x28
		   float tmpFrac = temp_value - tmpInt1;
 800154e:	4b4d      	ldr	r3, [pc, #308]	; (8001684 <StartTaskTemperatura+0x1f0>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	ee07 3a90 	vmov	s15, r3
 800155c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001560:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		   int tmpInt2 = trunc(tmpFrac * 100);
 8001564:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001568:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8001690 <StartTaskTemperatura+0x1fc>
 800156c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001570:	ee17 0a90 	vmov	r0, s15
 8001574:	f7fe ffe0 	bl	8000538 <__aeabi_f2d>
 8001578:	4603      	mov	r3, r0
 800157a:	460c      	mov	r4, r1
 800157c:	ec44 3b10 	vmov	d0, r3, r4
 8001580:	f00e fbd0 	bl	800fd24 <trunc>
 8001584:	ec54 3b10 	vmov	r3, r4, d0
 8001588:	4618      	mov	r0, r3
 800158a:	4621      	mov	r1, r4
 800158c:	f7ff f82c 	bl	80005e8 <__aeabi_d2iz>
 8001590:	4603      	mov	r3, r0
 8001592:	623b      	str	r3, [r7, #32]


		   if(snprintf(str_tmp4,30,"Temperatura = %d.%02d\n\r", tmpInt1,tmpInt2)>0){
 8001594:	6a3b      	ldr	r3, [r7, #32]
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800159a:	4a3e      	ldr	r2, [pc, #248]	; (8001694 <StartTaskTemperatura+0x200>)
 800159c:	211e      	movs	r1, #30
 800159e:	483e      	ldr	r0, [pc, #248]	; (8001698 <StartTaskTemperatura+0x204>)
 80015a0:	f00e fc9c 	bl	800fedc <sniprintf>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	dd06      	ble.n	80015b8 <StartTaskTemperatura+0x124>
			   HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp4,sizeof(str_tmp4),HAL_MAX_DELAY);
 80015aa:	f04f 33ff 	mov.w	r3, #4294967295
 80015ae:	221e      	movs	r2, #30
 80015b0:	4939      	ldr	r1, [pc, #228]	; (8001698 <StartTaskTemperatura+0x204>)
 80015b2:	483a      	ldr	r0, [pc, #232]	; (800169c <StartTaskTemperatura+0x208>)
 80015b4:	f004 fa7e 	bl	8005ab4 <HAL_UART_Transmit>
		   }
		   //se abbiamo letto molte temperature elevate, sblocchiamo il due e dichiariamo l'incendio
		   if(nTempAlte > nTempValid){
 80015b8:	4b2e      	ldr	r3, [pc, #184]	; (8001674 <StartTaskTemperatura+0x1e0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b05      	cmp	r3, #5
 80015be:	dd2c      	ble.n	800161a <StartTaskTemperatura+0x186>
			   if(b2>0){
 80015c0:	4b37      	ldr	r3, [pc, #220]	; (80016a0 <StartTaskTemperatura+0x20c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	dd0e      	ble.n	80015e6 <StartTaskTemperatura+0x152>
				   b2=0;
 80015c8:	4b35      	ldr	r3, [pc, #212]	; (80016a0 <StartTaskTemperatura+0x20c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
				   osSemaphoreRelease(myBinarySem02Handle);
 80015ce:	4b35      	ldr	r3, [pc, #212]	; (80016a4 <StartTaskTemperatura+0x210>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f00b fa3e 	bl	800ca54 <osSemaphoreRelease>
				   HAL_UART_Transmit(&huart1,( uint8_t * )str_incendio,sizeof(str_incendio),HAL_MAX_DELAY);
 80015d8:	f04f 33ff 	mov.w	r3, #4294967295
 80015dc:	220f      	movs	r2, #15
 80015de:	4932      	ldr	r1, [pc, #200]	; (80016a8 <StartTaskTemperatura+0x214>)
 80015e0:	482e      	ldr	r0, [pc, #184]	; (800169c <StartTaskTemperatura+0x208>)
 80015e2:	f004 fa67 	bl	8005ab4 <HAL_UART_Transmit>
			   }
			   incendio=1;
 80015e6:	4b29      	ldr	r3, [pc, #164]	; (800168c <StartTaskTemperatura+0x1f8>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	601a      	str	r2, [r3, #0]
			   Temp DataToSend = {1,1};
 80015ec:	4a2f      	ldr	r2, [pc, #188]	; (80016ac <StartTaskTemperatura+0x218>)
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015f6:	e883 0003 	stmia.w	r3, {r0, r1}
			   osMessagePut(myQueue02Handle,(uint32_t)&DataToSend,200);
 80015fa:	4b2d      	ldr	r3, [pc, #180]	; (80016b0 <StartTaskTemperatura+0x21c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f107 0114 	add.w	r1, r7, #20
 8001602:	22c8      	movs	r2, #200	; 0xc8
 8001604:	4618      	mov	r0, r3
 8001606:	f00b fa85 	bl	800cb14 <osMessagePut>
			   messaggioInviato = 1;
 800160a:	4b2a      	ldr	r3, [pc, #168]	; (80016b4 <StartTaskTemperatura+0x220>)
 800160c:	2201      	movs	r2, #1
 800160e:	601a      	str	r2, [r3, #0]
			   delay = 500;
 8001610:	4b16      	ldr	r3, [pc, #88]	; (800166c <StartTaskTemperatura+0x1d8>)
 8001612:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	e019      	b.n	800164e <StartTaskTemperatura+0x1ba>
		   }
		   else if(messaggioInviato == 1){
 800161a:	4b26      	ldr	r3, [pc, #152]	; (80016b4 <StartTaskTemperatura+0x220>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d115      	bne.n	800164e <StartTaskTemperatura+0x1ba>
			   messaggioInviato = 0;
 8001622:	4b24      	ldr	r3, [pc, #144]	; (80016b4 <StartTaskTemperatura+0x220>)
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
			   delay = 1500;
 8001628:	4b10      	ldr	r3, [pc, #64]	; (800166c <StartTaskTemperatura+0x1d8>)
 800162a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800162e:	601a      	str	r2, [r3, #0]
			   b2 = 1;
 8001630:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <StartTaskTemperatura+0x20c>)
 8001632:	2201      	movs	r2, #1
 8001634:	601a      	str	r2, [r3, #0]
			   Temp DataToSend = {0,1};
 8001636:	2300      	movs	r3, #0
 8001638:	81bb      	strh	r3, [r7, #12]
 800163a:	2301      	movs	r3, #1
 800163c:	613b      	str	r3, [r7, #16]
			   osMessagePut(myQueue02Handle,(uint32_t)&DataToSend,200);
 800163e:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <StartTaskTemperatura+0x21c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f107 010c 	add.w	r1, r7, #12
 8001646:	22c8      	movs	r2, #200	; 0xc8
 8001648:	4618      	mov	r0, r3
 800164a:	f00b fa63 	bl	800cb14 <osMessagePut>
		   }
		   uint32_t end = HAL_GetTick();
 800164e:	f000 fecf 	bl	80023f0 <HAL_GetTick>
 8001652:	61f8      	str	r0, [r7, #28]
		   time2 = end - start;
 8001654:	69fa      	ldr	r2, [r7, #28]
 8001656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	4a17      	ldr	r2, [pc, #92]	; (80016b8 <StartTaskTemperatura+0x224>)
 800165c:	6013      	str	r3, [r2, #0]
		   osSemaphoreRelease(myMutex01Handle);
 800165e:	4b04      	ldr	r3, [pc, #16]	; (8001670 <StartTaskTemperatura+0x1dc>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f00b f9f6 	bl	800ca54 <osSemaphoreRelease>
	  {
 8001668:	e718      	b.n	800149c <StartTaskTemperatura+0x8>
 800166a:	bf00      	nop
 800166c:	200001bc 	.word	0x200001bc
 8001670:	20003628 	.word	0x20003628
 8001674:	20000db4 	.word	0x20000db4
 8001678:	20000db0 	.word	0x20000db0
 800167c:	48000400 	.word	0x48000400
 8001680:	48000800 	.word	0x48000800
 8001684:	20000dac 	.word	0x20000dac
 8001688:	20000dbc 	.word	0x20000dbc
 800168c:	20000dc0 	.word	0x20000dc0
 8001690:	42c80000 	.word	0x42c80000
 8001694:	08010e7c 	.word	0x08010e7c
 8001698:	200034b8 	.word	0x200034b8
 800169c:	20003540 	.word	0x20003540
 80016a0:	200001c0 	.word	0x200001c0
 80016a4:	200035c0 	.word	0x200035c0
 80016a8:	200000fc 	.word	0x200000fc
 80016ac:	08010e94 	.word	0x08010e94
 80016b0:	20003624 	.word	0x20003624
 80016b4:	20000da4 	.word	0x20000da4
 80016b8:	20000dcc 	.word	0x20000dcc

080016bc <StartTaskDistanza>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskDistanza */
void StartTaskDistanza(void const * argument)
{
 80016bc:	b590      	push	{r4, r7, lr}
 80016be:	b08f      	sub	sp, #60	; 0x3c
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartTaskDistanza */
  /* Infinite loop */
	osSemaphoreWait(myBinarySem02Handle, osWaitForever);
 80016c4:	4b4a      	ldr	r3, [pc, #296]	; (80017f0 <StartTaskDistanza+0x134>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f04f 31ff 	mov.w	r1, #4294967295
 80016cc:	4618      	mov	r0, r3
 80016ce:	f00b f973 	bl	800c9b8 <osSemaphoreWait>
		  for(;;)
		  {
			  osDelay(delay);
 80016d2:	4b48      	ldr	r3, [pc, #288]	; (80017f4 <StartTaskDistanza+0x138>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f00b f901 	bl	800c8de <osDelay>

			  osSemaphoreWait(myMutex01Handle, osWaitForever);
 80016dc:	4b46      	ldr	r3, [pc, #280]	; (80017f8 <StartTaskDistanza+0x13c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f04f 31ff 	mov.w	r1, #4294967295
 80016e4:	4618      	mov	r0, r3
 80016e6:	f00b f967 	bl	800c9b8 <osSemaphoreWait>
			  HAL_UART_Transmit(&huart1,( uint8_t * )arrivato,sizeof(arrivato),HAL_MAX_DELAY);
 80016ea:	f04f 33ff 	mov.w	r3, #4294967295
 80016ee:	2214      	movs	r2, #20
 80016f0:	4942      	ldr	r1, [pc, #264]	; (80017fc <StartTaskDistanza+0x140>)
 80016f2:	4843      	ldr	r0, [pc, #268]	; (8001800 <StartTaskDistanza+0x144>)
 80016f4:	f004 f9de 	bl	8005ab4 <HAL_UART_Transmit>
			  uint32_t start = HAL_GetTick();
 80016f8:	f000 fe7a 	bl	80023f0 <HAL_GetTick>
 80016fc:	6378      	str	r0, [r7, #52]	; 0x34

			  uint16_t temperaturaElevata=0;
 80016fe:	2300      	movs	r3, #0
 8001700:	867b      	strh	r3, [r7, #50]	; 0x32
			  tempRicevuta=osMessageGet(myQueue02Handle,200);
 8001702:	4b40      	ldr	r3, [pc, #256]	; (8001804 <StartTaskDistanza+0x148>)
 8001704:	6819      	ldr	r1, [r3, #0]
 8001706:	4c40      	ldr	r4, [pc, #256]	; (8001808 <StartTaskDistanza+0x14c>)
 8001708:	463b      	mov	r3, r7
 800170a:	22c8      	movs	r2, #200	; 0xc8
 800170c:	4618      	mov	r0, r3
 800170e:	f00b fa41 	bl	800cb94 <osMessageGet>
 8001712:	463b      	mov	r3, r7
 8001714:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001718:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			  temperaturaElevata = (((Temp*)tempRicevuta.value.p)->tempValue);
 800171c:	4b3a      	ldr	r3, [pc, #232]	; (8001808 <StartTaskDistanza+0x14c>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	867b      	strh	r3, [r7, #50]	; 0x32

			  uint16_t pulsanteAttivato=0;
 8001724:	2300      	movs	r3, #0
 8001726:	863b      	strh	r3, [r7, #48]	; 0x30
			  statoPulsanteRicevuto=osMessageGet(myQueue03Handle,200);
 8001728:	4b38      	ldr	r3, [pc, #224]	; (800180c <StartTaskDistanza+0x150>)
 800172a:	6819      	ldr	r1, [r3, #0]
 800172c:	4c38      	ldr	r4, [pc, #224]	; (8001810 <StartTaskDistanza+0x154>)
 800172e:	463b      	mov	r3, r7
 8001730:	22c8      	movs	r2, #200	; 0xc8
 8001732:	4618      	mov	r0, r3
 8001734:	f00b fa2e 	bl	800cb94 <osMessageGet>
 8001738:	463b      	mov	r3, r7
 800173a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800173e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			  pulsanteAttivato = (((Temp*)statoPulsanteRicevuto.value.p)->tempValue);
 8001742:	4b33      	ldr	r3, [pc, #204]	; (8001810 <StartTaskDistanza+0x154>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	881b      	ldrh	r3, [r3, #0]
 8001748:	863b      	strh	r3, [r7, #48]	; 0x30


			  if(temperaturaElevata == 1 || pulsanteAttivato == 1 ){
 800174a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800174c:	2b01      	cmp	r3, #1
 800174e:	d002      	beq.n	8001756 <StartTaskDistanza+0x9a>
 8001750:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001752:	2b01      	cmp	r3, #1
 8001754:	d12d      	bne.n	80017b2 <StartTaskDistanza+0xf6>
				  uint16_t PROXIMITY_Value = VL53L0X_PROXIMITY_GetDistance();
 8001756:	f00a ff45 	bl	800c5e4 <VL53L0X_PROXIMITY_GetDistance>
 800175a:	4603      	mov	r3, r0
 800175c:	85fb      	strh	r3, [r7, #46]	; 0x2e
				  if(PROXIMITY_Value != 0){
 800175e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001760:	2b00      	cmp	r3, #0
 8001762:	d014      	beq.n	800178e <StartTaskDistanza+0xd2>
					  int gesture_code = tof_gestures_detectSWIPE_1(PROXIMITY_Value, &gestureSwipeData);
 8001764:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001766:	492b      	ldr	r1, [pc, #172]	; (8001814 <StartTaskDistanza+0x158>)
 8001768:	4618      	mov	r0, r3
 800176a:	f005 fbbb 	bl	8006ee4 <tof_gestures_detectSWIPE_1>
 800176e:	62b8      	str	r0, [r7, #40]	; 0x28
					  Data DataToSend1 = {PROXIMITY_Value,gesture_code};
 8001770:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001772:	83bb      	strh	r3, [r7, #28]
 8001774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001776:	623b      	str	r3, [r7, #32]
					  osMessagePut(myQueue01Handle,(uint32_t)&DataToSend1,200);
 8001778:	4b27      	ldr	r3, [pc, #156]	; (8001818 <StartTaskDistanza+0x15c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f107 011c 	add.w	r1, r7, #28
 8001780:	22c8      	movs	r2, #200	; 0xc8
 8001782:	4618      	mov	r0, r3
 8001784:	f00b f9c6 	bl	800cb14 <osMessagePut>
					  messaggioTrasmesso = 1;
 8001788:	4b24      	ldr	r3, [pc, #144]	; (800181c <StartTaskDistanza+0x160>)
 800178a:	2201      	movs	r2, #1
 800178c:	601a      	str	r2, [r3, #0]
				  }
				  if(b3>0){
 800178e:	4b24      	ldr	r3, [pc, #144]	; (8001820 <StartTaskDistanza+0x164>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	dd07      	ble.n	80017a6 <StartTaskDistanza+0xea>
					  b3=0;
 8001796:	4b22      	ldr	r3, [pc, #136]	; (8001820 <StartTaskDistanza+0x164>)
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
					  osSemaphoreRelease(myBinarySem03Handle);
 800179c:	4b21      	ldr	r3, [pc, #132]	; (8001824 <StartTaskDistanza+0x168>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f00b f957 	bl	800ca54 <osSemaphoreRelease>
				  }
				  osSemaphoreRelease(myBinarySem02Handle);
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <StartTaskDistanza+0x134>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f00b f952 	bl	800ca54 <osSemaphoreRelease>
			  if(temperaturaElevata == 1 || pulsanteAttivato == 1 ){
 80017b0:	e008      	b.n	80017c4 <StartTaskDistanza+0x108>
			  }
			  else if (temperaturaElevata == 0 || pulsanteAttivato == 0){
 80017b2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d002      	beq.n	80017be <StartTaskDistanza+0x102>
 80017b8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d102      	bne.n	80017c4 <StartTaskDistanza+0x108>
				  b2=1;
 80017be:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <StartTaskDistanza+0x16c>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	601a      	str	r2, [r3, #0]
			  }

			  uint32_t end = HAL_GetTick();
 80017c4:	f000 fe14 	bl	80023f0 <HAL_GetTick>
 80017c8:	6278      	str	r0, [r7, #36]	; 0x24
			  time3 = end - start;
 80017ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	4a16      	ldr	r2, [pc, #88]	; (800182c <StartTaskDistanza+0x170>)
 80017d2:	6013      	str	r3, [r2, #0]

			  osSemaphoreRelease(myMutex01Handle);
 80017d4:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <StartTaskDistanza+0x13c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f00b f93b 	bl	800ca54 <osSemaphoreRelease>
			  osSemaphoreWait(myBinarySem02Handle, osWaitForever);
 80017de:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <StartTaskDistanza+0x134>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f04f 31ff 	mov.w	r1, #4294967295
 80017e6:	4618      	mov	r0, r3
 80017e8:	f00b f8e6 	bl	800c9b8 <osSemaphoreWait>
		  {
 80017ec:	e771      	b.n	80016d2 <StartTaskDistanza+0x16>
 80017ee:	bf00      	nop
 80017f0:	200035c0 	.word	0x200035c0
 80017f4:	200001bc 	.word	0x200001bc
 80017f8:	20003628 	.word	0x20003628
 80017fc:	200001a8 	.word	0x200001a8
 8001800:	20003540 	.word	0x20003540
 8001804:	20003624 	.word	0x20003624
 8001808:	200036a4 	.word	0x200036a4
 800180c:	200035d8 	.word	0x200035d8
 8001810:	200035c4 	.word	0x200035c4
 8001814:	2000362c 	.word	0x2000362c
 8001818:	20003620 	.word	0x20003620
 800181c:	20000da8 	.word	0x20000da8
 8001820:	200001c4 	.word	0x200001c4
 8001824:	2000353c 	.word	0x2000353c
 8001828:	200001c0 	.word	0x200001c0
 800182c:	20000dd0 	.word	0x20000dd0

08001830 <StartTaskLed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLed */
void StartTaskLed(void const * argument)
{
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b08b      	sub	sp, #44	; 0x2c
 8001834:	af00      	add	r7, sp, #0
 8001836:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartTaskLed */
  /* Infinite loop */
	osSemaphoreWait(myBinarySem03Handle, osWaitForever);
 8001838:	4b72      	ldr	r3, [pc, #456]	; (8001a04 <StartTaskLed+0x1d4>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f04f 31ff 	mov.w	r1, #4294967295
 8001840:	4618      	mov	r0, r3
 8001842:	f00b f8b9 	bl	800c9b8 <osSemaphoreWait>
			  for(;;)
			  {
				  osDelay(delay);
 8001846:	4b70      	ldr	r3, [pc, #448]	; (8001a08 <StartTaskLed+0x1d8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f00b f847 	bl	800c8de <osDelay>
				  osSemaphoreWait(myMutex01Handle, osWaitForever);
 8001850:	4b6e      	ldr	r3, [pc, #440]	; (8001a0c <StartTaskLed+0x1dc>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f04f 31ff 	mov.w	r1, #4294967295
 8001858:	4618      	mov	r0, r3
 800185a:	f00b f8ad 	bl	800c9b8 <osSemaphoreWait>
				  uint32_t start = HAL_GetTick();
 800185e:	f000 fdc7 	bl	80023f0 <HAL_GetTick>
 8001862:	6278      	str	r0, [r7, #36]	; 0x24

				  if(b2>0 || messaggioTrasmesso == 0){
 8001864:	4b6a      	ldr	r3, [pc, #424]	; (8001a10 <StartTaskLed+0x1e0>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	dc03      	bgt.n	8001874 <StartTaskLed+0x44>
 800186c:	4b69      	ldr	r3, [pc, #420]	; (8001a14 <StartTaskLed+0x1e4>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d103      	bne.n	800187c <StartTaskLed+0x4c>
					  b3=1;
 8001874:	4b68      	ldr	r3, [pc, #416]	; (8001a18 <StartTaskLed+0x1e8>)
 8001876:	2201      	movs	r2, #1
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	e0ae      	b.n	80019da <StartTaskLed+0x1aa>
				  }
				  else{
					  messaggioTrasmesso = 0;
 800187c:	4b65      	ldr	r3, [pc, #404]	; (8001a14 <StartTaskLed+0x1e4>)
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
					  distanzaRicevuta=osMessageGet(myQueue01Handle,200);
 8001882:	4b66      	ldr	r3, [pc, #408]	; (8001a1c <StartTaskLed+0x1ec>)
 8001884:	6819      	ldr	r1, [r3, #0]
 8001886:	4c66      	ldr	r4, [pc, #408]	; (8001a20 <StartTaskLed+0x1f0>)
 8001888:	463b      	mov	r3, r7
 800188a:	22c8      	movs	r2, #200	; 0xc8
 800188c:	4618      	mov	r0, r3
 800188e:	f00b f981 	bl	800cb94 <osMessageGet>
 8001892:	463b      	mov	r3, r7
 8001894:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001898:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					  uint16_t distance = (((Data*)distanzaRicevuta.value.p)->Distance);
 800189c:	4b60      	ldr	r3, [pc, #384]	; (8001a20 <StartTaskLed+0x1f0>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	847b      	strh	r3, [r7, #34]	; 0x22
					  int gesture = (((Data*)distanzaRicevuta.value.p)->Gesture);
 80018a4:	4b5e      	ldr	r3, [pc, #376]	; (8001a20 <StartTaskLed+0x1f0>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	61fb      	str	r3, [r7, #28]

					  if(distance == 8190){
 80018ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80018ae:	f641 72fe 	movw	r2, #8190	; 0x1ffe
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d107      	bne.n	80018c6 <StartTaskLed+0x96>
						  HAL_UART_Transmit(&huart1,( uint8_t * )msgdist,sizeof(msgdist),HAL_MAX_DELAY);
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ba:	2232      	movs	r2, #50	; 0x32
 80018bc:	4959      	ldr	r1, [pc, #356]	; (8001a24 <StartTaskLed+0x1f4>)
 80018be:	485a      	ldr	r0, [pc, #360]	; (8001a28 <StartTaskLed+0x1f8>)
 80018c0:	f004 f8f8 	bl	8005ab4 <HAL_UART_Transmit>
 80018c4:	e00f      	b.n	80018e6 <StartTaskLed+0xb6>
					  }
					  else{
						  if(snprintf(str_tmp2,30,"Distanza = %d \n\r", distance)>0){
 80018c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80018c8:	4a58      	ldr	r2, [pc, #352]	; (8001a2c <StartTaskLed+0x1fc>)
 80018ca:	211e      	movs	r1, #30
 80018cc:	4858      	ldr	r0, [pc, #352]	; (8001a30 <StartTaskLed+0x200>)
 80018ce:	f00e fb05 	bl	800fedc <sniprintf>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	dd06      	ble.n	80018e6 <StartTaskLed+0xb6>
							  HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp2,sizeof(str_tmp2),HAL_MAX_DELAY);
 80018d8:	f04f 33ff 	mov.w	r3, #4294967295
 80018dc:	221e      	movs	r2, #30
 80018de:	4954      	ldr	r1, [pc, #336]	; (8001a30 <StartTaskLed+0x200>)
 80018e0:	4851      	ldr	r0, [pc, #324]	; (8001a28 <StartTaskLed+0x1f8>)
 80018e2:	f004 f8e7 	bl	8005ab4 <HAL_UART_Transmit>
						  }
					  }

					  if(gesture == 5){
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	2b05      	cmp	r3, #5
 80018ea:	d102      	bne.n	80018f2 <StartTaskLed+0xc2>
						  action = 2;
 80018ec:	4b51      	ldr	r3, [pc, #324]	; (8001a34 <StartTaskLed+0x204>)
 80018ee:	2202      	movs	r2, #2
 80018f0:	601a      	str	r2, [r3, #0]
					  }
					  if(gesture == 0 && action == 0){
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10b      	bne.n	8001910 <StartTaskLed+0xe0>
 80018f8:	4b4e      	ldr	r3, [pc, #312]	; (8001a34 <StartTaskLed+0x204>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d107      	bne.n	8001910 <StartTaskLed+0xe0>
						  HAL_UART_Transmit(&huart1,( uint8_t * )msggest,sizeof(msggest),HAL_MAX_DELAY);
 8001900:	f04f 33ff 	mov.w	r3, #4294967295
 8001904:	2232      	movs	r2, #50	; 0x32
 8001906:	494c      	ldr	r1, [pc, #304]	; (8001a38 <StartTaskLed+0x208>)
 8001908:	4847      	ldr	r0, [pc, #284]	; (8001a28 <StartTaskLed+0x1f8>)
 800190a:	f004 f8d3 	bl	8005ab4 <HAL_UART_Transmit>
 800190e:	e01e      	b.n	800194e <StartTaskLed+0x11e>
					  }
					  else if(gesture == 0 && action == 2){
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d10b      	bne.n	800192e <StartTaskLed+0xfe>
 8001916:	4b47      	ldr	r3, [pc, #284]	; (8001a34 <StartTaskLed+0x204>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2b02      	cmp	r3, #2
 800191c:	d107      	bne.n	800192e <StartTaskLed+0xfe>
						  HAL_UART_Transmit(&huart1,( uint8_t * )msggest2,sizeof(msggest2),HAL_MAX_DELAY);
 800191e:	f04f 33ff 	mov.w	r3, #4294967295
 8001922:	2232      	movs	r2, #50	; 0x32
 8001924:	4945      	ldr	r1, [pc, #276]	; (8001a3c <StartTaskLed+0x20c>)
 8001926:	4840      	ldr	r0, [pc, #256]	; (8001a28 <StartTaskLed+0x1f8>)
 8001928:	f004 f8c4 	bl	8005ab4 <HAL_UART_Transmit>
 800192c:	e00f      	b.n	800194e <StartTaskLed+0x11e>

					  }
					  else{
						  if(snprintf(str_tmp5,30,"Gesto = %d\n\r",gesture)>0){
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	4a43      	ldr	r2, [pc, #268]	; (8001a40 <StartTaskLed+0x210>)
 8001932:	211e      	movs	r1, #30
 8001934:	4843      	ldr	r0, [pc, #268]	; (8001a44 <StartTaskLed+0x214>)
 8001936:	f00e fad1 	bl	800fedc <sniprintf>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	dd06      	ble.n	800194e <StartTaskLed+0x11e>
							  HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp5,sizeof(str_tmp5),HAL_MAX_DELAY);
 8001940:	f04f 33ff 	mov.w	r3, #4294967295
 8001944:	221e      	movs	r2, #30
 8001946:	493f      	ldr	r1, [pc, #252]	; (8001a44 <StartTaskLed+0x214>)
 8001948:	4837      	ldr	r0, [pc, #220]	; (8001a28 <StartTaskLed+0x1f8>)
 800194a:	f004 f8b3 	bl	8005ab4 <HAL_UART_Transmit>
						  }
					  }

	  				  if((gesture==0 && action == 2)||((gesture == 5 || gesture == 6 ) && distance < distMax && distance > distMin)){
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d103      	bne.n	800195c <StartTaskLed+0x12c>
 8001954:	4b37      	ldr	r3, [pc, #220]	; (8001a34 <StartTaskLed+0x204>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d00b      	beq.n	8001974 <StartTaskLed+0x144>
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	2b05      	cmp	r3, #5
 8001960:	d002      	beq.n	8001968 <StartTaskLed+0x138>
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	2b06      	cmp	r3, #6
 8001966:	d10b      	bne.n	8001980 <StartTaskLed+0x150>
 8001968:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800196a:	2b63      	cmp	r3, #99	; 0x63
 800196c:	d808      	bhi.n	8001980 <StartTaskLed+0x150>
 800196e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001970:	2b32      	cmp	r3, #50	; 0x32
 8001972:	d905      	bls.n	8001980 <StartTaskLed+0x150>
	  					HAL_GPIO_TogglePin(LED3_WIFI__LED4_BLE_GPIO_Port,LED3_WIFI__LED4_BLE_Pin);
 8001974:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001978:	4833      	ldr	r0, [pc, #204]	; (8001a48 <StartTaskLed+0x218>)
 800197a:	f001 fa51 	bl	8002e20 <HAL_GPIO_TogglePin>
 800197e:	e021      	b.n	80019c4 <StartTaskLed+0x194>
	  				  }
	  				  else if (distance < distMax && distance > distMin){
 8001980:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001982:	2b63      	cmp	r3, #99	; 0x63
 8001984:	d808      	bhi.n	8001998 <StartTaskLed+0x168>
 8001986:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001988:	2b32      	cmp	r3, #50	; 0x32
 800198a:	d905      	bls.n	8001998 <StartTaskLed+0x168>
	  					HAL_GPIO_TogglePin(LED3_WIFI__LED4_BLE_GPIO_Port,LED3_WIFI__LED4_BLE_Pin);
 800198c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001990:	482d      	ldr	r0, [pc, #180]	; (8001a48 <StartTaskLed+0x218>)
 8001992:	f001 fa45 	bl	8002e20 <HAL_GPIO_TogglePin>
 8001996:	e015      	b.n	80019c4 <StartTaskLed+0x194>
	  				  }
	  				  else if (distance <= distMin){
 8001998:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800199a:	2b32      	cmp	r3, #50	; 0x32
 800199c:	d80c      	bhi.n	80019b8 <StartTaskLed+0x188>
	  					HAL_GPIO_TogglePin(LED3_WIFI__LED4_BLE_GPIO_Port,LED3_WIFI__LED4_BLE_Pin);
 800199e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019a2:	4829      	ldr	r0, [pc, #164]	; (8001a48 <StartTaskLed+0x218>)
 80019a4:	f001 fa3c 	bl	8002e20 <HAL_GPIO_TogglePin>
	  					HAL_UART_Transmit(&huart1,( uint8_t * )porta,sizeof(porta),HAL_MAX_DELAY);
 80019a8:	f04f 33ff 	mov.w	r3, #4294967295
 80019ac:	2232      	movs	r2, #50	; 0x32
 80019ae:	4927      	ldr	r1, [pc, #156]	; (8001a4c <StartTaskLed+0x21c>)
 80019b0:	481d      	ldr	r0, [pc, #116]	; (8001a28 <StartTaskLed+0x1f8>)
 80019b2:	f004 f87f 	bl	8005ab4 <HAL_UART_Transmit>
 80019b6:	e005      	b.n	80019c4 <StartTaskLed+0x194>
	  				  }
	  				  else{
	  					HAL_GPIO_WritePin(LED3_WIFI__LED4_BLE_GPIO_Port, LED3_WIFI__LED4_BLE_Pin,  GPIO_PIN_RESET);
 80019b8:	2200      	movs	r2, #0
 80019ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019be:	4822      	ldr	r0, [pc, #136]	; (8001a48 <StartTaskLed+0x218>)
 80019c0:	f001 fa16 	bl	8002df0 <HAL_GPIO_WritePin>
	  				  }
	  				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80019c4:	2200      	movs	r2, #0
 80019c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019ca:	4821      	ldr	r0, [pc, #132]	; (8001a50 <StartTaskLed+0x220>)
 80019cc:	f001 fa10 	bl	8002df0 <HAL_GPIO_WritePin>
	  				osSemaphoreRelease(myBinarySem03Handle);
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <StartTaskLed+0x1d4>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f00b f83d 	bl	800ca54 <osSemaphoreRelease>

				  }

				  uint32_t end = HAL_GetTick();
 80019da:	f000 fd09 	bl	80023f0 <HAL_GetTick>
 80019de:	61b8      	str	r0, [r7, #24]
				  time4 = end - start;
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	4a1b      	ldr	r2, [pc, #108]	; (8001a54 <StartTaskLed+0x224>)
 80019e8:	6013      	str	r3, [r2, #0]

				  osSemaphoreRelease(myMutex01Handle);
 80019ea:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <StartTaskLed+0x1dc>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f00b f830 	bl	800ca54 <osSemaphoreRelease>
				  osSemaphoreWait(myBinarySem03Handle, osWaitForever);
 80019f4:	4b03      	ldr	r3, [pc, #12]	; (8001a04 <StartTaskLed+0x1d4>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f04f 31ff 	mov.w	r1, #4294967295
 80019fc:	4618      	mov	r0, r3
 80019fe:	f00a ffdb 	bl	800c9b8 <osSemaphoreWait>
			  {
 8001a02:	e720      	b.n	8001846 <StartTaskLed+0x16>
 8001a04:	2000353c 	.word	0x2000353c
 8001a08:	200001bc 	.word	0x200001bc
 8001a0c:	20003628 	.word	0x20003628
 8001a10:	200001c0 	.word	0x200001c0
 8001a14:	20000da8 	.word	0x20000da8
 8001a18:	200001c4 	.word	0x200001c4
 8001a1c:	20003620 	.word	0x20003620
 8001a20:	20003698 	.word	0x20003698
 8001a24:	2000010c 	.word	0x2000010c
 8001a28:	20003540 	.word	0x20003540
 8001a2c:	08010e9c 	.word	0x08010e9c
 8001a30:	200035dc 	.word	0x200035dc
 8001a34:	20000dc4 	.word	0x20000dc4
 8001a38:	20000140 	.word	0x20000140
 8001a3c:	20000174 	.word	0x20000174
 8001a40:	08010eb0 	.word	0x08010eb0
 8001a44:	20003600 	.word	0x20003600
 8001a48:	48000800 	.word	0x48000800
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	48000400 	.word	0x48000400
 8001a54:	20000dd4 	.word	0x20000dd4

08001a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6e:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <HAL_MspInit+0x4c>)
 8001a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a72:	4a10      	ldr	r2, [pc, #64]	; (8001ab4 <HAL_MspInit+0x4c>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6613      	str	r3, [r2, #96]	; 0x60
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <HAL_MspInit+0x4c>)
 8001a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	607b      	str	r3, [r7, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a86:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <HAL_MspInit+0x4c>)
 8001a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8a:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <HAL_MspInit+0x4c>)
 8001a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a90:	6593      	str	r3, [r2, #88]	; 0x58
 8001a92:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <HAL_MspInit+0x4c>)
 8001a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	603b      	str	r3, [r7, #0]
 8001a9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	210f      	movs	r1, #15
 8001aa2:	f06f 0001 	mvn.w	r0, #1
 8001aa6:	f000 fdac 	bl	8002602 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40021000 	.word	0x40021000

08001ab8 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	; 0x28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8001ad0:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d128      	bne.n	8001b2a <HAL_DFSDM_ChannelMspInit+0x72>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001ad8:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001adc:	4a16      	ldr	r2, [pc, #88]	; (8001b38 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001ade:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ae2:	6613      	str	r3, [r2, #96]	; 0x60
 8001ae4:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ae8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001af0:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af4:	4a10      	ldr	r2, [pc, #64]	; (8001b38 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001af6:	f043 0310 	orr.w	r3, r3, #16
 8001afa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001afc:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <HAL_DFSDM_ChannelMspInit+0x80>)
 8001afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b00:	f003 0310 	and.w	r3, r3, #16
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration    
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT 
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001b08:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001b1a:	2306      	movs	r3, #6
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4619      	mov	r1, r3
 8001b24:	4805      	ldr	r0, [pc, #20]	; (8001b3c <HAL_DFSDM_ChannelMspInit+0x84>)
 8001b26:	f000 feaf 	bl	8002888 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8001b2a:	bf00      	nop
 8001b2c:	3728      	adds	r7, #40	; 0x28
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000dd8 	.word	0x20000dd8
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	48001000 	.word	0x48001000

08001b40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08a      	sub	sp, #40	; 0x28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a17      	ldr	r2, [pc, #92]	; (8001bbc <HAL_I2C_MspInit+0x7c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d128      	bne.n	8001bb4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b62:	4b17      	ldr	r3, [pc, #92]	; (8001bc0 <HAL_I2C_MspInit+0x80>)
 8001b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b66:	4a16      	ldr	r2, [pc, #88]	; (8001bc0 <HAL_I2C_MspInit+0x80>)
 8001b68:	f043 0302 	orr.w	r3, r3, #2
 8001b6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b6e:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <HAL_I2C_MspInit+0x80>)
 8001b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001b7a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b80:	2312      	movs	r3, #18
 8001b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b84:	2301      	movs	r3, #1
 8001b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b8c:	2304      	movs	r3, #4
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	4619      	mov	r1, r3
 8001b96:	480b      	ldr	r0, [pc, #44]	; (8001bc4 <HAL_I2C_MspInit+0x84>)
 8001b98:	f000 fe76 	bl	8002888 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b9c:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <HAL_I2C_MspInit+0x80>)
 8001b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba0:	4a07      	ldr	r2, [pc, #28]	; (8001bc0 <HAL_I2C_MspInit+0x80>)
 8001ba2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ba6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ba8:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <HAL_I2C_MspInit+0x80>)
 8001baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001bb4:	bf00      	nop
 8001bb6:	3728      	adds	r7, #40	; 0x28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40005800 	.word	0x40005800
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	48000400 	.word	0x48000400

08001bc8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a08      	ldr	r2, [pc, #32]	; (8001bf8 <HAL_I2C_MspDeInit+0x30>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d10a      	bne.n	8001bf0 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001bda:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <HAL_I2C_MspDeInit+0x34>)
 8001bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bde:	4a07      	ldr	r2, [pc, #28]	; (8001bfc <HAL_I2C_MspDeInit+0x34>)
 8001be0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001be4:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin);
 8001be6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001bea:	4805      	ldr	r0, [pc, #20]	; (8001c00 <HAL_I2C_MspDeInit+0x38>)
 8001bec:	f000 fff4 	bl	8002bd8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001bf0:	bf00      	nop
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40005800 	.word	0x40005800
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	48000400 	.word	0x48000400

08001c04 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08a      	sub	sp, #40	; 0x28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	f107 0314 	add.w	r3, r7, #20
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a17      	ldr	r2, [pc, #92]	; (8001c80 <HAL_QSPI_MspInit+0x7c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d128      	bne.n	8001c78 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001c26:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <HAL_QSPI_MspInit+0x80>)
 8001c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c2a:	4a16      	ldr	r2, [pc, #88]	; (8001c84 <HAL_QSPI_MspInit+0x80>)
 8001c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c30:	6513      	str	r3, [r2, #80]	; 0x50
 8001c32:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <HAL_QSPI_MspInit+0x80>)
 8001c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <HAL_QSPI_MspInit+0x80>)
 8001c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c42:	4a10      	ldr	r2, [pc, #64]	; (8001c84 <HAL_QSPI_MspInit+0x80>)
 8001c44:	f043 0310 	orr.w	r3, r3, #16
 8001c48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <HAL_QSPI_MspInit+0x80>)
 8001c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4e:	f003 0310 	and.w	r3, r3, #16
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3 
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin 
 8001c56:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001c5a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c64:	2303      	movs	r3, #3
 8001c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001c68:	230a      	movs	r3, #10
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	4619      	mov	r1, r3
 8001c72:	4805      	ldr	r0, [pc, #20]	; (8001c88 <HAL_QSPI_MspInit+0x84>)
 8001c74:	f000 fe08 	bl	8002888 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001c78:	bf00      	nop
 8001c7a:	3728      	adds	r7, #40	; 0x28
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	a0001000 	.word	0xa0001000
 8001c84:	40021000 	.word	0x40021000
 8001c88:	48001000 	.word	0x48001000

08001c8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08a      	sub	sp, #40	; 0x28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a17      	ldr	r2, [pc, #92]	; (8001d08 <HAL_SPI_MspInit+0x7c>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d128      	bne.n	8001d00 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001cae:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <HAL_SPI_MspInit+0x80>)
 8001cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb2:	4a16      	ldr	r2, [pc, #88]	; (8001d0c <HAL_SPI_MspInit+0x80>)
 8001cb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cb8:	6593      	str	r3, [r2, #88]	; 0x58
 8001cba:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <HAL_SPI_MspInit+0x80>)
 8001cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc6:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <HAL_SPI_MspInit+0x80>)
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cca:	4a10      	ldr	r2, [pc, #64]	; (8001d0c <HAL_SPI_MspInit+0x80>)
 8001ccc:	f043 0304 	orr.w	r3, r3, #4
 8001cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <HAL_SPI_MspInit+0x80>)
 8001cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001cde:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cec:	2303      	movs	r3, #3
 8001cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cf0:	2306      	movs	r3, #6
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4805      	ldr	r0, [pc, #20]	; (8001d10 <HAL_SPI_MspInit+0x84>)
 8001cfc:	f000 fdc4 	bl	8002888 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001d00:	bf00      	nop
 8001d02:	3728      	adds	r7, #40	; 0x28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40003c00 	.word	0x40003c00
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	48000800 	.word	0x48000800

08001d14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08c      	sub	sp, #48	; 0x30
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1c:	f107 031c 	add.w	r3, r7, #28
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a2e      	ldr	r2, [pc, #184]	; (8001dec <HAL_UART_MspInit+0xd8>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d128      	bne.n	8001d88 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d36:	4b2e      	ldr	r3, [pc, #184]	; (8001df0 <HAL_UART_MspInit+0xdc>)
 8001d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d3a:	4a2d      	ldr	r2, [pc, #180]	; (8001df0 <HAL_UART_MspInit+0xdc>)
 8001d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d40:	6613      	str	r3, [r2, #96]	; 0x60
 8001d42:	4b2b      	ldr	r3, [pc, #172]	; (8001df0 <HAL_UART_MspInit+0xdc>)
 8001d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d4a:	61bb      	str	r3, [r7, #24]
 8001d4c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4e:	4b28      	ldr	r3, [pc, #160]	; (8001df0 <HAL_UART_MspInit+0xdc>)
 8001d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d52:	4a27      	ldr	r2, [pc, #156]	; (8001df0 <HAL_UART_MspInit+0xdc>)
 8001d54:	f043 0302 	orr.w	r3, r3, #2
 8001d58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d5a:	4b25      	ldr	r3, [pc, #148]	; (8001df0 <HAL_UART_MspInit+0xdc>)
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001d66:	23c0      	movs	r3, #192	; 0xc0
 8001d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d72:	2303      	movs	r3, #3
 8001d74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d76:	2307      	movs	r3, #7
 8001d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7a:	f107 031c 	add.w	r3, r7, #28
 8001d7e:	4619      	mov	r1, r3
 8001d80:	481c      	ldr	r0, [pc, #112]	; (8001df4 <HAL_UART_MspInit+0xe0>)
 8001d82:	f000 fd81 	bl	8002888 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d86:	e02d      	b.n	8001de4 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a1a      	ldr	r2, [pc, #104]	; (8001df8 <HAL_UART_MspInit+0xe4>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d128      	bne.n	8001de4 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d92:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <HAL_UART_MspInit+0xdc>)
 8001d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d96:	4a16      	ldr	r2, [pc, #88]	; (8001df0 <HAL_UART_MspInit+0xdc>)
 8001d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d9c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d9e:	4b14      	ldr	r3, [pc, #80]	; (8001df0 <HAL_UART_MspInit+0xdc>)
 8001da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001daa:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <HAL_UART_MspInit+0xdc>)
 8001dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dae:	4a10      	ldr	r2, [pc, #64]	; (8001df0 <HAL_UART_MspInit+0xdc>)
 8001db0:	f043 0308 	orr.w	r3, r3, #8
 8001db4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001db6:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <HAL_UART_MspInit+0xdc>)
 8001db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001dc2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001dd4:	2307      	movs	r3, #7
 8001dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dd8:	f107 031c 	add.w	r3, r7, #28
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4807      	ldr	r0, [pc, #28]	; (8001dfc <HAL_UART_MspInit+0xe8>)
 8001de0:	f000 fd52 	bl	8002888 <HAL_GPIO_Init>
}
 8001de4:	bf00      	nop
 8001de6:	3730      	adds	r7, #48	; 0x30
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40013800 	.word	0x40013800
 8001df0:	40021000 	.word	0x40021000
 8001df4:	48000400 	.word	0x48000400
 8001df8:	40004800 	.word	0x40004800
 8001dfc:	48000c00 	.word	0x48000c00

08001e00 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08a      	sub	sp, #40	; 0x28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 0314 	add.w	r3, r7, #20
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e20:	d154      	bne.n	8001ecc <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e22:	4b2c      	ldr	r3, [pc, #176]	; (8001ed4 <HAL_PCD_MspInit+0xd4>)
 8001e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e26:	4a2b      	ldr	r2, [pc, #172]	; (8001ed4 <HAL_PCD_MspInit+0xd4>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e2e:	4b29      	ldr	r3, [pc, #164]	; (8001ed4 <HAL_PCD_MspInit+0xd4>)
 8001e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001e3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e52:	f000 fd19 	bl	8002888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001e56:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e64:	2303      	movs	r3, #3
 8001e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e68:	230a      	movs	r3, #10
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	4619      	mov	r1, r3
 8001e72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e76:	f000 fd07 	bl	8002888 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e7a:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <HAL_PCD_MspInit+0xd4>)
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7e:	4a15      	ldr	r2, [pc, #84]	; (8001ed4 <HAL_PCD_MspInit+0xd4>)
 8001e80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e86:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <HAL_PCD_MspInit+0xd4>)
 8001e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e92:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <HAL_PCD_MspInit+0xd4>)
 8001e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d114      	bne.n	8001ec8 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <HAL_PCD_MspInit+0xd4>)
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea2:	4a0c      	ldr	r2, [pc, #48]	; (8001ed4 <HAL_PCD_MspInit+0xd4>)
 8001ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	6593      	str	r3, [r2, #88]	; 0x58
 8001eaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <HAL_PCD_MspInit+0xd4>)
 8001eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001eb6:	f002 f9a3 	bl	8004200 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_PCD_MspInit+0xd4>)
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebe:	4a05      	ldr	r2, [pc, #20]	; (8001ed4 <HAL_PCD_MspInit+0xd4>)
 8001ec0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001ec6:	e001      	b.n	8001ecc <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8001ec8:	f002 f99a 	bl	8004200 <HAL_PWREx_EnableVddUSB>
}
 8001ecc:	bf00      	nop
 8001ece:	3728      	adds	r7, #40	; 0x28
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40021000 	.word	0x40021000

08001ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eea:	e7fe      	b.n	8001eea <HardFault_Handler+0x4>

08001eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <MemManage_Handler+0x4>

08001ef2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ef6:	e7fe      	b.n	8001ef6 <BusFault_Handler+0x4>

08001ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001efc:	e7fe      	b.n	8001efc <UsageFault_Handler+0x4>

08001efe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f10:	f000 fa5c 	bl	80023cc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001f14:	f00c fd88 	bl	800ea28 <xTaskGetSchedulerState>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d001      	beq.n	8001f22 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001f1e:	f00d fc9b 	bl	800f858 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001f2a:	2020      	movs	r0, #32
 8001f2c:	f000 ff92 	bl	8002e54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001f30:	2040      	movs	r0, #64	; 0x40
 8001f32:	f000 ff8f 	bl	8002e54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001f36:	2080      	movs	r0, #128	; 0x80
 8001f38:	f000 ff8c 	bl	8002e54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001f3c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f40:	f000 ff88 	bl	8002e54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001f4c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001f50:	f000 ff80 	bl	8002e54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001f54:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001f58:	f000 ff7c 	bl	8002e54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001f5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f60:	f000 ff78 	bl	8002e54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001f64:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f68:	f000 ff74 	bl	8002e54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001f6c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001f70:	f000 ff70 	bl	8002e54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	e00a      	b.n	8001fa0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f8a:	f3af 8000 	nop.w
 8001f8e:	4601      	mov	r1, r0
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	1c5a      	adds	r2, r3, #1
 8001f94:	60ba      	str	r2, [r7, #8]
 8001f96:	b2ca      	uxtb	r2, r1
 8001f98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	dbf0      	blt.n	8001f8a <_read+0x12>
	}

return len;
 8001fa8:	687b      	ldr	r3, [r7, #4]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b086      	sub	sp, #24
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	60f8      	str	r0, [r7, #12]
 8001fba:	60b9      	str	r1, [r7, #8]
 8001fbc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	e009      	b.n	8001fd8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	60ba      	str	r2, [r7, #8]
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	dbf1      	blt.n	8001fc4 <_write+0x12>
	}
	return len;
 8001fe0:	687b      	ldr	r3, [r7, #4]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <_close>:

int _close(int file)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
	return -1;
 8001ff2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
 800200a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002012:	605a      	str	r2, [r3, #4]
	return 0;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <_isatty>:

int _isatty(int file)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
	return 1;
 800202a:	2301      	movs	r3, #1
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
	return 0;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800205c:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <_sbrk+0x50>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d102      	bne.n	800206a <_sbrk+0x16>
		heap_end = &end;
 8002064:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <_sbrk+0x50>)
 8002066:	4a10      	ldr	r2, [pc, #64]	; (80020a8 <_sbrk+0x54>)
 8002068:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800206a:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <_sbrk+0x50>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002070:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <_sbrk+0x50>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4413      	add	r3, r2
 8002078:	466a      	mov	r2, sp
 800207a:	4293      	cmp	r3, r2
 800207c:	d907      	bls.n	800208e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800207e:	f00d fe8b 	bl	800fd98 <__errno>
 8002082:	4602      	mov	r2, r0
 8002084:	230c      	movs	r3, #12
 8002086:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002088:	f04f 33ff 	mov.w	r3, #4294967295
 800208c:	e006      	b.n	800209c <_sbrk+0x48>
	}

	heap_end += incr;
 800208e:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <_sbrk+0x50>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	4a03      	ldr	r2, [pc, #12]	; (80020a4 <_sbrk+0x50>)
 8002098:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800209a:	68fb      	ldr	r3, [r7, #12]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20000ddc 	.word	0x20000ddc
 80020a8:	20003848 	.word	0x20003848

080020ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020b0:	4b17      	ldr	r3, [pc, #92]	; (8002110 <SystemInit+0x64>)
 80020b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b6:	4a16      	ldr	r2, [pc, #88]	; (8002110 <SystemInit+0x64>)
 80020b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80020c0:	4b14      	ldr	r3, [pc, #80]	; (8002114 <SystemInit+0x68>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a13      	ldr	r2, [pc, #76]	; (8002114 <SystemInit+0x68>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80020cc:	4b11      	ldr	r3, [pc, #68]	; (8002114 <SystemInit+0x68>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80020d2:	4b10      	ldr	r3, [pc, #64]	; (8002114 <SystemInit+0x68>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a0f      	ldr	r2, [pc, #60]	; (8002114 <SystemInit+0x68>)
 80020d8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80020dc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80020e0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80020e2:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <SystemInit+0x68>)
 80020e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020e8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80020ea:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <SystemInit+0x68>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a09      	ldr	r2, [pc, #36]	; (8002114 <SystemInit+0x68>)
 80020f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020f4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80020f6:	4b07      	ldr	r3, [pc, #28]	; (8002114 <SystemInit+0x68>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020fc:	4b04      	ldr	r3, [pc, #16]	; (8002110 <SystemInit+0x64>)
 80020fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002102:	609a      	str	r2, [r3, #8]
#endif
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	e000ed00 	.word	0xe000ed00
 8002114:	40021000 	.word	0x40021000

08002118 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002118:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002150 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800211c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800211e:	e003      	b.n	8002128 <LoopCopyDataInit>

08002120 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002122:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002124:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002126:	3104      	adds	r1, #4

08002128 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002128:	480b      	ldr	r0, [pc, #44]	; (8002158 <LoopForever+0xa>)
	ldr	r3, =_edata
 800212a:	4b0c      	ldr	r3, [pc, #48]	; (800215c <LoopForever+0xe>)
	adds	r2, r0, r1
 800212c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800212e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002130:	d3f6      	bcc.n	8002120 <CopyDataInit>
	ldr	r2, =_sbss
 8002132:	4a0b      	ldr	r2, [pc, #44]	; (8002160 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002134:	e002      	b.n	800213c <LoopFillZerobss>

08002136 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002136:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002138:	f842 3b04 	str.w	r3, [r2], #4

0800213c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800213c:	4b09      	ldr	r3, [pc, #36]	; (8002164 <LoopForever+0x16>)
	cmp	r2, r3
 800213e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002140:	d3f9      	bcc.n	8002136 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002142:	f7ff ffb3 	bl	80020ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002146:	f00d fe2d 	bl	800fda4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800214a:	f7fe fc4d 	bl	80009e8 <main>

0800214e <LoopForever>:

LoopForever:
    b LoopForever
 800214e:	e7fe      	b.n	800214e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002150:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002154:	08011620 	.word	0x08011620
	ldr	r0, =_sdata
 8002158:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800215c:	200006b8 	.word	0x200006b8
	ldr	r2, =_sbss
 8002160:	200006b8 	.word	0x200006b8
	ldr	r3, = _ebss
 8002164:	20003848 	.word	0x20003848

08002168 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002168:	e7fe      	b.n	8002168 <ADC1_2_IRQHandler>
	...

0800216c <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8002176:	4b09      	ldr	r3, [pc, #36]	; (800219c <BSP_TSENSOR_Init+0x30>)
 8002178:	4a09      	ldr	r2, [pc, #36]	; (80021a0 <BSP_TSENSOR_Init+0x34>)
 800217a:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 800217c:	f004 fe30 	bl	8006de0 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8002180:	4b06      	ldr	r3, [pc, #24]	; (800219c <BSP_TSENSOR_Init+0x30>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2100      	movs	r1, #0
 8002188:	20be      	movs	r0, #190	; 0xbe
 800218a:	4798      	blx	r3

  ret = TSENSOR_OK;
 800218c:	2300      	movs	r3, #0
 800218e:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8002190:	79fb      	ldrb	r3, [r7, #7]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000de0 	.word	0x20000de0
 80021a0:	200001cc 	.word	0x200001cc

080021a4 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80021a8:	4b04      	ldr	r3, [pc, #16]	; (80021bc <BSP_TSENSOR_ReadTemp+0x18>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	20be      	movs	r0, #190	; 0xbe
 80021b0:	4798      	blx	r3
 80021b2:	eef0 7a40 	vmov.f32	s15, s0
}
 80021b6:	eeb0 0a67 	vmov.f32	s0, s15
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20000de0 	.word	0x20000de0

080021c0 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	6039      	str	r1, [r7, #0]
 80021ca:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80021cc:	88fb      	ldrh	r3, [r7, #6]
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2120      	movs	r1, #32
 80021d2:	4618      	mov	r0, r3
 80021d4:	f004 fe28 	bl	8006e28 <SENSOR_IO_Read>
 80021d8:	4603      	mov	r3, r0
 80021da:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
 80021de:	f023 0304 	bic.w	r3, r3, #4
 80021e2:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
 80021e6:	f043 0304 	orr.w	r3, r3, #4
 80021ea:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
 80021ee:	f023 0303 	bic.w	r3, r3, #3
 80021f2:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
 80021fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002202:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002204:	88fb      	ldrh	r3, [r7, #6]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	7bfa      	ldrb	r2, [r7, #15]
 800220a:	2120      	movs	r1, #32
 800220c:	4618      	mov	r0, r3
 800220e:	f004 fdf1 	bl	8006df4 <SENSOR_IO_Write>
}
 8002212:	bf00      	nop
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b088      	sub	sp, #32
 800221e:	af00      	add	r7, sp, #0
 8002220:	4603      	mov	r3, r0
 8002222:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002224:	88fb      	ldrh	r3, [r7, #6]
 8002226:	b2d8      	uxtb	r0, r3
 8002228:	f107 0208 	add.w	r2, r7, #8
 800222c:	2302      	movs	r3, #2
 800222e:	21b2      	movs	r1, #178	; 0xb2
 8002230:	f004 fe18 	bl	8006e64 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002234:	88fb      	ldrh	r3, [r7, #6]
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2135      	movs	r1, #53	; 0x35
 800223a:	4618      	mov	r0, r3
 800223c:	f004 fdf4 	bl	8006e28 <SENSOR_IO_Read>
 8002240:	4603      	mov	r3, r0
 8002242:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002244:	7ffb      	ldrb	r3, [r7, #31]
 8002246:	021b      	lsls	r3, r3, #8
 8002248:	b21b      	sxth	r3, r3
 800224a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800224e:	b21a      	sxth	r2, r3
 8002250:	7a3b      	ldrb	r3, [r7, #8]
 8002252:	b21b      	sxth	r3, r3
 8002254:	4313      	orrs	r3, r2
 8002256:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8002258:	7ffb      	ldrb	r3, [r7, #31]
 800225a:	019b      	lsls	r3, r3, #6
 800225c:	b21b      	sxth	r3, r3
 800225e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002262:	b21a      	sxth	r2, r3
 8002264:	7a7b      	ldrb	r3, [r7, #9]
 8002266:	b21b      	sxth	r3, r3
 8002268:	4313      	orrs	r3, r2
 800226a:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 800226c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002270:	10db      	asrs	r3, r3, #3
 8002272:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002274:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002278:	10db      	asrs	r3, r3, #3
 800227a:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 800227c:	88fb      	ldrh	r3, [r7, #6]
 800227e:	b2d8      	uxtb	r0, r3
 8002280:	f107 0208 	add.w	r2, r7, #8
 8002284:	2304      	movs	r3, #4
 8002286:	21bc      	movs	r1, #188	; 0xbc
 8002288:	f004 fdec 	bl	8006e64 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800228c:	7a7b      	ldrb	r3, [r7, #9]
 800228e:	021b      	lsls	r3, r3, #8
 8002290:	b21a      	sxth	r2, r3
 8002292:	7a3b      	ldrb	r3, [r7, #8]
 8002294:	b21b      	sxth	r3, r3
 8002296:	4313      	orrs	r3, r2
 8002298:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800229a:	7afb      	ldrb	r3, [r7, #11]
 800229c:	021b      	lsls	r3, r3, #8
 800229e:	b21a      	sxth	r2, r3
 80022a0:	7abb      	ldrb	r3, [r7, #10]
 80022a2:	b21b      	sxth	r3, r3
 80022a4:	4313      	orrs	r3, r2
 80022a6:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80022a8:	88fb      	ldrh	r3, [r7, #6]
 80022aa:	b2d8      	uxtb	r0, r3
 80022ac:	f107 0208 	add.w	r2, r7, #8
 80022b0:	2302      	movs	r3, #2
 80022b2:	21aa      	movs	r1, #170	; 0xaa
 80022b4:	f004 fdd6 	bl	8006e64 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80022b8:	7a7b      	ldrb	r3, [r7, #9]
 80022ba:	021b      	lsls	r3, r3, #8
 80022bc:	b21a      	sxth	r2, r3
 80022be:	7a3b      	ldrb	r3, [r7, #8]
 80022c0:	b21b      	sxth	r3, r3
 80022c2:	4313      	orrs	r3, r2
 80022c4:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80022c6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80022ca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	ee07 3a90 	vmov	s15, r3
 80022d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80022dc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	ee07 3a90 	vmov	s15, r3
 80022e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022ea:	ee67 6a27 	vmul.f32	s13, s14, s15
 80022ee:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80022f2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	ee07 3a90 	vmov	s15, r3
 80022fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002300:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002304:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002308:	ee07 3a90 	vmov	s15, r3
 800230c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002310:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002314:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	ee07 3a90 	vmov	s15, r3
}
 800231e:	eeb0 0a67 	vmov.f32	s0, s15
 8002322:	3720      	adds	r7, #32
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800232e:	2300      	movs	r3, #0
 8002330:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002332:	2003      	movs	r0, #3
 8002334:	f000 f95a 	bl	80025ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002338:	200f      	movs	r0, #15
 800233a:	f000 f80d 	bl	8002358 <HAL_InitTick>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d002      	beq.n	800234a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	71fb      	strb	r3, [r7, #7]
 8002348:	e001      	b.n	800234e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800234a:	f7ff fb8d 	bl	8001a68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800234e:	79fb      	ldrb	r3, [r7, #7]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002360:	2300      	movs	r3, #0
 8002362:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002364:	4b16      	ldr	r3, [pc, #88]	; (80023c0 <HAL_InitTick+0x68>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d022      	beq.n	80023b2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800236c:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <HAL_InitTick+0x6c>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	4b13      	ldr	r3, [pc, #76]	; (80023c0 <HAL_InitTick+0x68>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002378:	fbb1 f3f3 	udiv	r3, r1, r3
 800237c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002380:	4618      	mov	r0, r3
 8002382:	f000 f968 	bl	8002656 <HAL_SYSTICK_Config>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10f      	bne.n	80023ac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b0f      	cmp	r3, #15
 8002390:	d809      	bhi.n	80023a6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002392:	2200      	movs	r2, #0
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	f04f 30ff 	mov.w	r0, #4294967295
 800239a:	f000 f932 	bl	8002602 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800239e:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <HAL_InitTick+0x70>)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6013      	str	r3, [r2, #0]
 80023a4:	e007      	b.n	80023b6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	73fb      	strb	r3, [r7, #15]
 80023aa:	e004      	b.n	80023b6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	73fb      	strb	r3, [r7, #15]
 80023b0:	e001      	b.n	80023b6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	200001e0 	.word	0x200001e0
 80023c4:	200001c8 	.word	0x200001c8
 80023c8:	200001dc 	.word	0x200001dc

080023cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <HAL_IncTick+0x1c>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	4b05      	ldr	r3, [pc, #20]	; (80023ec <HAL_IncTick+0x20>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4413      	add	r3, r2
 80023da:	4a03      	ldr	r2, [pc, #12]	; (80023e8 <HAL_IncTick+0x1c>)
 80023dc:	6013      	str	r3, [r2, #0]
}
 80023de:	bf00      	nop
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	200036f4 	.word	0x200036f4
 80023ec:	200001e0 	.word	0x200001e0

080023f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return uwTick;
 80023f4:	4b03      	ldr	r3, [pc, #12]	; (8002404 <HAL_GetTick+0x14>)
 80023f6:	681b      	ldr	r3, [r3, #0]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	200036f4 	.word	0x200036f4

08002408 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002410:	f7ff ffee 	bl	80023f0 <HAL_GetTick>
 8002414:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002420:	d004      	beq.n	800242c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002422:	4b09      	ldr	r3, [pc, #36]	; (8002448 <HAL_Delay+0x40>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	4413      	add	r3, r2
 800242a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800242c:	bf00      	nop
 800242e:	f7ff ffdf 	bl	80023f0 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	429a      	cmp	r2, r3
 800243c:	d8f7      	bhi.n	800242e <HAL_Delay+0x26>
  {
  }
}
 800243e:	bf00      	nop
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	200001e0 	.word	0x200001e0

0800244c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <__NVIC_SetPriorityGrouping+0x44>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002468:	4013      	ands	r3, r2
 800246a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002474:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800247c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800247e:	4a04      	ldr	r2, [pc, #16]	; (8002490 <__NVIC_SetPriorityGrouping+0x44>)
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	60d3      	str	r3, [r2, #12]
}
 8002484:	bf00      	nop
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002498:	4b04      	ldr	r3, [pc, #16]	; (80024ac <__NVIC_GetPriorityGrouping+0x18>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	0a1b      	lsrs	r3, r3, #8
 800249e:	f003 0307 	and.w	r3, r3, #7
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	db0b      	blt.n	80024da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024c2:	79fb      	ldrb	r3, [r7, #7]
 80024c4:	f003 021f 	and.w	r2, r3, #31
 80024c8:	4907      	ldr	r1, [pc, #28]	; (80024e8 <__NVIC_EnableIRQ+0x38>)
 80024ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ce:	095b      	lsrs	r3, r3, #5
 80024d0:	2001      	movs	r0, #1
 80024d2:	fa00 f202 	lsl.w	r2, r0, r2
 80024d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	e000e100 	.word	0xe000e100

080024ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	6039      	str	r1, [r7, #0]
 80024f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	db0a      	blt.n	8002516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	b2da      	uxtb	r2, r3
 8002504:	490c      	ldr	r1, [pc, #48]	; (8002538 <__NVIC_SetPriority+0x4c>)
 8002506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250a:	0112      	lsls	r2, r2, #4
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	440b      	add	r3, r1
 8002510:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002514:	e00a      	b.n	800252c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	b2da      	uxtb	r2, r3
 800251a:	4908      	ldr	r1, [pc, #32]	; (800253c <__NVIC_SetPriority+0x50>)
 800251c:	79fb      	ldrb	r3, [r7, #7]
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	3b04      	subs	r3, #4
 8002524:	0112      	lsls	r2, r2, #4
 8002526:	b2d2      	uxtb	r2, r2
 8002528:	440b      	add	r3, r1
 800252a:	761a      	strb	r2, [r3, #24]
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	e000e100 	.word	0xe000e100
 800253c:	e000ed00 	.word	0xe000ed00

08002540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002540:	b480      	push	{r7}
 8002542:	b089      	sub	sp, #36	; 0x24
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f1c3 0307 	rsb	r3, r3, #7
 800255a:	2b04      	cmp	r3, #4
 800255c:	bf28      	it	cs
 800255e:	2304      	movcs	r3, #4
 8002560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	3304      	adds	r3, #4
 8002566:	2b06      	cmp	r3, #6
 8002568:	d902      	bls.n	8002570 <NVIC_EncodePriority+0x30>
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	3b03      	subs	r3, #3
 800256e:	e000      	b.n	8002572 <NVIC_EncodePriority+0x32>
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002574:	f04f 32ff 	mov.w	r2, #4294967295
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43da      	mvns	r2, r3
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	401a      	ands	r2, r3
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002588:	f04f 31ff 	mov.w	r1, #4294967295
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	fa01 f303 	lsl.w	r3, r1, r3
 8002592:	43d9      	mvns	r1, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002598:	4313      	orrs	r3, r2
         );
}
 800259a:	4618      	mov	r0, r3
 800259c:	3724      	adds	r7, #36	; 0x24
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
	...

080025a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025b8:	d301      	bcc.n	80025be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ba:	2301      	movs	r3, #1
 80025bc:	e00f      	b.n	80025de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025be:	4a0a      	ldr	r2, [pc, #40]	; (80025e8 <SysTick_Config+0x40>)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025c6:	210f      	movs	r1, #15
 80025c8:	f04f 30ff 	mov.w	r0, #4294967295
 80025cc:	f7ff ff8e 	bl	80024ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025d0:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <SysTick_Config+0x40>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025d6:	4b04      	ldr	r3, [pc, #16]	; (80025e8 <SysTick_Config+0x40>)
 80025d8:	2207      	movs	r2, #7
 80025da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	e000e010 	.word	0xe000e010

080025ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff ff29 	bl	800244c <__NVIC_SetPriorityGrouping>
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b086      	sub	sp, #24
 8002606:	af00      	add	r7, sp, #0
 8002608:	4603      	mov	r3, r0
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	607a      	str	r2, [r7, #4]
 800260e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002614:	f7ff ff3e 	bl	8002494 <__NVIC_GetPriorityGrouping>
 8002618:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	6978      	ldr	r0, [r7, #20]
 8002620:	f7ff ff8e 	bl	8002540 <NVIC_EncodePriority>
 8002624:	4602      	mov	r2, r0
 8002626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800262a:	4611      	mov	r1, r2
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff ff5d 	bl	80024ec <__NVIC_SetPriority>
}
 8002632:	bf00      	nop
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	4603      	mov	r3, r0
 8002642:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff ff31 	bl	80024b0 <__NVIC_EnableIRQ>
}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b082      	sub	sp, #8
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff ffa2 	bl	80025a8 <SysTick_Config>
 8002664:	4603      	mov	r3, r0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
	...

08002670 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e0ac      	b.n	80027dc <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f000 f8b2 	bl	80027f0 <DFSDM_GetChannelFromInstance>
 800268c:	4602      	mov	r2, r0
 800268e:	4b55      	ldr	r3, [pc, #340]	; (80027e4 <HAL_DFSDM_ChannelInit+0x174>)
 8002690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e09f      	b.n	80027dc <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7ff fa0b 	bl	8001ab8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80026a2:	4b51      	ldr	r3, [pc, #324]	; (80027e8 <HAL_DFSDM_ChannelInit+0x178>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	3301      	adds	r3, #1
 80026a8:	4a4f      	ldr	r2, [pc, #316]	; (80027e8 <HAL_DFSDM_ChannelInit+0x178>)
 80026aa:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80026ac:	4b4e      	ldr	r3, [pc, #312]	; (80027e8 <HAL_DFSDM_ChannelInit+0x178>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d125      	bne.n	8002700 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80026b4:	4b4d      	ldr	r3, [pc, #308]	; (80027ec <HAL_DFSDM_ChannelInit+0x17c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a4c      	ldr	r2, [pc, #304]	; (80027ec <HAL_DFSDM_ChannelInit+0x17c>)
 80026ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026be:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80026c0:	4b4a      	ldr	r3, [pc, #296]	; (80027ec <HAL_DFSDM_ChannelInit+0x17c>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	4948      	ldr	r1, [pc, #288]	; (80027ec <HAL_DFSDM_ChannelInit+0x17c>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80026ce:	4b47      	ldr	r3, [pc, #284]	; (80027ec <HAL_DFSDM_ChannelInit+0x17c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a46      	ldr	r2, [pc, #280]	; (80027ec <HAL_DFSDM_ChannelInit+0x17c>)
 80026d4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80026d8:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	791b      	ldrb	r3, [r3, #4]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d108      	bne.n	80026f4 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80026e2:	4b42      	ldr	r3, [pc, #264]	; (80027ec <HAL_DFSDM_ChannelInit+0x17c>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	041b      	lsls	r3, r3, #16
 80026ee:	493f      	ldr	r1, [pc, #252]	; (80027ec <HAL_DFSDM_ChannelInit+0x17c>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80026f4:	4b3d      	ldr	r3, [pc, #244]	; (80027ec <HAL_DFSDM_ChannelInit+0x17c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a3c      	ldr	r2, [pc, #240]	; (80027ec <HAL_DFSDM_ChannelInit+0x17c>)
 80026fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026fe:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800270e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6819      	ldr	r1, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800271e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002724:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 020f 	bic.w	r2, r2, #15
 800273c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6819      	ldr	r1, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800274c:	431a      	orrs	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002764:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6899      	ldr	r1, [r3, #8]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002774:	3b01      	subs	r3, #1
 8002776:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002778:	431a      	orrs	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f002 0207 	and.w	r2, r2, #7
 8002790:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6859      	ldr	r1, [r3, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80027a4:	431a      	orrs	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027bc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 f810 	bl	80027f0 <DFSDM_GetChannelFromInstance>
 80027d0:	4601      	mov	r1, r0
 80027d2:	4a04      	ldr	r2, [pc, #16]	; (80027e4 <HAL_DFSDM_ChannelInit+0x174>)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	20000de8 	.word	0x20000de8
 80027e8:	20000de4 	.word	0x20000de4
 80027ec:	40016000 	.word	0x40016000

080027f0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a1c      	ldr	r2, [pc, #112]	; (800286c <DFSDM_GetChannelFromInstance+0x7c>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d102      	bne.n	8002806 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002800:	2300      	movs	r3, #0
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	e02b      	b.n	800285e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a19      	ldr	r2, [pc, #100]	; (8002870 <DFSDM_GetChannelFromInstance+0x80>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d102      	bne.n	8002814 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800280e:	2301      	movs	r3, #1
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	e024      	b.n	800285e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a17      	ldr	r2, [pc, #92]	; (8002874 <DFSDM_GetChannelFromInstance+0x84>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d102      	bne.n	8002822 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800281c:	2302      	movs	r3, #2
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	e01d      	b.n	800285e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a14      	ldr	r2, [pc, #80]	; (8002878 <DFSDM_GetChannelFromInstance+0x88>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d102      	bne.n	8002830 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800282a:	2304      	movs	r3, #4
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	e016      	b.n	800285e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a12      	ldr	r2, [pc, #72]	; (800287c <DFSDM_GetChannelFromInstance+0x8c>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d102      	bne.n	800283e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002838:	2305      	movs	r3, #5
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	e00f      	b.n	800285e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a0f      	ldr	r2, [pc, #60]	; (8002880 <DFSDM_GetChannelFromInstance+0x90>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d102      	bne.n	800284c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002846:	2306      	movs	r3, #6
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	e008      	b.n	800285e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a0d      	ldr	r2, [pc, #52]	; (8002884 <DFSDM_GetChannelFromInstance+0x94>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d102      	bne.n	800285a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002854:	2307      	movs	r3, #7
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	e001      	b.n	800285e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800285a:	2303      	movs	r3, #3
 800285c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800285e:	68fb      	ldr	r3, [r7, #12]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	40016000 	.word	0x40016000
 8002870:	40016020 	.word	0x40016020
 8002874:	40016040 	.word	0x40016040
 8002878:	40016080 	.word	0x40016080
 800287c:	400160a0 	.word	0x400160a0
 8002880:	400160c0 	.word	0x400160c0
 8002884:	400160e0 	.word	0x400160e0

08002888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002888:	b480      	push	{r7}
 800288a:	b087      	sub	sp, #28
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002896:	e17f      	b.n	8002b98 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	2101      	movs	r1, #1
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	fa01 f303 	lsl.w	r3, r1, r3
 80028a4:	4013      	ands	r3, r2
 80028a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 8171 	beq.w	8002b92 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d00b      	beq.n	80028d0 <HAL_GPIO_Init+0x48>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d007      	beq.n	80028d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028c4:	2b11      	cmp	r3, #17
 80028c6:	d003      	beq.n	80028d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2b12      	cmp	r3, #18
 80028ce:	d130      	bne.n	8002932 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	2203      	movs	r2, #3
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	4013      	ands	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	68da      	ldr	r2, [r3, #12]
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002906:	2201      	movs	r2, #1
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43db      	mvns	r3, r3
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	091b      	lsrs	r3, r3, #4
 800291c:	f003 0201 	and.w	r2, r3, #1
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	2b03      	cmp	r3, #3
 800293c:	d118      	bne.n	8002970 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002942:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002944:	2201      	movs	r2, #1
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4013      	ands	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	08db      	lsrs	r3, r3, #3
 800295a:	f003 0201 	and.w	r2, r3, #1
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	4313      	orrs	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	2203      	movs	r2, #3
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4013      	ands	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	4313      	orrs	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d003      	beq.n	80029b0 <HAL_GPIO_Init+0x128>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b12      	cmp	r3, #18
 80029ae:	d123      	bne.n	80029f8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	08da      	lsrs	r2, r3, #3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3208      	adds	r2, #8
 80029b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	220f      	movs	r2, #15
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4013      	ands	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	691a      	ldr	r2, [r3, #16]
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	08da      	lsrs	r2, r3, #3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3208      	adds	r2, #8
 80029f2:	6939      	ldr	r1, [r7, #16]
 80029f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	2203      	movs	r2, #3
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 0203 	and.w	r2, r3, #3
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 80ac 	beq.w	8002b92 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a3a:	4b5e      	ldr	r3, [pc, #376]	; (8002bb4 <HAL_GPIO_Init+0x32c>)
 8002a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a3e:	4a5d      	ldr	r2, [pc, #372]	; (8002bb4 <HAL_GPIO_Init+0x32c>)
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	6613      	str	r3, [r2, #96]	; 0x60
 8002a46:	4b5b      	ldr	r3, [pc, #364]	; (8002bb4 <HAL_GPIO_Init+0x32c>)
 8002a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a52:	4a59      	ldr	r2, [pc, #356]	; (8002bb8 <HAL_GPIO_Init+0x330>)
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	089b      	lsrs	r3, r3, #2
 8002a58:	3302      	adds	r3, #2
 8002a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	220f      	movs	r2, #15
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	4013      	ands	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a7c:	d025      	beq.n	8002aca <HAL_GPIO_Init+0x242>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a4e      	ldr	r2, [pc, #312]	; (8002bbc <HAL_GPIO_Init+0x334>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d01f      	beq.n	8002ac6 <HAL_GPIO_Init+0x23e>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a4d      	ldr	r2, [pc, #308]	; (8002bc0 <HAL_GPIO_Init+0x338>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d019      	beq.n	8002ac2 <HAL_GPIO_Init+0x23a>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a4c      	ldr	r2, [pc, #304]	; (8002bc4 <HAL_GPIO_Init+0x33c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d013      	beq.n	8002abe <HAL_GPIO_Init+0x236>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a4b      	ldr	r2, [pc, #300]	; (8002bc8 <HAL_GPIO_Init+0x340>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d00d      	beq.n	8002aba <HAL_GPIO_Init+0x232>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a4a      	ldr	r2, [pc, #296]	; (8002bcc <HAL_GPIO_Init+0x344>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d007      	beq.n	8002ab6 <HAL_GPIO_Init+0x22e>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a49      	ldr	r2, [pc, #292]	; (8002bd0 <HAL_GPIO_Init+0x348>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d101      	bne.n	8002ab2 <HAL_GPIO_Init+0x22a>
 8002aae:	2306      	movs	r3, #6
 8002ab0:	e00c      	b.n	8002acc <HAL_GPIO_Init+0x244>
 8002ab2:	2307      	movs	r3, #7
 8002ab4:	e00a      	b.n	8002acc <HAL_GPIO_Init+0x244>
 8002ab6:	2305      	movs	r3, #5
 8002ab8:	e008      	b.n	8002acc <HAL_GPIO_Init+0x244>
 8002aba:	2304      	movs	r3, #4
 8002abc:	e006      	b.n	8002acc <HAL_GPIO_Init+0x244>
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e004      	b.n	8002acc <HAL_GPIO_Init+0x244>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e002      	b.n	8002acc <HAL_GPIO_Init+0x244>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <HAL_GPIO_Init+0x244>
 8002aca:	2300      	movs	r3, #0
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	f002 0203 	and.w	r2, r2, #3
 8002ad2:	0092      	lsls	r2, r2, #2
 8002ad4:	4093      	lsls	r3, r2
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002adc:	4936      	ldr	r1, [pc, #216]	; (8002bb8 <HAL_GPIO_Init+0x330>)
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	089b      	lsrs	r3, r3, #2
 8002ae2:	3302      	adds	r3, #2
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002aea:	4b3a      	ldr	r3, [pc, #232]	; (8002bd4 <HAL_GPIO_Init+0x34c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	43db      	mvns	r3, r3
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	4013      	ands	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b0e:	4a31      	ldr	r2, [pc, #196]	; (8002bd4 <HAL_GPIO_Init+0x34c>)
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002b14:	4b2f      	ldr	r3, [pc, #188]	; (8002bd4 <HAL_GPIO_Init+0x34c>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	4013      	ands	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b38:	4a26      	ldr	r2, [pc, #152]	; (8002bd4 <HAL_GPIO_Init+0x34c>)
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b3e:	4b25      	ldr	r3, [pc, #148]	; (8002bd4 <HAL_GPIO_Init+0x34c>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	43db      	mvns	r3, r3
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b62:	4a1c      	ldr	r2, [pc, #112]	; (8002bd4 <HAL_GPIO_Init+0x34c>)
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b68:	4b1a      	ldr	r3, [pc, #104]	; (8002bd4 <HAL_GPIO_Init+0x34c>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	43db      	mvns	r3, r3
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4013      	ands	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b8c:	4a11      	ldr	r2, [pc, #68]	; (8002bd4 <HAL_GPIO_Init+0x34c>)
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	3301      	adds	r3, #1
 8002b96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f47f ae78 	bne.w	8002898 <HAL_GPIO_Init+0x10>
  }
}
 8002ba8:	bf00      	nop
 8002baa:	371c      	adds	r7, #28
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	40010000 	.word	0x40010000
 8002bbc:	48000400 	.word	0x48000400
 8002bc0:	48000800 	.word	0x48000800
 8002bc4:	48000c00 	.word	0x48000c00
 8002bc8:	48001000 	.word	0x48001000
 8002bcc:	48001400 	.word	0x48001400
 8002bd0:	48001800 	.word	0x48001800
 8002bd4:	40010400 	.word	0x40010400

08002bd8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b087      	sub	sp, #28
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002be6:	e0cd      	b.n	8002d84 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002be8:	2201      	movs	r2, #1
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 80c0 	beq.w	8002d7e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002bfe:	4a68      	ldr	r2, [pc, #416]	; (8002da0 <HAL_GPIO_DeInit+0x1c8>)
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	089b      	lsrs	r3, r3, #2
 8002c04:	3302      	adds	r3, #2
 8002c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c0a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	220f      	movs	r2, #15
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c26:	d025      	beq.n	8002c74 <HAL_GPIO_DeInit+0x9c>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a5e      	ldr	r2, [pc, #376]	; (8002da4 <HAL_GPIO_DeInit+0x1cc>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d01f      	beq.n	8002c70 <HAL_GPIO_DeInit+0x98>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a5d      	ldr	r2, [pc, #372]	; (8002da8 <HAL_GPIO_DeInit+0x1d0>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d019      	beq.n	8002c6c <HAL_GPIO_DeInit+0x94>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a5c      	ldr	r2, [pc, #368]	; (8002dac <HAL_GPIO_DeInit+0x1d4>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d013      	beq.n	8002c68 <HAL_GPIO_DeInit+0x90>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a5b      	ldr	r2, [pc, #364]	; (8002db0 <HAL_GPIO_DeInit+0x1d8>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d00d      	beq.n	8002c64 <HAL_GPIO_DeInit+0x8c>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a5a      	ldr	r2, [pc, #360]	; (8002db4 <HAL_GPIO_DeInit+0x1dc>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d007      	beq.n	8002c60 <HAL_GPIO_DeInit+0x88>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a59      	ldr	r2, [pc, #356]	; (8002db8 <HAL_GPIO_DeInit+0x1e0>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d101      	bne.n	8002c5c <HAL_GPIO_DeInit+0x84>
 8002c58:	2306      	movs	r3, #6
 8002c5a:	e00c      	b.n	8002c76 <HAL_GPIO_DeInit+0x9e>
 8002c5c:	2307      	movs	r3, #7
 8002c5e:	e00a      	b.n	8002c76 <HAL_GPIO_DeInit+0x9e>
 8002c60:	2305      	movs	r3, #5
 8002c62:	e008      	b.n	8002c76 <HAL_GPIO_DeInit+0x9e>
 8002c64:	2304      	movs	r3, #4
 8002c66:	e006      	b.n	8002c76 <HAL_GPIO_DeInit+0x9e>
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e004      	b.n	8002c76 <HAL_GPIO_DeInit+0x9e>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e002      	b.n	8002c76 <HAL_GPIO_DeInit+0x9e>
 8002c70:	2301      	movs	r3, #1
 8002c72:	e000      	b.n	8002c76 <HAL_GPIO_DeInit+0x9e>
 8002c74:	2300      	movs	r3, #0
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	f002 0203 	and.w	r2, r2, #3
 8002c7c:	0092      	lsls	r2, r2, #2
 8002c7e:	4093      	lsls	r3, r2
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d132      	bne.n	8002cec <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002c86:	4b4d      	ldr	r3, [pc, #308]	; (8002dbc <HAL_GPIO_DeInit+0x1e4>)
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	494b      	ldr	r1, [pc, #300]	; (8002dbc <HAL_GPIO_DeInit+0x1e4>)
 8002c90:	4013      	ands	r3, r2
 8002c92:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002c94:	4b49      	ldr	r3, [pc, #292]	; (8002dbc <HAL_GPIO_DeInit+0x1e4>)
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	4947      	ldr	r1, [pc, #284]	; (8002dbc <HAL_GPIO_DeInit+0x1e4>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002ca2:	4b46      	ldr	r3, [pc, #280]	; (8002dbc <HAL_GPIO_DeInit+0x1e4>)
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	4944      	ldr	r1, [pc, #272]	; (8002dbc <HAL_GPIO_DeInit+0x1e4>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8002cb0:	4b42      	ldr	r3, [pc, #264]	; (8002dbc <HAL_GPIO_DeInit+0x1e4>)
 8002cb2:	68da      	ldr	r2, [r3, #12]
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	4940      	ldr	r1, [pc, #256]	; (8002dbc <HAL_GPIO_DeInit+0x1e4>)
 8002cba:	4013      	ands	r3, r2
 8002cbc:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f003 0303 	and.w	r3, r3, #3
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	220f      	movs	r2, #15
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002cce:	4a34      	ldr	r2, [pc, #208]	; (8002da0 <HAL_GPIO_DeInit+0x1c8>)
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	089b      	lsrs	r3, r3, #2
 8002cd4:	3302      	adds	r3, #2
 8002cd6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	43da      	mvns	r2, r3
 8002cde:	4830      	ldr	r0, [pc, #192]	; (8002da0 <HAL_GPIO_DeInit+0x1c8>)
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	089b      	lsrs	r3, r3, #2
 8002ce4:	400a      	ands	r2, r1
 8002ce6:	3302      	adds	r3, #2
 8002ce8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	2103      	movs	r1, #3
 8002cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	08da      	lsrs	r2, r3, #3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3208      	adds	r2, #8
 8002d08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	220f      	movs	r2, #15
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	08d2      	lsrs	r2, r2, #3
 8002d20:	4019      	ands	r1, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	3208      	adds	r2, #8
 8002d26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689a      	ldr	r2, [r3, #8]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	2103      	movs	r1, #3
 8002d34:	fa01 f303 	lsl.w	r3, r1, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	401a      	ands	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	2101      	movs	r1, #1
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	401a      	ands	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68da      	ldr	r2, [r3, #12]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	2103      	movs	r1, #3
 8002d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d62:	43db      	mvns	r3, r3
 8002d64:	401a      	ands	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d6e:	2101      	movs	r1, #1
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	fa01 f303 	lsl.w	r3, r1, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	401a      	ands	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	3301      	adds	r3, #1
 8002d82:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f47f af2b 	bne.w	8002be8 <HAL_GPIO_DeInit+0x10>
  }
}
 8002d92:	bf00      	nop
 8002d94:	371c      	adds	r7, #28
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	40010000 	.word	0x40010000
 8002da4:	48000400 	.word	0x48000400
 8002da8:	48000800 	.word	0x48000800
 8002dac:	48000c00 	.word	0x48000c00
 8002db0:	48001000 	.word	0x48001000
 8002db4:	48001400 	.word	0x48001400
 8002db8:	48001800 	.word	0x48001800
 8002dbc:	40010400 	.word	0x40010400

08002dc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691a      	ldr	r2, [r3, #16]
 8002dd0:	887b      	ldrh	r3, [r7, #2]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d002      	beq.n	8002dde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	73fb      	strb	r3, [r7, #15]
 8002ddc:	e001      	b.n	8002de2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dde:	2300      	movs	r3, #0
 8002de0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	807b      	strh	r3, [r7, #2]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e00:	787b      	ldrb	r3, [r7, #1]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e06:	887a      	ldrh	r2, [r7, #2]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e0c:	e002      	b.n	8002e14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e0e:	887a      	ldrh	r2, [r7, #2]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	695a      	ldr	r2, [r3, #20]
 8002e30:	887b      	ldrh	r3, [r7, #2]
 8002e32:	4013      	ands	r3, r2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e38:	887a      	ldrh	r2, [r7, #2]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002e3e:	e002      	b.n	8002e46 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e40:	887a      	ldrh	r2, [r7, #2]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	619a      	str	r2, [r3, #24]
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
	...

08002e54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e5e:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e60:	695a      	ldr	r2, [r3, #20]
 8002e62:	88fb      	ldrh	r3, [r7, #6]
 8002e64:	4013      	ands	r3, r2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d006      	beq.n	8002e78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e6a:	4a05      	ldr	r2, [pc, #20]	; (8002e80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e6c:	88fb      	ldrh	r3, [r7, #6]
 8002e6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e70:	88fb      	ldrh	r3, [r7, #6]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 f806 	bl	8002e84 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e78:	bf00      	nop
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40010400 	.word	0x40010400

08002e84 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr

08002e9a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b082      	sub	sp, #8
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e081      	b.n	8002fb0 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d106      	bne.n	8002ec6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f7fe fe3d 	bl	8001b40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2224      	movs	r2, #36	; 0x24
 8002eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0201 	bic.w	r2, r2, #1
 8002edc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002eea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002efa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d107      	bne.n	8002f14 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f10:	609a      	str	r2, [r3, #8]
 8002f12:	e006      	b.n	8002f22 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002f20:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d104      	bne.n	8002f34 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f32:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	6812      	ldr	r2, [r2, #0]
 8002f3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f46:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f56:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691a      	ldr	r2, [r3, #16]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	ea42 0103 	orr.w	r1, r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	021a      	lsls	r2, r3, #8
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69d9      	ldr	r1, [r3, #28]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1a      	ldr	r2, [r3, #32]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f042 0201 	orr.w	r2, r2, #1
 8002f90:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e021      	b.n	800300e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2224      	movs	r2, #36	; 0x24
 8002fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 0201 	bic.w	r2, r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7fe fdf0 	bl	8001bc8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b088      	sub	sp, #32
 800301c:	af02      	add	r7, sp, #8
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	607a      	str	r2, [r7, #4]
 8003022:	461a      	mov	r2, r3
 8003024:	460b      	mov	r3, r1
 8003026:	817b      	strh	r3, [r7, #10]
 8003028:	4613      	mov	r3, r2
 800302a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b20      	cmp	r3, #32
 8003036:	f040 80da 	bne.w	80031ee <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <HAL_I2C_Master_Transmit+0x30>
 8003044:	2302      	movs	r3, #2
 8003046:	e0d3      	b.n	80031f0 <HAL_I2C_Master_Transmit+0x1d8>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003050:	f7ff f9ce 	bl	80023f0 <HAL_GetTick>
 8003054:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	2319      	movs	r3, #25
 800305c:	2201      	movs	r2, #1
 800305e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 fcbc 	bl	80039e0 <I2C_WaitOnFlagUntilTimeout>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e0be      	b.n	80031f0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2221      	movs	r2, #33	; 0x21
 8003076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2210      	movs	r2, #16
 800307e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	893a      	ldrh	r2, [r7, #8]
 8003092:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309e:	b29b      	uxth	r3, r3
 80030a0:	2bff      	cmp	r3, #255	; 0xff
 80030a2:	d90e      	bls.n	80030c2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	22ff      	movs	r2, #255	; 0xff
 80030a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	8979      	ldrh	r1, [r7, #10]
 80030b2:	4b51      	ldr	r3, [pc, #324]	; (80031f8 <HAL_I2C_Master_Transmit+0x1e0>)
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 fe1e 	bl	8003cfc <I2C_TransferConfig>
 80030c0:	e06c      	b.n	800319c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	8979      	ldrh	r1, [r7, #10]
 80030d4:	4b48      	ldr	r3, [pc, #288]	; (80031f8 <HAL_I2C_Master_Transmit+0x1e0>)
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f000 fe0d 	bl	8003cfc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80030e2:	e05b      	b.n	800319c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	6a39      	ldr	r1, [r7, #32]
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 fcb9 	bl	8003a60 <I2C_WaitOnTXISFlagUntilTimeout>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e07b      	b.n	80031f0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	781a      	ldrb	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	1c5a      	adds	r2, r3, #1
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003112:	b29b      	uxth	r3, r3
 8003114:	3b01      	subs	r3, #1
 8003116:	b29a      	uxth	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003120:	3b01      	subs	r3, #1
 8003122:	b29a      	uxth	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312c:	b29b      	uxth	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d034      	beq.n	800319c <HAL_I2C_Master_Transmit+0x184>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003136:	2b00      	cmp	r3, #0
 8003138:	d130      	bne.n	800319c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	2200      	movs	r2, #0
 8003142:	2180      	movs	r1, #128	; 0x80
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 fc4b 	bl	80039e0 <I2C_WaitOnFlagUntilTimeout>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e04d      	b.n	80031f0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003158:	b29b      	uxth	r3, r3
 800315a:	2bff      	cmp	r3, #255	; 0xff
 800315c:	d90e      	bls.n	800317c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	22ff      	movs	r2, #255	; 0xff
 8003162:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003168:	b2da      	uxtb	r2, r3
 800316a:	8979      	ldrh	r1, [r7, #10]
 800316c:	2300      	movs	r3, #0
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f000 fdc1 	bl	8003cfc <I2C_TransferConfig>
 800317a:	e00f      	b.n	800319c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003180:	b29a      	uxth	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318a:	b2da      	uxtb	r2, r3
 800318c:	8979      	ldrh	r1, [r7, #10]
 800318e:	2300      	movs	r3, #0
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 fdb0 	bl	8003cfc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d19e      	bne.n	80030e4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	6a39      	ldr	r1, [r7, #32]
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 fc98 	bl	8003ae0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e01a      	b.n	80031f0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2220      	movs	r2, #32
 80031c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6859      	ldr	r1, [r3, #4]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <HAL_I2C_Master_Transmit+0x1e4>)
 80031ce:	400b      	ands	r3, r1
 80031d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2220      	movs	r2, #32
 80031d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	e000      	b.n	80031f0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80031ee:	2302      	movs	r3, #2
  }
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3718      	adds	r7, #24
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	80002000 	.word	0x80002000
 80031fc:	fe00e800 	.word	0xfe00e800

08003200 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b088      	sub	sp, #32
 8003204:	af02      	add	r7, sp, #8
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	607a      	str	r2, [r7, #4]
 800320a:	461a      	mov	r2, r3
 800320c:	460b      	mov	r3, r1
 800320e:	817b      	strh	r3, [r7, #10]
 8003210:	4613      	mov	r3, r2
 8003212:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b20      	cmp	r3, #32
 800321e:	f040 80db 	bne.w	80033d8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003228:	2b01      	cmp	r3, #1
 800322a:	d101      	bne.n	8003230 <HAL_I2C_Master_Receive+0x30>
 800322c:	2302      	movs	r3, #2
 800322e:	e0d4      	b.n	80033da <HAL_I2C_Master_Receive+0x1da>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003238:	f7ff f8da 	bl	80023f0 <HAL_GetTick>
 800323c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	2319      	movs	r3, #25
 8003244:	2201      	movs	r2, #1
 8003246:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 fbc8 	bl	80039e0 <I2C_WaitOnFlagUntilTimeout>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e0bf      	b.n	80033da <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2222      	movs	r2, #34	; 0x22
 800325e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2210      	movs	r2, #16
 8003266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	893a      	ldrh	r2, [r7, #8]
 800327a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003286:	b29b      	uxth	r3, r3
 8003288:	2bff      	cmp	r3, #255	; 0xff
 800328a:	d90e      	bls.n	80032aa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	22ff      	movs	r2, #255	; 0xff
 8003290:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003296:	b2da      	uxtb	r2, r3
 8003298:	8979      	ldrh	r1, [r7, #10]
 800329a:	4b52      	ldr	r3, [pc, #328]	; (80033e4 <HAL_I2C_Master_Receive+0x1e4>)
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 fd2a 	bl	8003cfc <I2C_TransferConfig>
 80032a8:	e06d      	b.n	8003386 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	8979      	ldrh	r1, [r7, #10]
 80032bc:	4b49      	ldr	r3, [pc, #292]	; (80033e4 <HAL_I2C_Master_Receive+0x1e4>)
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 fd19 	bl	8003cfc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80032ca:	e05c      	b.n	8003386 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	6a39      	ldr	r1, [r7, #32]
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 fc41 	bl	8003b58 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e07c      	b.n	80033da <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	1c5a      	adds	r2, r3, #1
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fc:	3b01      	subs	r3, #1
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003308:	b29b      	uxth	r3, r3
 800330a:	3b01      	subs	r3, #1
 800330c:	b29a      	uxth	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003316:	b29b      	uxth	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d034      	beq.n	8003386 <HAL_I2C_Master_Receive+0x186>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003320:	2b00      	cmp	r3, #0
 8003322:	d130      	bne.n	8003386 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	2200      	movs	r2, #0
 800332c:	2180      	movs	r1, #128	; 0x80
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 fb56 	bl	80039e0 <I2C_WaitOnFlagUntilTimeout>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e04d      	b.n	80033da <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003342:	b29b      	uxth	r3, r3
 8003344:	2bff      	cmp	r3, #255	; 0xff
 8003346:	d90e      	bls.n	8003366 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	22ff      	movs	r2, #255	; 0xff
 800334c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003352:	b2da      	uxtb	r2, r3
 8003354:	8979      	ldrh	r1, [r7, #10]
 8003356:	2300      	movs	r3, #0
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f000 fccc 	bl	8003cfc <I2C_TransferConfig>
 8003364:	e00f      	b.n	8003386 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003374:	b2da      	uxtb	r2, r3
 8003376:	8979      	ldrh	r1, [r7, #10]
 8003378:	2300      	movs	r3, #0
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 fcbb 	bl	8003cfc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338a:	b29b      	uxth	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	d19d      	bne.n	80032cc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	6a39      	ldr	r1, [r7, #32]
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f000 fba3 	bl	8003ae0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e01a      	b.n	80033da <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2220      	movs	r2, #32
 80033aa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6859      	ldr	r1, [r3, #4]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	4b0c      	ldr	r3, [pc, #48]	; (80033e8 <HAL_I2C_Master_Receive+0x1e8>)
 80033b8:	400b      	ands	r3, r1
 80033ba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033d4:	2300      	movs	r3, #0
 80033d6:	e000      	b.n	80033da <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80033d8:	2302      	movs	r3, #2
  }
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	80002400 	.word	0x80002400
 80033e8:	fe00e800 	.word	0xfe00e800

080033ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b088      	sub	sp, #32
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	4608      	mov	r0, r1
 80033f6:	4611      	mov	r1, r2
 80033f8:	461a      	mov	r2, r3
 80033fa:	4603      	mov	r3, r0
 80033fc:	817b      	strh	r3, [r7, #10]
 80033fe:	460b      	mov	r3, r1
 8003400:	813b      	strh	r3, [r7, #8]
 8003402:	4613      	mov	r3, r2
 8003404:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b20      	cmp	r3, #32
 8003410:	f040 80f9 	bne.w	8003606 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <HAL_I2C_Mem_Write+0x34>
 800341a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800341c:	2b00      	cmp	r3, #0
 800341e:	d105      	bne.n	800342c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003426:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e0ed      	b.n	8003608 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003432:	2b01      	cmp	r3, #1
 8003434:	d101      	bne.n	800343a <HAL_I2C_Mem_Write+0x4e>
 8003436:	2302      	movs	r3, #2
 8003438:	e0e6      	b.n	8003608 <HAL_I2C_Mem_Write+0x21c>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003442:	f7fe ffd5 	bl	80023f0 <HAL_GetTick>
 8003446:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	2319      	movs	r3, #25
 800344e:	2201      	movs	r2, #1
 8003450:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 fac3 	bl	80039e0 <I2C_WaitOnFlagUntilTimeout>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0d1      	b.n	8003608 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2221      	movs	r2, #33	; 0x21
 8003468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2240      	movs	r2, #64	; 0x40
 8003470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6a3a      	ldr	r2, [r7, #32]
 800347e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003484:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800348c:	88f8      	ldrh	r0, [r7, #6]
 800348e:	893a      	ldrh	r2, [r7, #8]
 8003490:	8979      	ldrh	r1, [r7, #10]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	9301      	str	r3, [sp, #4]
 8003496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	4603      	mov	r3, r0
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 f9d3 	bl	8003848 <I2C_RequestMemoryWrite>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d005      	beq.n	80034b4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0a9      	b.n	8003608 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	2bff      	cmp	r3, #255	; 0xff
 80034bc:	d90e      	bls.n	80034dc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	22ff      	movs	r2, #255	; 0xff
 80034c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	8979      	ldrh	r1, [r7, #10]
 80034cc:	2300      	movs	r3, #0
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 fc11 	bl	8003cfc <I2C_TransferConfig>
 80034da:	e00f      	b.n	80034fc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	8979      	ldrh	r1, [r7, #10]
 80034ee:	2300      	movs	r3, #0
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 fc00 	bl	8003cfc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 faad 	bl	8003a60 <I2C_WaitOnTXISFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e07b      	b.n	8003608 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	781a      	ldrb	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352a:	b29b      	uxth	r3, r3
 800352c:	3b01      	subs	r3, #1
 800352e:	b29a      	uxth	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003538:	3b01      	subs	r3, #1
 800353a:	b29a      	uxth	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003544:	b29b      	uxth	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d034      	beq.n	80035b4 <HAL_I2C_Mem_Write+0x1c8>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354e:	2b00      	cmp	r3, #0
 8003550:	d130      	bne.n	80035b4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003558:	2200      	movs	r2, #0
 800355a:	2180      	movs	r1, #128	; 0x80
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 fa3f 	bl	80039e0 <I2C_WaitOnFlagUntilTimeout>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e04d      	b.n	8003608 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003570:	b29b      	uxth	r3, r3
 8003572:	2bff      	cmp	r3, #255	; 0xff
 8003574:	d90e      	bls.n	8003594 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	22ff      	movs	r2, #255	; 0xff
 800357a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003580:	b2da      	uxtb	r2, r3
 8003582:	8979      	ldrh	r1, [r7, #10]
 8003584:	2300      	movs	r3, #0
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f000 fbb5 	bl	8003cfc <I2C_TransferConfig>
 8003592:	e00f      	b.n	80035b4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003598:	b29a      	uxth	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	8979      	ldrh	r1, [r7, #10]
 80035a6:	2300      	movs	r3, #0
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 fba4 	bl	8003cfc <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d19e      	bne.n	80034fc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 fa8c 	bl	8003ae0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e01a      	b.n	8003608 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2220      	movs	r2, #32
 80035d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6859      	ldr	r1, [r3, #4]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	4b0a      	ldr	r3, [pc, #40]	; (8003610 <HAL_I2C_Mem_Write+0x224>)
 80035e6:	400b      	ands	r3, r1
 80035e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2220      	movs	r2, #32
 80035ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003602:	2300      	movs	r3, #0
 8003604:	e000      	b.n	8003608 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003606:	2302      	movs	r3, #2
  }
}
 8003608:	4618      	mov	r0, r3
 800360a:	3718      	adds	r7, #24
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	fe00e800 	.word	0xfe00e800

08003614 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af02      	add	r7, sp, #8
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	4608      	mov	r0, r1
 800361e:	4611      	mov	r1, r2
 8003620:	461a      	mov	r2, r3
 8003622:	4603      	mov	r3, r0
 8003624:	817b      	strh	r3, [r7, #10]
 8003626:	460b      	mov	r3, r1
 8003628:	813b      	strh	r3, [r7, #8]
 800362a:	4613      	mov	r3, r2
 800362c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b20      	cmp	r3, #32
 8003638:	f040 80fd 	bne.w	8003836 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d002      	beq.n	8003648 <HAL_I2C_Mem_Read+0x34>
 8003642:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003644:	2b00      	cmp	r3, #0
 8003646:	d105      	bne.n	8003654 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800364e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e0f1      	b.n	8003838 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800365a:	2b01      	cmp	r3, #1
 800365c:	d101      	bne.n	8003662 <HAL_I2C_Mem_Read+0x4e>
 800365e:	2302      	movs	r3, #2
 8003660:	e0ea      	b.n	8003838 <HAL_I2C_Mem_Read+0x224>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800366a:	f7fe fec1 	bl	80023f0 <HAL_GetTick>
 800366e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	2319      	movs	r3, #25
 8003676:	2201      	movs	r2, #1
 8003678:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 f9af 	bl	80039e0 <I2C_WaitOnFlagUntilTimeout>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e0d5      	b.n	8003838 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2222      	movs	r2, #34	; 0x22
 8003690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2240      	movs	r2, #64	; 0x40
 8003698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6a3a      	ldr	r2, [r7, #32]
 80036a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80036ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036b4:	88f8      	ldrh	r0, [r7, #6]
 80036b6:	893a      	ldrh	r2, [r7, #8]
 80036b8:	8979      	ldrh	r1, [r7, #10]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	9301      	str	r3, [sp, #4]
 80036be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	4603      	mov	r3, r0
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 f913 	bl	80038f0 <I2C_RequestMemoryRead>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d005      	beq.n	80036dc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e0ad      	b.n	8003838 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	2bff      	cmp	r3, #255	; 0xff
 80036e4:	d90e      	bls.n	8003704 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	22ff      	movs	r2, #255	; 0xff
 80036ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f0:	b2da      	uxtb	r2, r3
 80036f2:	8979      	ldrh	r1, [r7, #10]
 80036f4:	4b52      	ldr	r3, [pc, #328]	; (8003840 <HAL_I2C_Mem_Read+0x22c>)
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 fafd 	bl	8003cfc <I2C_TransferConfig>
 8003702:	e00f      	b.n	8003724 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003708:	b29a      	uxth	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003712:	b2da      	uxtb	r2, r3
 8003714:	8979      	ldrh	r1, [r7, #10]
 8003716:	4b4a      	ldr	r3, [pc, #296]	; (8003840 <HAL_I2C_Mem_Read+0x22c>)
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 faec 	bl	8003cfc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372a:	2200      	movs	r2, #0
 800372c:	2104      	movs	r1, #4
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 f956 	bl	80039e0 <I2C_WaitOnFlagUntilTimeout>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e07c      	b.n	8003838 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	1c5a      	adds	r2, r3, #1
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800375a:	3b01      	subs	r3, #1
 800375c:	b29a      	uxth	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003766:	b29b      	uxth	r3, r3
 8003768:	3b01      	subs	r3, #1
 800376a:	b29a      	uxth	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003774:	b29b      	uxth	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d034      	beq.n	80037e4 <HAL_I2C_Mem_Read+0x1d0>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800377e:	2b00      	cmp	r3, #0
 8003780:	d130      	bne.n	80037e4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003788:	2200      	movs	r2, #0
 800378a:	2180      	movs	r1, #128	; 0x80
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f000 f927 	bl	80039e0 <I2C_WaitOnFlagUntilTimeout>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e04d      	b.n	8003838 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2bff      	cmp	r3, #255	; 0xff
 80037a4:	d90e      	bls.n	80037c4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	22ff      	movs	r2, #255	; 0xff
 80037aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	8979      	ldrh	r1, [r7, #10]
 80037b4:	2300      	movs	r3, #0
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 fa9d 	bl	8003cfc <I2C_TransferConfig>
 80037c2:	e00f      	b.n	80037e4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	8979      	ldrh	r1, [r7, #10]
 80037d6:	2300      	movs	r3, #0
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 fa8c 	bl	8003cfc <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d19a      	bne.n	8003724 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 f974 	bl	8003ae0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e01a      	b.n	8003838 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2220      	movs	r2, #32
 8003808:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6859      	ldr	r1, [r3, #4]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <HAL_I2C_Mem_Read+0x230>)
 8003816:	400b      	ands	r3, r1
 8003818:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2220      	movs	r2, #32
 800381e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003832:	2300      	movs	r3, #0
 8003834:	e000      	b.n	8003838 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003836:	2302      	movs	r3, #2
  }
}
 8003838:	4618      	mov	r0, r3
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	80002400 	.word	0x80002400
 8003844:	fe00e800 	.word	0xfe00e800

08003848 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af02      	add	r7, sp, #8
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	4608      	mov	r0, r1
 8003852:	4611      	mov	r1, r2
 8003854:	461a      	mov	r2, r3
 8003856:	4603      	mov	r3, r0
 8003858:	817b      	strh	r3, [r7, #10]
 800385a:	460b      	mov	r3, r1
 800385c:	813b      	strh	r3, [r7, #8]
 800385e:	4613      	mov	r3, r2
 8003860:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003862:	88fb      	ldrh	r3, [r7, #6]
 8003864:	b2da      	uxtb	r2, r3
 8003866:	8979      	ldrh	r1, [r7, #10]
 8003868:	4b20      	ldr	r3, [pc, #128]	; (80038ec <I2C_RequestMemoryWrite+0xa4>)
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f000 fa43 	bl	8003cfc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003876:	69fa      	ldr	r2, [r7, #28]
 8003878:	69b9      	ldr	r1, [r7, #24]
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 f8f0 	bl	8003a60 <I2C_WaitOnTXISFlagUntilTimeout>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e02c      	b.n	80038e4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800388a:	88fb      	ldrh	r3, [r7, #6]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d105      	bne.n	800389c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003890:	893b      	ldrh	r3, [r7, #8]
 8003892:	b2da      	uxtb	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	629a      	str	r2, [r3, #40]	; 0x28
 800389a:	e015      	b.n	80038c8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800389c:	893b      	ldrh	r3, [r7, #8]
 800389e:	0a1b      	lsrs	r3, r3, #8
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	69b9      	ldr	r1, [r7, #24]
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 f8d6 	bl	8003a60 <I2C_WaitOnTXISFlagUntilTimeout>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e012      	b.n	80038e4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038be:	893b      	ldrh	r3, [r7, #8]
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	2200      	movs	r2, #0
 80038d0:	2180      	movs	r1, #128	; 0x80
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 f884 	bl	80039e0 <I2C_WaitOnFlagUntilTimeout>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e000      	b.n	80038e4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	80002000 	.word	0x80002000

080038f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af02      	add	r7, sp, #8
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	4608      	mov	r0, r1
 80038fa:	4611      	mov	r1, r2
 80038fc:	461a      	mov	r2, r3
 80038fe:	4603      	mov	r3, r0
 8003900:	817b      	strh	r3, [r7, #10]
 8003902:	460b      	mov	r3, r1
 8003904:	813b      	strh	r3, [r7, #8]
 8003906:	4613      	mov	r3, r2
 8003908:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800390a:	88fb      	ldrh	r3, [r7, #6]
 800390c:	b2da      	uxtb	r2, r3
 800390e:	8979      	ldrh	r1, [r7, #10]
 8003910:	4b20      	ldr	r3, [pc, #128]	; (8003994 <I2C_RequestMemoryRead+0xa4>)
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	2300      	movs	r3, #0
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 f9f0 	bl	8003cfc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800391c:	69fa      	ldr	r2, [r7, #28]
 800391e:	69b9      	ldr	r1, [r7, #24]
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f89d 	bl	8003a60 <I2C_WaitOnTXISFlagUntilTimeout>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e02c      	b.n	800398a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003930:	88fb      	ldrh	r3, [r7, #6]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d105      	bne.n	8003942 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003936:	893b      	ldrh	r3, [r7, #8]
 8003938:	b2da      	uxtb	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	629a      	str	r2, [r3, #40]	; 0x28
 8003940:	e015      	b.n	800396e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003942:	893b      	ldrh	r3, [r7, #8]
 8003944:	0a1b      	lsrs	r3, r3, #8
 8003946:	b29b      	uxth	r3, r3
 8003948:	b2da      	uxtb	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003950:	69fa      	ldr	r2, [r7, #28]
 8003952:	69b9      	ldr	r1, [r7, #24]
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 f883 	bl	8003a60 <I2C_WaitOnTXISFlagUntilTimeout>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e012      	b.n	800398a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003964:	893b      	ldrh	r3, [r7, #8]
 8003966:	b2da      	uxtb	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	2200      	movs	r2, #0
 8003976:	2140      	movs	r1, #64	; 0x40
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 f831 	bl	80039e0 <I2C_WaitOnFlagUntilTimeout>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e000      	b.n	800398a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	80002000 	.word	0x80002000

08003998 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d103      	bne.n	80039b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2200      	movs	r2, #0
 80039b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d007      	beq.n	80039d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699a      	ldr	r2, [r3, #24]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f042 0201 	orr.w	r2, r2, #1
 80039d2:	619a      	str	r2, [r3, #24]
  }
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	603b      	str	r3, [r7, #0]
 80039ec:	4613      	mov	r3, r2
 80039ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039f0:	e022      	b.n	8003a38 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f8:	d01e      	beq.n	8003a38 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039fa:	f7fe fcf9 	bl	80023f0 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d302      	bcc.n	8003a10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d113      	bne.n	8003a38 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a14:	f043 0220 	orr.w	r2, r3, #32
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e00f      	b.n	8003a58 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699a      	ldr	r2, [r3, #24]
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	4013      	ands	r3, r2
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	bf0c      	ite	eq
 8003a48:	2301      	moveq	r3, #1
 8003a4a:	2300      	movne	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	461a      	mov	r2, r3
 8003a50:	79fb      	ldrb	r3, [r7, #7]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d0cd      	beq.n	80039f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a6c:	e02c      	b.n	8003ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	68b9      	ldr	r1, [r7, #8]
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 f8dc 	bl	8003c30 <I2C_IsAcknowledgeFailed>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e02a      	b.n	8003ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a88:	d01e      	beq.n	8003ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a8a:	f7fe fcb1 	bl	80023f0 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	68ba      	ldr	r2, [r7, #8]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d302      	bcc.n	8003aa0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d113      	bne.n	8003ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa4:	f043 0220 	orr.w	r2, r3, #32
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e007      	b.n	8003ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d1cb      	bne.n	8003a6e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003aec:	e028      	b.n	8003b40 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	68b9      	ldr	r1, [r7, #8]
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 f89c 	bl	8003c30 <I2C_IsAcknowledgeFailed>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e026      	b.n	8003b50 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b02:	f7fe fc75 	bl	80023f0 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d302      	bcc.n	8003b18 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d113      	bne.n	8003b40 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1c:	f043 0220 	orr.w	r2, r3, #32
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2220      	movs	r2, #32
 8003b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e007      	b.n	8003b50 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	f003 0320 	and.w	r3, r3, #32
 8003b4a:	2b20      	cmp	r3, #32
 8003b4c:	d1cf      	bne.n	8003aee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b64:	e055      	b.n	8003c12 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	68b9      	ldr	r1, [r7, #8]
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 f860 	bl	8003c30 <I2C_IsAcknowledgeFailed>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e053      	b.n	8003c22 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	f003 0320 	and.w	r3, r3, #32
 8003b84:	2b20      	cmp	r3, #32
 8003b86:	d129      	bne.n	8003bdc <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d105      	bne.n	8003ba2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	e03f      	b.n	8003c22 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6859      	ldr	r1, [r3, #4]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	4b1d      	ldr	r3, [pc, #116]	; (8003c2c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003bb6:	400b      	ands	r3, r1
 8003bb8:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e022      	b.n	8003c22 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bdc:	f7fe fc08 	bl	80023f0 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d302      	bcc.n	8003bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10f      	bne.n	8003c12 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf6:	f043 0220 	orr.w	r2, r3, #32
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2220      	movs	r2, #32
 8003c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e007      	b.n	8003c22 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d1a2      	bne.n	8003b66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	fe00e800 	.word	0xfe00e800

08003c30 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	f003 0310 	and.w	r3, r3, #16
 8003c46:	2b10      	cmp	r3, #16
 8003c48:	d151      	bne.n	8003cee <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c4a:	e022      	b.n	8003c92 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c52:	d01e      	beq.n	8003c92 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c54:	f7fe fbcc 	bl	80023f0 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d302      	bcc.n	8003c6a <I2C_IsAcknowledgeFailed+0x3a>
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d113      	bne.n	8003c92 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6e:	f043 0220 	orr.w	r2, r3, #32
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e02e      	b.n	8003cf0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	f003 0320 	and.w	r3, r3, #32
 8003c9c:	2b20      	cmp	r3, #32
 8003c9e:	d1d5      	bne.n	8003c4c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2210      	movs	r2, #16
 8003ca6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2220      	movs	r2, #32
 8003cae:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f7ff fe71 	bl	8003998 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6859      	ldr	r1, [r3, #4]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	4b0d      	ldr	r3, [pc, #52]	; (8003cf8 <I2C_IsAcknowledgeFailed+0xc8>)
 8003cc2:	400b      	ands	r3, r1
 8003cc4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cca:	f043 0204 	orr.w	r2, r3, #4
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e000      	b.n	8003cf0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	fe00e800 	.word	0xfe00e800

08003cfc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	607b      	str	r3, [r7, #4]
 8003d06:	460b      	mov	r3, r1
 8003d08:	817b      	strh	r3, [r7, #10]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	0d5b      	lsrs	r3, r3, #21
 8003d18:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003d1c:	4b0d      	ldr	r3, [pc, #52]	; (8003d54 <I2C_TransferConfig+0x58>)
 8003d1e:	430b      	orrs	r3, r1
 8003d20:	43db      	mvns	r3, r3
 8003d22:	ea02 0103 	and.w	r1, r2, r3
 8003d26:	897b      	ldrh	r3, [r7, #10]
 8003d28:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d2c:	7a7b      	ldrb	r3, [r7, #9]
 8003d2e:	041b      	lsls	r3, r3, #16
 8003d30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003d34:	431a      	orrs	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	431a      	orrs	r2, r3
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003d46:	bf00      	nop
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	03ff63ff 	.word	0x03ff63ff

08003d58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b20      	cmp	r3, #32
 8003d6c:	d138      	bne.n	8003de0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d101      	bne.n	8003d7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d78:	2302      	movs	r3, #2
 8003d7a:	e032      	b.n	8003de2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2224      	movs	r2, #36	; 0x24
 8003d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 0201 	bic.w	r2, r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003daa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6819      	ldr	r1, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0201 	orr.w	r2, r2, #1
 8003dca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	e000      	b.n	8003de2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003de0:	2302      	movs	r3, #2
  }
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b085      	sub	sp, #20
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b20      	cmp	r3, #32
 8003e02:	d139      	bne.n	8003e78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d101      	bne.n	8003e12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e0e:	2302      	movs	r3, #2
 8003e10:	e033      	b.n	8003e7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2224      	movs	r2, #36	; 0x24
 8003e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0201 	bic.w	r2, r2, #1
 8003e30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	021b      	lsls	r3, r3, #8
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f042 0201 	orr.w	r2, r2, #1
 8003e62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e74:	2300      	movs	r3, #0
 8003e76:	e000      	b.n	8003e7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e78:	2302      	movs	r3, #2
  }
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e88:	b08f      	sub	sp, #60	; 0x3c
 8003e8a:	af0a      	add	r7, sp, #40	; 0x28
 8003e8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e116      	b.n	80040c6 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d106      	bne.n	8003eb8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7fd ffa4 	bl	8001e00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2203      	movs	r2, #3
 8003ebc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d102      	bne.n	8003ed2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f002 fba6 	bl	8006628 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	603b      	str	r3, [r7, #0]
 8003ee2:	687e      	ldr	r6, [r7, #4]
 8003ee4:	466d      	mov	r5, sp
 8003ee6:	f106 0410 	add.w	r4, r6, #16
 8003eea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003eec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003eee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ef0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ef2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ef6:	e885 0003 	stmia.w	r5, {r0, r1}
 8003efa:	1d33      	adds	r3, r6, #4
 8003efc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003efe:	6838      	ldr	r0, [r7, #0]
 8003f00:	f002 fb40 	bl	8006584 <USB_CoreInit>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d005      	beq.n	8003f16 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2202      	movs	r2, #2
 8003f0e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e0d7      	b.n	80040c6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f002 fb94 	bl	800664a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f22:	2300      	movs	r3, #0
 8003f24:	73fb      	strb	r3, [r7, #15]
 8003f26:	e04a      	b.n	8003fbe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f28:	7bfa      	ldrb	r2, [r7, #15]
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	1a9b      	subs	r3, r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	333d      	adds	r3, #61	; 0x3d
 8003f38:	2201      	movs	r2, #1
 8003f3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f3c:	7bfa      	ldrb	r2, [r7, #15]
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	4613      	mov	r3, r2
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	1a9b      	subs	r3, r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	333c      	adds	r3, #60	; 0x3c
 8003f4c:	7bfa      	ldrb	r2, [r7, #15]
 8003f4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f50:	7bfa      	ldrb	r2, [r7, #15]
 8003f52:	7bfb      	ldrb	r3, [r7, #15]
 8003f54:	b298      	uxth	r0, r3
 8003f56:	6879      	ldr	r1, [r7, #4]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	1a9b      	subs	r3, r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	440b      	add	r3, r1
 8003f62:	3342      	adds	r3, #66	; 0x42
 8003f64:	4602      	mov	r2, r0
 8003f66:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f68:	7bfa      	ldrb	r2, [r7, #15]
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	1a9b      	subs	r3, r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	333f      	adds	r3, #63	; 0x3f
 8003f78:	2200      	movs	r2, #0
 8003f7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f7c:	7bfa      	ldrb	r2, [r7, #15]
 8003f7e:	6879      	ldr	r1, [r7, #4]
 8003f80:	4613      	mov	r3, r2
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	1a9b      	subs	r3, r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	440b      	add	r3, r1
 8003f8a:	3344      	adds	r3, #68	; 0x44
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f90:	7bfa      	ldrb	r2, [r7, #15]
 8003f92:	6879      	ldr	r1, [r7, #4]
 8003f94:	4613      	mov	r3, r2
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	1a9b      	subs	r3, r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	3348      	adds	r3, #72	; 0x48
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003fa4:	7bfa      	ldrb	r2, [r7, #15]
 8003fa6:	6879      	ldr	r1, [r7, #4]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	1a9b      	subs	r3, r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	440b      	add	r3, r1
 8003fb2:	3350      	adds	r3, #80	; 0x50
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fb8:	7bfb      	ldrb	r3, [r7, #15]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	73fb      	strb	r3, [r7, #15]
 8003fbe:	7bfa      	ldrb	r2, [r7, #15]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d3af      	bcc.n	8003f28 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fc8:	2300      	movs	r3, #0
 8003fca:	73fb      	strb	r3, [r7, #15]
 8003fcc:	e044      	b.n	8004058 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003fce:	7bfa      	ldrb	r2, [r7, #15]
 8003fd0:	6879      	ldr	r1, [r7, #4]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	00db      	lsls	r3, r3, #3
 8003fd6:	1a9b      	subs	r3, r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	440b      	add	r3, r1
 8003fdc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003fe4:	7bfa      	ldrb	r2, [r7, #15]
 8003fe6:	6879      	ldr	r1, [r7, #4]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	1a9b      	subs	r3, r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	440b      	add	r3, r1
 8003ff2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003ff6:	7bfa      	ldrb	r2, [r7, #15]
 8003ff8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ffa:	7bfa      	ldrb	r2, [r7, #15]
 8003ffc:	6879      	ldr	r1, [r7, #4]
 8003ffe:	4613      	mov	r3, r2
 8004000:	00db      	lsls	r3, r3, #3
 8004002:	1a9b      	subs	r3, r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	440b      	add	r3, r1
 8004008:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800400c:	2200      	movs	r2, #0
 800400e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004010:	7bfa      	ldrb	r2, [r7, #15]
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	4613      	mov	r3, r2
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	1a9b      	subs	r3, r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004022:	2200      	movs	r2, #0
 8004024:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004026:	7bfa      	ldrb	r2, [r7, #15]
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	4613      	mov	r3, r2
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	1a9b      	subs	r3, r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	440b      	add	r3, r1
 8004034:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800403c:	7bfa      	ldrb	r2, [r7, #15]
 800403e:	6879      	ldr	r1, [r7, #4]
 8004040:	4613      	mov	r3, r2
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	1a9b      	subs	r3, r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	440b      	add	r3, r1
 800404a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800404e:	2200      	movs	r2, #0
 8004050:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004052:	7bfb      	ldrb	r3, [r7, #15]
 8004054:	3301      	adds	r3, #1
 8004056:	73fb      	strb	r3, [r7, #15]
 8004058:	7bfa      	ldrb	r2, [r7, #15]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	429a      	cmp	r2, r3
 8004060:	d3b5      	bcc.n	8003fce <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	603b      	str	r3, [r7, #0]
 8004068:	687e      	ldr	r6, [r7, #4]
 800406a:	466d      	mov	r5, sp
 800406c:	f106 0410 	add.w	r4, r6, #16
 8004070:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004072:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004074:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004076:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004078:	e894 0003 	ldmia.w	r4, {r0, r1}
 800407c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004080:	1d33      	adds	r3, r6, #4
 8004082:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004084:	6838      	ldr	r0, [r7, #0]
 8004086:	f002 fb0b 	bl	80066a0 <USB_DevInit>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d005      	beq.n	800409c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2202      	movs	r2, #2
 8004094:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e014      	b.n	80040c6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d102      	bne.n	80040ba <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 f80a 	bl	80040ce <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f002 fc9b 	bl	80069fa <USB_DevDisconnect>

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040ce <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b085      	sub	sp, #20
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004100:	f043 0303 	orr.w	r3, r3, #3
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
	...

08004118 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800411c:	4b05      	ldr	r3, [pc, #20]	; (8004134 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a04      	ldr	r2, [pc, #16]	; (8004134 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004126:	6013      	str	r3, [r2, #0]
}
 8004128:	bf00      	nop
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	40007000 	.word	0x40007000

08004138 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800413c:	4b04      	ldr	r3, [pc, #16]	; (8004150 <HAL_PWREx_GetVoltageRange+0x18>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004144:	4618      	mov	r0, r3
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	40007000 	.word	0x40007000

08004154 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004162:	d130      	bne.n	80041c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004164:	4b23      	ldr	r3, [pc, #140]	; (80041f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800416c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004170:	d038      	beq.n	80041e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004172:	4b20      	ldr	r3, [pc, #128]	; (80041f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800417a:	4a1e      	ldr	r2, [pc, #120]	; (80041f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800417c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004180:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004182:	4b1d      	ldr	r3, [pc, #116]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2232      	movs	r2, #50	; 0x32
 8004188:	fb02 f303 	mul.w	r3, r2, r3
 800418c:	4a1b      	ldr	r2, [pc, #108]	; (80041fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800418e:	fba2 2303 	umull	r2, r3, r2, r3
 8004192:	0c9b      	lsrs	r3, r3, #18
 8004194:	3301      	adds	r3, #1
 8004196:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004198:	e002      	b.n	80041a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	3b01      	subs	r3, #1
 800419e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041a0:	4b14      	ldr	r3, [pc, #80]	; (80041f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ac:	d102      	bne.n	80041b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1f2      	bne.n	800419a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041b4:	4b0f      	ldr	r3, [pc, #60]	; (80041f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041c0:	d110      	bne.n	80041e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e00f      	b.n	80041e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80041c6:	4b0b      	ldr	r3, [pc, #44]	; (80041f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d2:	d007      	beq.n	80041e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80041d4:	4b07      	ldr	r3, [pc, #28]	; (80041f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041dc:	4a05      	ldr	r2, [pc, #20]	; (80041f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	40007000 	.word	0x40007000
 80041f8:	200001c8 	.word	0x200001c8
 80041fc:	431bde83 	.word	0x431bde83

08004200 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004204:	4b05      	ldr	r3, [pc, #20]	; (800421c <HAL_PWREx_EnableVddUSB+0x1c>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	4a04      	ldr	r2, [pc, #16]	; (800421c <HAL_PWREx_EnableVddUSB+0x1c>)
 800420a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800420e:	6053      	str	r3, [r2, #4]
}
 8004210:	bf00      	nop
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40007000 	.word	0x40007000

08004220 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af02      	add	r7, sp, #8
 8004226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004228:	f7fe f8e2 	bl	80023f0 <HAL_GetTick>
 800422c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d101      	bne.n	8004238 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e06f      	b.n	8004318 <HAL_QSPI_Init+0xf8>
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b01      	cmp	r3, #1
 8004242:	d101      	bne.n	8004248 <HAL_QSPI_Init+0x28>
 8004244:	2302      	movs	r3, #2
 8004246:	e067      	b.n	8004318 <HAL_QSPI_Init+0xf8>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10b      	bne.n	8004274 <HAL_QSPI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f7fd fccd 	bl	8001c04 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800426a:	f241 3188 	movw	r1, #5000	; 0x1388
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f858 	bl	8004324 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	3b01      	subs	r3, #1
 8004284:	021a      	lsls	r2, r3, #8
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	2120      	movs	r1, #32
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f850 	bl	8004340 <QSPI_WaitFlagStateUntilTimeout>
 80042a0:	4603      	mov	r3, r0
 80042a2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80042a4:	7afb      	ldrb	r3, [r7, #11]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d131      	bne.n	800430e <HAL_QSPI_Init+0xee>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80042b4:	f023 0310 	bic.w	r3, r3, #16
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6852      	ldr	r2, [r2, #4]
 80042bc:	0611      	lsls	r1, r2, #24
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	68d2      	ldr	r2, [r2, #12]
 80042c2:	4311      	orrs	r1, r2
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6812      	ldr	r2, [r2, #0]
 80042c8:	430b      	orrs	r3, r1
 80042ca:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	4b13      	ldr	r3, [pc, #76]	; (8004320 <HAL_QSPI_Init+0x100>)
 80042d4:	4013      	ands	r3, r2
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6912      	ldr	r2, [r2, #16]
 80042da:	0411      	lsls	r1, r2, #16
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6952      	ldr	r2, [r2, #20]
 80042e0:	4311      	orrs	r1, r2
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	6992      	ldr	r2, [r2, #24]
 80042e6:	4311      	orrs	r1, r2
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6812      	ldr	r2, [r2, #0]
 80042ec:	430b      	orrs	r3, r1
 80042ee:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f042 0201 	orr.w	r2, r2, #1
 80042fe:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8004316:	7afb      	ldrb	r3, [r7, #11]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	ffe0f8fe 	.word	0xffe0f8fe

08004324 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	603b      	str	r3, [r7, #0]
 800434c:	4613      	mov	r3, r2
 800434e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004350:	e01a      	b.n	8004388 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004358:	d016      	beq.n	8004388 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800435a:	f7fe f849 	bl	80023f0 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	429a      	cmp	r2, r3
 8004368:	d302      	bcc.n	8004370 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10b      	bne.n	8004388 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2204      	movs	r2, #4
 8004374:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437c:	f043 0201 	orr.w	r2, r3, #1
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e00e      	b.n	80043a6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689a      	ldr	r2, [r3, #8]
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	4013      	ands	r3, r2
 8004392:	2b00      	cmp	r3, #0
 8004394:	bf14      	ite	ne
 8004396:	2301      	movne	r3, #1
 8004398:	2300      	moveq	r3, #0
 800439a:	b2db      	uxtb	r3, r3
 800439c:	461a      	mov	r2, r3
 800439e:	79fb      	ldrb	r3, [r7, #7]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d1d6      	bne.n	8004352 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
	...

080043b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b088      	sub	sp, #32
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e3d4      	b.n	8004b6c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043c2:	4ba1      	ldr	r3, [pc, #644]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 030c 	and.w	r3, r3, #12
 80043ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043cc:	4b9e      	ldr	r3, [pc, #632]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f003 0303 	and.w	r3, r3, #3
 80043d4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0310 	and.w	r3, r3, #16
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f000 80e4 	beq.w	80045ac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d007      	beq.n	80043fa <HAL_RCC_OscConfig+0x4a>
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	2b0c      	cmp	r3, #12
 80043ee:	f040 808b 	bne.w	8004508 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	f040 8087 	bne.w	8004508 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043fa:	4b93      	ldr	r3, [pc, #588]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d005      	beq.n	8004412 <HAL_RCC_OscConfig+0x62>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e3ac      	b.n	8004b6c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1a      	ldr	r2, [r3, #32]
 8004416:	4b8c      	ldr	r3, [pc, #560]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	d004      	beq.n	800442c <HAL_RCC_OscConfig+0x7c>
 8004422:	4b89      	ldr	r3, [pc, #548]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800442a:	e005      	b.n	8004438 <HAL_RCC_OscConfig+0x88>
 800442c:	4b86      	ldr	r3, [pc, #536]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 800442e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004432:	091b      	lsrs	r3, r3, #4
 8004434:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004438:	4293      	cmp	r3, r2
 800443a:	d223      	bcs.n	8004484 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	4618      	mov	r0, r3
 8004442:	f000 fd3f 	bl	8004ec4 <RCC_SetFlashLatencyFromMSIRange>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e38d      	b.n	8004b6c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004450:	4b7d      	ldr	r3, [pc, #500]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a7c      	ldr	r2, [pc, #496]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004456:	f043 0308 	orr.w	r3, r3, #8
 800445a:	6013      	str	r3, [r2, #0]
 800445c:	4b7a      	ldr	r3, [pc, #488]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	4977      	ldr	r1, [pc, #476]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 800446a:	4313      	orrs	r3, r2
 800446c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800446e:	4b76      	ldr	r3, [pc, #472]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	021b      	lsls	r3, r3, #8
 800447c:	4972      	ldr	r1, [pc, #456]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 800447e:	4313      	orrs	r3, r2
 8004480:	604b      	str	r3, [r1, #4]
 8004482:	e025      	b.n	80044d0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004484:	4b70      	ldr	r3, [pc, #448]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a6f      	ldr	r2, [pc, #444]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 800448a:	f043 0308 	orr.w	r3, r3, #8
 800448e:	6013      	str	r3, [r2, #0]
 8004490:	4b6d      	ldr	r3, [pc, #436]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	496a      	ldr	r1, [pc, #424]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044a2:	4b69      	ldr	r3, [pc, #420]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	021b      	lsls	r3, r3, #8
 80044b0:	4965      	ldr	r1, [pc, #404]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d109      	bne.n	80044d0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f000 fcff 	bl	8004ec4 <RCC_SetFlashLatencyFromMSIRange>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e34d      	b.n	8004b6c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044d0:	f000 fc36 	bl	8004d40 <HAL_RCC_GetSysClockFreq>
 80044d4:	4601      	mov	r1, r0
 80044d6:	4b5c      	ldr	r3, [pc, #368]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	091b      	lsrs	r3, r3, #4
 80044dc:	f003 030f 	and.w	r3, r3, #15
 80044e0:	4a5a      	ldr	r2, [pc, #360]	; (800464c <HAL_RCC_OscConfig+0x29c>)
 80044e2:	5cd3      	ldrb	r3, [r2, r3]
 80044e4:	f003 031f 	and.w	r3, r3, #31
 80044e8:	fa21 f303 	lsr.w	r3, r1, r3
 80044ec:	4a58      	ldr	r2, [pc, #352]	; (8004650 <HAL_RCC_OscConfig+0x2a0>)
 80044ee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80044f0:	4b58      	ldr	r3, [pc, #352]	; (8004654 <HAL_RCC_OscConfig+0x2a4>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7fd ff2f 	bl	8002358 <HAL_InitTick>
 80044fa:	4603      	mov	r3, r0
 80044fc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80044fe:	7bfb      	ldrb	r3, [r7, #15]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d052      	beq.n	80045aa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004504:	7bfb      	ldrb	r3, [r7, #15]
 8004506:	e331      	b.n	8004b6c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d032      	beq.n	8004576 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004510:	4b4d      	ldr	r3, [pc, #308]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a4c      	ldr	r2, [pc, #304]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004516:	f043 0301 	orr.w	r3, r3, #1
 800451a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800451c:	f7fd ff68 	bl	80023f0 <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004524:	f7fd ff64 	bl	80023f0 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e31a      	b.n	8004b6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004536:	4b44      	ldr	r3, [pc, #272]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0f0      	beq.n	8004524 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004542:	4b41      	ldr	r3, [pc, #260]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a40      	ldr	r2, [pc, #256]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004548:	f043 0308 	orr.w	r3, r3, #8
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	4b3e      	ldr	r3, [pc, #248]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	493b      	ldr	r1, [pc, #236]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 800455c:	4313      	orrs	r3, r2
 800455e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004560:	4b39      	ldr	r3, [pc, #228]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	69db      	ldr	r3, [r3, #28]
 800456c:	021b      	lsls	r3, r3, #8
 800456e:	4936      	ldr	r1, [pc, #216]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004570:	4313      	orrs	r3, r2
 8004572:	604b      	str	r3, [r1, #4]
 8004574:	e01a      	b.n	80045ac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004576:	4b34      	ldr	r3, [pc, #208]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a33      	ldr	r2, [pc, #204]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 800457c:	f023 0301 	bic.w	r3, r3, #1
 8004580:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004582:	f7fd ff35 	bl	80023f0 <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004588:	e008      	b.n	800459c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800458a:	f7fd ff31 	bl	80023f0 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e2e7      	b.n	8004b6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800459c:	4b2a      	ldr	r3, [pc, #168]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1f0      	bne.n	800458a <HAL_RCC_OscConfig+0x1da>
 80045a8:	e000      	b.n	80045ac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045aa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d074      	beq.n	80046a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	2b08      	cmp	r3, #8
 80045bc:	d005      	beq.n	80045ca <HAL_RCC_OscConfig+0x21a>
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	2b0c      	cmp	r3, #12
 80045c2:	d10e      	bne.n	80045e2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	2b03      	cmp	r3, #3
 80045c8:	d10b      	bne.n	80045e2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ca:	4b1f      	ldr	r3, [pc, #124]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d064      	beq.n	80046a0 <HAL_RCC_OscConfig+0x2f0>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d160      	bne.n	80046a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e2c4      	b.n	8004b6c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ea:	d106      	bne.n	80045fa <HAL_RCC_OscConfig+0x24a>
 80045ec:	4b16      	ldr	r3, [pc, #88]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a15      	ldr	r2, [pc, #84]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 80045f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f6:	6013      	str	r3, [r2, #0]
 80045f8:	e01d      	b.n	8004636 <HAL_RCC_OscConfig+0x286>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004602:	d10c      	bne.n	800461e <HAL_RCC_OscConfig+0x26e>
 8004604:	4b10      	ldr	r3, [pc, #64]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a0f      	ldr	r2, [pc, #60]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 800460a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800460e:	6013      	str	r3, [r2, #0]
 8004610:	4b0d      	ldr	r3, [pc, #52]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a0c      	ldr	r2, [pc, #48]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800461a:	6013      	str	r3, [r2, #0]
 800461c:	e00b      	b.n	8004636 <HAL_RCC_OscConfig+0x286>
 800461e:	4b0a      	ldr	r3, [pc, #40]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a09      	ldr	r2, [pc, #36]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004628:	6013      	str	r3, [r2, #0]
 800462a:	4b07      	ldr	r3, [pc, #28]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a06      	ldr	r2, [pc, #24]	; (8004648 <HAL_RCC_OscConfig+0x298>)
 8004630:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004634:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d01c      	beq.n	8004678 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463e:	f7fd fed7 	bl	80023f0 <HAL_GetTick>
 8004642:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004644:	e011      	b.n	800466a <HAL_RCC_OscConfig+0x2ba>
 8004646:	bf00      	nop
 8004648:	40021000 	.word	0x40021000
 800464c:	08011530 	.word	0x08011530
 8004650:	200001c8 	.word	0x200001c8
 8004654:	200001dc 	.word	0x200001dc
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004658:	f7fd feca 	bl	80023f0 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b64      	cmp	r3, #100	; 0x64
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e280      	b.n	8004b6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800466a:	4baf      	ldr	r3, [pc, #700]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0f0      	beq.n	8004658 <HAL_RCC_OscConfig+0x2a8>
 8004676:	e014      	b.n	80046a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004678:	f7fd feba 	bl	80023f0 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004680:	f7fd feb6 	bl	80023f0 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b64      	cmp	r3, #100	; 0x64
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e26c      	b.n	8004b6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004692:	4ba5      	ldr	r3, [pc, #660]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1f0      	bne.n	8004680 <HAL_RCC_OscConfig+0x2d0>
 800469e:	e000      	b.n	80046a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d060      	beq.n	8004770 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	2b04      	cmp	r3, #4
 80046b2:	d005      	beq.n	80046c0 <HAL_RCC_OscConfig+0x310>
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	2b0c      	cmp	r3, #12
 80046b8:	d119      	bne.n	80046ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d116      	bne.n	80046ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046c0:	4b99      	ldr	r3, [pc, #612]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d005      	beq.n	80046d8 <HAL_RCC_OscConfig+0x328>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e249      	b.n	8004b6c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046d8:	4b93      	ldr	r3, [pc, #588]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	061b      	lsls	r3, r3, #24
 80046e6:	4990      	ldr	r1, [pc, #576]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046ec:	e040      	b.n	8004770 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d023      	beq.n	800473e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046f6:	4b8c      	ldr	r3, [pc, #560]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a8b      	ldr	r2, [pc, #556]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 80046fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004702:	f7fd fe75 	bl	80023f0 <HAL_GetTick>
 8004706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004708:	e008      	b.n	800471c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800470a:	f7fd fe71 	bl	80023f0 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e227      	b.n	8004b6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800471c:	4b82      	ldr	r3, [pc, #520]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004724:	2b00      	cmp	r3, #0
 8004726:	d0f0      	beq.n	800470a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004728:	4b7f      	ldr	r3, [pc, #508]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	061b      	lsls	r3, r3, #24
 8004736:	497c      	ldr	r1, [pc, #496]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 8004738:	4313      	orrs	r3, r2
 800473a:	604b      	str	r3, [r1, #4]
 800473c:	e018      	b.n	8004770 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800473e:	4b7a      	ldr	r3, [pc, #488]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a79      	ldr	r2, [pc, #484]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 8004744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474a:	f7fd fe51 	bl	80023f0 <HAL_GetTick>
 800474e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004752:	f7fd fe4d 	bl	80023f0 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e203      	b.n	8004b6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004764:	4b70      	ldr	r3, [pc, #448]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1f0      	bne.n	8004752 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0308 	and.w	r3, r3, #8
 8004778:	2b00      	cmp	r3, #0
 800477a:	d03c      	beq.n	80047f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d01c      	beq.n	80047be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004784:	4b68      	ldr	r3, [pc, #416]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 8004786:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800478a:	4a67      	ldr	r2, [pc, #412]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 800478c:	f043 0301 	orr.w	r3, r3, #1
 8004790:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004794:	f7fd fe2c 	bl	80023f0 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800479c:	f7fd fe28 	bl	80023f0 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e1de      	b.n	8004b6c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047ae:	4b5e      	ldr	r3, [pc, #376]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 80047b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0ef      	beq.n	800479c <HAL_RCC_OscConfig+0x3ec>
 80047bc:	e01b      	b.n	80047f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047be:	4b5a      	ldr	r3, [pc, #360]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 80047c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047c4:	4a58      	ldr	r2, [pc, #352]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 80047c6:	f023 0301 	bic.w	r3, r3, #1
 80047ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ce:	f7fd fe0f 	bl	80023f0 <HAL_GetTick>
 80047d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047d4:	e008      	b.n	80047e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047d6:	f7fd fe0b 	bl	80023f0 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e1c1      	b.n	8004b6c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047e8:	4b4f      	ldr	r3, [pc, #316]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 80047ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1ef      	bne.n	80047d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0304 	and.w	r3, r3, #4
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f000 80a6 	beq.w	8004950 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004804:	2300      	movs	r3, #0
 8004806:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004808:	4b47      	ldr	r3, [pc, #284]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 800480a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10d      	bne.n	8004830 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004814:	4b44      	ldr	r3, [pc, #272]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 8004816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004818:	4a43      	ldr	r2, [pc, #268]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 800481a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800481e:	6593      	str	r3, [r2, #88]	; 0x58
 8004820:	4b41      	ldr	r3, [pc, #260]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 8004822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004828:	60bb      	str	r3, [r7, #8]
 800482a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800482c:	2301      	movs	r3, #1
 800482e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004830:	4b3e      	ldr	r3, [pc, #248]	; (800492c <HAL_RCC_OscConfig+0x57c>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004838:	2b00      	cmp	r3, #0
 800483a:	d118      	bne.n	800486e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800483c:	4b3b      	ldr	r3, [pc, #236]	; (800492c <HAL_RCC_OscConfig+0x57c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a3a      	ldr	r2, [pc, #232]	; (800492c <HAL_RCC_OscConfig+0x57c>)
 8004842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004846:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004848:	f7fd fdd2 	bl	80023f0 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004850:	f7fd fdce 	bl	80023f0 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e184      	b.n	8004b6c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004862:	4b32      	ldr	r3, [pc, #200]	; (800492c <HAL_RCC_OscConfig+0x57c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0f0      	beq.n	8004850 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d108      	bne.n	8004888 <HAL_RCC_OscConfig+0x4d8>
 8004876:	4b2c      	ldr	r3, [pc, #176]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 8004878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487c:	4a2a      	ldr	r2, [pc, #168]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 800487e:	f043 0301 	orr.w	r3, r3, #1
 8004882:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004886:	e024      	b.n	80048d2 <HAL_RCC_OscConfig+0x522>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	2b05      	cmp	r3, #5
 800488e:	d110      	bne.n	80048b2 <HAL_RCC_OscConfig+0x502>
 8004890:	4b25      	ldr	r3, [pc, #148]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 8004892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004896:	4a24      	ldr	r2, [pc, #144]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 8004898:	f043 0304 	orr.w	r3, r3, #4
 800489c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048a0:	4b21      	ldr	r3, [pc, #132]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 80048a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a6:	4a20      	ldr	r2, [pc, #128]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 80048a8:	f043 0301 	orr.w	r3, r3, #1
 80048ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048b0:	e00f      	b.n	80048d2 <HAL_RCC_OscConfig+0x522>
 80048b2:	4b1d      	ldr	r3, [pc, #116]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 80048b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b8:	4a1b      	ldr	r2, [pc, #108]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 80048ba:	f023 0301 	bic.w	r3, r3, #1
 80048be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048c2:	4b19      	ldr	r3, [pc, #100]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 80048c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c8:	4a17      	ldr	r2, [pc, #92]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 80048ca:	f023 0304 	bic.w	r3, r3, #4
 80048ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d016      	beq.n	8004908 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048da:	f7fd fd89 	bl	80023f0 <HAL_GetTick>
 80048de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048e0:	e00a      	b.n	80048f8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e2:	f7fd fd85 	bl	80023f0 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e139      	b.n	8004b6c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048f8:	4b0b      	ldr	r3, [pc, #44]	; (8004928 <HAL_RCC_OscConfig+0x578>)
 80048fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0ed      	beq.n	80048e2 <HAL_RCC_OscConfig+0x532>
 8004906:	e01a      	b.n	800493e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004908:	f7fd fd72 	bl	80023f0 <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800490e:	e00f      	b.n	8004930 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004910:	f7fd fd6e 	bl	80023f0 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	f241 3288 	movw	r2, #5000	; 0x1388
 800491e:	4293      	cmp	r3, r2
 8004920:	d906      	bls.n	8004930 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e122      	b.n	8004b6c <HAL_RCC_OscConfig+0x7bc>
 8004926:	bf00      	nop
 8004928:	40021000 	.word	0x40021000
 800492c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004930:	4b90      	ldr	r3, [pc, #576]	; (8004b74 <HAL_RCC_OscConfig+0x7c4>)
 8004932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1e8      	bne.n	8004910 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800493e:	7ffb      	ldrb	r3, [r7, #31]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d105      	bne.n	8004950 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004944:	4b8b      	ldr	r3, [pc, #556]	; (8004b74 <HAL_RCC_OscConfig+0x7c4>)
 8004946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004948:	4a8a      	ldr	r2, [pc, #552]	; (8004b74 <HAL_RCC_OscConfig+0x7c4>)
 800494a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800494e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004954:	2b00      	cmp	r3, #0
 8004956:	f000 8108 	beq.w	8004b6a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495e:	2b02      	cmp	r3, #2
 8004960:	f040 80d0 	bne.w	8004b04 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004964:	4b83      	ldr	r3, [pc, #524]	; (8004b74 <HAL_RCC_OscConfig+0x7c4>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f003 0203 	and.w	r2, r3, #3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004974:	429a      	cmp	r2, r3
 8004976:	d130      	bne.n	80049da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004982:	3b01      	subs	r3, #1
 8004984:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004986:	429a      	cmp	r2, r3
 8004988:	d127      	bne.n	80049da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004994:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004996:	429a      	cmp	r2, r3
 8004998:	d11f      	bne.n	80049da <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049a4:	2a07      	cmp	r2, #7
 80049a6:	bf14      	ite	ne
 80049a8:	2201      	movne	r2, #1
 80049aa:	2200      	moveq	r2, #0
 80049ac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d113      	bne.n	80049da <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049bc:	085b      	lsrs	r3, r3, #1
 80049be:	3b01      	subs	r3, #1
 80049c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d109      	bne.n	80049da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d0:	085b      	lsrs	r3, r3, #1
 80049d2:	3b01      	subs	r3, #1
 80049d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d06e      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	2b0c      	cmp	r3, #12
 80049de:	d069      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80049e0:	4b64      	ldr	r3, [pc, #400]	; (8004b74 <HAL_RCC_OscConfig+0x7c4>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d105      	bne.n	80049f8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80049ec:	4b61      	ldr	r3, [pc, #388]	; (8004b74 <HAL_RCC_OscConfig+0x7c4>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e0b7      	b.n	8004b6c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80049fc:	4b5d      	ldr	r3, [pc, #372]	; (8004b74 <HAL_RCC_OscConfig+0x7c4>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a5c      	ldr	r2, [pc, #368]	; (8004b74 <HAL_RCC_OscConfig+0x7c4>)
 8004a02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a06:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a08:	f7fd fcf2 	bl	80023f0 <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a0e:	e008      	b.n	8004a22 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a10:	f7fd fcee 	bl	80023f0 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e0a4      	b.n	8004b6c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a22:	4b54      	ldr	r3, [pc, #336]	; (8004b74 <HAL_RCC_OscConfig+0x7c4>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1f0      	bne.n	8004a10 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a2e:	4b51      	ldr	r3, [pc, #324]	; (8004b74 <HAL_RCC_OscConfig+0x7c4>)
 8004a30:	68da      	ldr	r2, [r3, #12]
 8004a32:	4b51      	ldr	r3, [pc, #324]	; (8004b78 <HAL_RCC_OscConfig+0x7c8>)
 8004a34:	4013      	ands	r3, r2
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a3e:	3a01      	subs	r2, #1
 8004a40:	0112      	lsls	r2, r2, #4
 8004a42:	4311      	orrs	r1, r2
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a48:	0212      	lsls	r2, r2, #8
 8004a4a:	4311      	orrs	r1, r2
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a50:	0852      	lsrs	r2, r2, #1
 8004a52:	3a01      	subs	r2, #1
 8004a54:	0552      	lsls	r2, r2, #21
 8004a56:	4311      	orrs	r1, r2
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a5c:	0852      	lsrs	r2, r2, #1
 8004a5e:	3a01      	subs	r2, #1
 8004a60:	0652      	lsls	r2, r2, #25
 8004a62:	4311      	orrs	r1, r2
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a68:	0912      	lsrs	r2, r2, #4
 8004a6a:	0452      	lsls	r2, r2, #17
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	4941      	ldr	r1, [pc, #260]	; (8004b74 <HAL_RCC_OscConfig+0x7c4>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a74:	4b3f      	ldr	r3, [pc, #252]	; (8004b74 <HAL_RCC_OscConfig+0x7c4>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a3e      	ldr	r2, [pc, #248]	; (8004b74 <HAL_RCC_OscConfig+0x7c4>)
 8004a7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a7e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a80:	4b3c      	ldr	r3, [pc, #240]	; (8004b74 <HAL_RCC_OscConfig+0x7c4>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	4a3b      	ldr	r2, [pc, #236]	; (8004b74 <HAL_RCC_OscConfig+0x7c4>)
 8004a86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a8a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a8c:	f7fd fcb0 	bl	80023f0 <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a94:	f7fd fcac 	bl	80023f0 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e062      	b.n	8004b6c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aa6:	4b33      	ldr	r3, [pc, #204]	; (8004b74 <HAL_RCC_OscConfig+0x7c4>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0f0      	beq.n	8004a94 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ab2:	e05a      	b.n	8004b6a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e059      	b.n	8004b6c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ab8:	4b2e      	ldr	r3, [pc, #184]	; (8004b74 <HAL_RCC_OscConfig+0x7c4>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d152      	bne.n	8004b6a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004ac4:	4b2b      	ldr	r3, [pc, #172]	; (8004b74 <HAL_RCC_OscConfig+0x7c4>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a2a      	ldr	r2, [pc, #168]	; (8004b74 <HAL_RCC_OscConfig+0x7c4>)
 8004aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ace:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ad0:	4b28      	ldr	r3, [pc, #160]	; (8004b74 <HAL_RCC_OscConfig+0x7c4>)
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	4a27      	ldr	r2, [pc, #156]	; (8004b74 <HAL_RCC_OscConfig+0x7c4>)
 8004ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ada:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004adc:	f7fd fc88 	bl	80023f0 <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae4:	f7fd fc84 	bl	80023f0 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e03a      	b.n	8004b6c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004af6:	4b1f      	ldr	r3, [pc, #124]	; (8004b74 <HAL_RCC_OscConfig+0x7c4>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d0f0      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x734>
 8004b02:	e032      	b.n	8004b6a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	2b0c      	cmp	r3, #12
 8004b08:	d02d      	beq.n	8004b66 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b0a:	4b1a      	ldr	r3, [pc, #104]	; (8004b74 <HAL_RCC_OscConfig+0x7c4>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a19      	ldr	r2, [pc, #100]	; (8004b74 <HAL_RCC_OscConfig+0x7c4>)
 8004b10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b14:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004b16:	4b17      	ldr	r3, [pc, #92]	; (8004b74 <HAL_RCC_OscConfig+0x7c4>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d105      	bne.n	8004b2e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004b22:	4b14      	ldr	r3, [pc, #80]	; (8004b74 <HAL_RCC_OscConfig+0x7c4>)
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	4a13      	ldr	r2, [pc, #76]	; (8004b74 <HAL_RCC_OscConfig+0x7c4>)
 8004b28:	f023 0303 	bic.w	r3, r3, #3
 8004b2c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004b2e:	4b11      	ldr	r3, [pc, #68]	; (8004b74 <HAL_RCC_OscConfig+0x7c4>)
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	4a10      	ldr	r2, [pc, #64]	; (8004b74 <HAL_RCC_OscConfig+0x7c4>)
 8004b34:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004b38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b3c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3e:	f7fd fc57 	bl	80023f0 <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b44:	e008      	b.n	8004b58 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b46:	f7fd fc53 	bl	80023f0 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d901      	bls.n	8004b58 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e009      	b.n	8004b6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b58:	4b06      	ldr	r3, [pc, #24]	; (8004b74 <HAL_RCC_OscConfig+0x7c4>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1f0      	bne.n	8004b46 <HAL_RCC_OscConfig+0x796>
 8004b64:	e001      	b.n	8004b6a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e000      	b.n	8004b6c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3720      	adds	r7, #32
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	40021000 	.word	0x40021000
 8004b78:	f99d808c 	.word	0xf99d808c

08004b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e0c8      	b.n	8004d22 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b90:	4b66      	ldr	r3, [pc, #408]	; (8004d2c <HAL_RCC_ClockConfig+0x1b0>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d910      	bls.n	8004bc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b9e:	4b63      	ldr	r3, [pc, #396]	; (8004d2c <HAL_RCC_ClockConfig+0x1b0>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f023 0207 	bic.w	r2, r3, #7
 8004ba6:	4961      	ldr	r1, [pc, #388]	; (8004d2c <HAL_RCC_ClockConfig+0x1b0>)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bae:	4b5f      	ldr	r3, [pc, #380]	; (8004d2c <HAL_RCC_ClockConfig+0x1b0>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0307 	and.w	r3, r3, #7
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d001      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e0b0      	b.n	8004d22 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d04c      	beq.n	8004c66 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	2b03      	cmp	r3, #3
 8004bd2:	d107      	bne.n	8004be4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bd4:	4b56      	ldr	r3, [pc, #344]	; (8004d30 <HAL_RCC_ClockConfig+0x1b4>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d121      	bne.n	8004c24 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e09e      	b.n	8004d22 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d107      	bne.n	8004bfc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bec:	4b50      	ldr	r3, [pc, #320]	; (8004d30 <HAL_RCC_ClockConfig+0x1b4>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d115      	bne.n	8004c24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e092      	b.n	8004d22 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d107      	bne.n	8004c14 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c04:	4b4a      	ldr	r3, [pc, #296]	; (8004d30 <HAL_RCC_ClockConfig+0x1b4>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d109      	bne.n	8004c24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e086      	b.n	8004d22 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c14:	4b46      	ldr	r3, [pc, #280]	; (8004d30 <HAL_RCC_ClockConfig+0x1b4>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e07e      	b.n	8004d22 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c24:	4b42      	ldr	r3, [pc, #264]	; (8004d30 <HAL_RCC_ClockConfig+0x1b4>)
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f023 0203 	bic.w	r2, r3, #3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	493f      	ldr	r1, [pc, #252]	; (8004d30 <HAL_RCC_ClockConfig+0x1b4>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c36:	f7fd fbdb 	bl	80023f0 <HAL_GetTick>
 8004c3a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c3c:	e00a      	b.n	8004c54 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c3e:	f7fd fbd7 	bl	80023f0 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e066      	b.n	8004d22 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c54:	4b36      	ldr	r3, [pc, #216]	; (8004d30 <HAL_RCC_ClockConfig+0x1b4>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f003 020c 	and.w	r2, r3, #12
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d1eb      	bne.n	8004c3e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d008      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c72:	4b2f      	ldr	r3, [pc, #188]	; (8004d30 <HAL_RCC_ClockConfig+0x1b4>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	492c      	ldr	r1, [pc, #176]	; (8004d30 <HAL_RCC_ClockConfig+0x1b4>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c84:	4b29      	ldr	r3, [pc, #164]	; (8004d2c <HAL_RCC_ClockConfig+0x1b0>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0307 	and.w	r3, r3, #7
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d210      	bcs.n	8004cb4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c92:	4b26      	ldr	r3, [pc, #152]	; (8004d2c <HAL_RCC_ClockConfig+0x1b0>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f023 0207 	bic.w	r2, r3, #7
 8004c9a:	4924      	ldr	r1, [pc, #144]	; (8004d2c <HAL_RCC_ClockConfig+0x1b0>)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ca2:	4b22      	ldr	r3, [pc, #136]	; (8004d2c <HAL_RCC_ClockConfig+0x1b0>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d001      	beq.n	8004cb4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e036      	b.n	8004d22 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d008      	beq.n	8004cd2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cc0:	4b1b      	ldr	r3, [pc, #108]	; (8004d30 <HAL_RCC_ClockConfig+0x1b4>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	4918      	ldr	r1, [pc, #96]	; (8004d30 <HAL_RCC_ClockConfig+0x1b4>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0308 	and.w	r3, r3, #8
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d009      	beq.n	8004cf2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cde:	4b14      	ldr	r3, [pc, #80]	; (8004d30 <HAL_RCC_ClockConfig+0x1b4>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	00db      	lsls	r3, r3, #3
 8004cec:	4910      	ldr	r1, [pc, #64]	; (8004d30 <HAL_RCC_ClockConfig+0x1b4>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cf2:	f000 f825 	bl	8004d40 <HAL_RCC_GetSysClockFreq>
 8004cf6:	4601      	mov	r1, r0
 8004cf8:	4b0d      	ldr	r3, [pc, #52]	; (8004d30 <HAL_RCC_ClockConfig+0x1b4>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	091b      	lsrs	r3, r3, #4
 8004cfe:	f003 030f 	and.w	r3, r3, #15
 8004d02:	4a0c      	ldr	r2, [pc, #48]	; (8004d34 <HAL_RCC_ClockConfig+0x1b8>)
 8004d04:	5cd3      	ldrb	r3, [r2, r3]
 8004d06:	f003 031f 	and.w	r3, r3, #31
 8004d0a:	fa21 f303 	lsr.w	r3, r1, r3
 8004d0e:	4a0a      	ldr	r2, [pc, #40]	; (8004d38 <HAL_RCC_ClockConfig+0x1bc>)
 8004d10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d12:	4b0a      	ldr	r3, [pc, #40]	; (8004d3c <HAL_RCC_ClockConfig+0x1c0>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7fd fb1e 	bl	8002358 <HAL_InitTick>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d20:	7afb      	ldrb	r3, [r7, #11]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	40022000 	.word	0x40022000
 8004d30:	40021000 	.word	0x40021000
 8004d34:	08011530 	.word	0x08011530
 8004d38:	200001c8 	.word	0x200001c8
 8004d3c:	200001dc 	.word	0x200001dc

08004d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b089      	sub	sp, #36	; 0x24
 8004d44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d46:	2300      	movs	r3, #0
 8004d48:	61fb      	str	r3, [r7, #28]
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d4e:	4b3d      	ldr	r3, [pc, #244]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x104>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f003 030c 	and.w	r3, r3, #12
 8004d56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d58:	4b3a      	ldr	r3, [pc, #232]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x104>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f003 0303 	and.w	r3, r3, #3
 8004d60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d005      	beq.n	8004d74 <HAL_RCC_GetSysClockFreq+0x34>
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	2b0c      	cmp	r3, #12
 8004d6c:	d121      	bne.n	8004db2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d11e      	bne.n	8004db2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d74:	4b33      	ldr	r3, [pc, #204]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x104>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0308 	and.w	r3, r3, #8
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d107      	bne.n	8004d90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d80:	4b30      	ldr	r3, [pc, #192]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x104>)
 8004d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d86:	0a1b      	lsrs	r3, r3, #8
 8004d88:	f003 030f 	and.w	r3, r3, #15
 8004d8c:	61fb      	str	r3, [r7, #28]
 8004d8e:	e005      	b.n	8004d9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d90:	4b2c      	ldr	r3, [pc, #176]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x104>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	091b      	lsrs	r3, r3, #4
 8004d96:	f003 030f 	and.w	r3, r3, #15
 8004d9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d9c:	4a2a      	ldr	r2, [pc, #168]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004da4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10d      	bne.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004db0:	e00a      	b.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	2b04      	cmp	r3, #4
 8004db6:	d102      	bne.n	8004dbe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004db8:	4b24      	ldr	r3, [pc, #144]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004dba:	61bb      	str	r3, [r7, #24]
 8004dbc:	e004      	b.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	d101      	bne.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004dc4:	4b22      	ldr	r3, [pc, #136]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x110>)
 8004dc6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	2b0c      	cmp	r3, #12
 8004dcc:	d133      	bne.n	8004e36 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004dce:	4b1d      	ldr	r3, [pc, #116]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x104>)
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d002      	beq.n	8004de4 <HAL_RCC_GetSysClockFreq+0xa4>
 8004dde:	2b03      	cmp	r3, #3
 8004de0:	d003      	beq.n	8004dea <HAL_RCC_GetSysClockFreq+0xaa>
 8004de2:	e005      	b.n	8004df0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004de4:	4b19      	ldr	r3, [pc, #100]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004de6:	617b      	str	r3, [r7, #20]
      break;
 8004de8:	e005      	b.n	8004df6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004dea:	4b19      	ldr	r3, [pc, #100]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x110>)
 8004dec:	617b      	str	r3, [r7, #20]
      break;
 8004dee:	e002      	b.n	8004df6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	617b      	str	r3, [r7, #20]
      break;
 8004df4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004df6:	4b13      	ldr	r3, [pc, #76]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x104>)
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	091b      	lsrs	r3, r3, #4
 8004dfc:	f003 0307 	and.w	r3, r3, #7
 8004e00:	3301      	adds	r3, #1
 8004e02:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e04:	4b0f      	ldr	r3, [pc, #60]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	0a1b      	lsrs	r3, r3, #8
 8004e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	fb02 f203 	mul.w	r2, r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e1a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e1c:	4b09      	ldr	r3, [pc, #36]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	0e5b      	lsrs	r3, r3, #25
 8004e22:	f003 0303 	and.w	r3, r3, #3
 8004e26:	3301      	adds	r3, #1
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e34:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e36:	69bb      	ldr	r3, [r7, #24]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3724      	adds	r7, #36	; 0x24
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	40021000 	.word	0x40021000
 8004e48:	08011548 	.word	0x08011548
 8004e4c:	00f42400 	.word	0x00f42400
 8004e50:	007a1200 	.word	0x007a1200

08004e54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e54:	b480      	push	{r7}
 8004e56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e58:	4b03      	ldr	r3, [pc, #12]	; (8004e68 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	200001c8 	.word	0x200001c8

08004e6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e70:	f7ff fff0 	bl	8004e54 <HAL_RCC_GetHCLKFreq>
 8004e74:	4601      	mov	r1, r0
 8004e76:	4b06      	ldr	r3, [pc, #24]	; (8004e90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	0a1b      	lsrs	r3, r3, #8
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	4a04      	ldr	r2, [pc, #16]	; (8004e94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e82:	5cd3      	ldrb	r3, [r2, r3]
 8004e84:	f003 031f 	and.w	r3, r3, #31
 8004e88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	40021000 	.word	0x40021000
 8004e94:	08011540 	.word	0x08011540

08004e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e9c:	f7ff ffda 	bl	8004e54 <HAL_RCC_GetHCLKFreq>
 8004ea0:	4601      	mov	r1, r0
 8004ea2:	4b06      	ldr	r3, [pc, #24]	; (8004ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	0adb      	lsrs	r3, r3, #11
 8004ea8:	f003 0307 	and.w	r3, r3, #7
 8004eac:	4a04      	ldr	r2, [pc, #16]	; (8004ec0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004eae:	5cd3      	ldrb	r3, [r2, r3]
 8004eb0:	f003 031f 	and.w	r3, r3, #31
 8004eb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	40021000 	.word	0x40021000
 8004ec0:	08011540 	.word	0x08011540

08004ec4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ecc:	2300      	movs	r3, #0
 8004ece:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ed0:	4b2a      	ldr	r3, [pc, #168]	; (8004f7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004edc:	f7ff f92c 	bl	8004138 <HAL_PWREx_GetVoltageRange>
 8004ee0:	6178      	str	r0, [r7, #20]
 8004ee2:	e014      	b.n	8004f0e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ee4:	4b25      	ldr	r3, [pc, #148]	; (8004f7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee8:	4a24      	ldr	r2, [pc, #144]	; (8004f7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eee:	6593      	str	r3, [r2, #88]	; 0x58
 8004ef0:	4b22      	ldr	r3, [pc, #136]	; (8004f7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ef8:	60fb      	str	r3, [r7, #12]
 8004efa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004efc:	f7ff f91c 	bl	8004138 <HAL_PWREx_GetVoltageRange>
 8004f00:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f02:	4b1e      	ldr	r3, [pc, #120]	; (8004f7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f06:	4a1d      	ldr	r2, [pc, #116]	; (8004f7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f0c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f14:	d10b      	bne.n	8004f2e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b80      	cmp	r3, #128	; 0x80
 8004f1a:	d919      	bls.n	8004f50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2ba0      	cmp	r3, #160	; 0xa0
 8004f20:	d902      	bls.n	8004f28 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f22:	2302      	movs	r3, #2
 8004f24:	613b      	str	r3, [r7, #16]
 8004f26:	e013      	b.n	8004f50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f28:	2301      	movs	r3, #1
 8004f2a:	613b      	str	r3, [r7, #16]
 8004f2c:	e010      	b.n	8004f50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b80      	cmp	r3, #128	; 0x80
 8004f32:	d902      	bls.n	8004f3a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f34:	2303      	movs	r3, #3
 8004f36:	613b      	str	r3, [r7, #16]
 8004f38:	e00a      	b.n	8004f50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b80      	cmp	r3, #128	; 0x80
 8004f3e:	d102      	bne.n	8004f46 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f40:	2302      	movs	r3, #2
 8004f42:	613b      	str	r3, [r7, #16]
 8004f44:	e004      	b.n	8004f50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b70      	cmp	r3, #112	; 0x70
 8004f4a:	d101      	bne.n	8004f50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f50:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f023 0207 	bic.w	r2, r3, #7
 8004f58:	4909      	ldr	r1, [pc, #36]	; (8004f80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f60:	4b07      	ldr	r3, [pc, #28]	; (8004f80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0307 	and.w	r3, r3, #7
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d001      	beq.n	8004f72 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e000      	b.n	8004f74 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3718      	adds	r7, #24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	40021000 	.word	0x40021000
 8004f80:	40022000 	.word	0x40022000

08004f84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f90:	2300      	movs	r3, #0
 8004f92:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d03f      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fa8:	d01c      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004faa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fae:	d802      	bhi.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00e      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004fb4:	e01f      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004fb6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fba:	d003      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004fbc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fc0:	d01c      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004fc2:	e018      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004fc4:	4b85      	ldr	r3, [pc, #532]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	4a84      	ldr	r2, [pc, #528]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fd0:	e015      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	3304      	adds	r3, #4
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 fac9 	bl	8005570 <RCCEx_PLLSAI1_Config>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fe2:	e00c      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	3320      	adds	r3, #32
 8004fe8:	2100      	movs	r1, #0
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 fbb0 	bl	8005750 <RCCEx_PLLSAI2_Config>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ff4:	e003      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	74fb      	strb	r3, [r7, #19]
      break;
 8004ffa:	e000      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004ffc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ffe:	7cfb      	ldrb	r3, [r7, #19]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10b      	bne.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005004:	4b75      	ldr	r3, [pc, #468]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800500a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005012:	4972      	ldr	r1, [pc, #456]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005014:	4313      	orrs	r3, r2
 8005016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800501a:	e001      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800501c:	7cfb      	ldrb	r3, [r7, #19]
 800501e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d03f      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005034:	d01c      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005036:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800503a:	d802      	bhi.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00e      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005040:	e01f      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005042:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005046:	d003      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8005048:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800504c:	d01c      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800504e:	e018      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005050:	4b62      	ldr	r3, [pc, #392]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	4a61      	ldr	r2, [pc, #388]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800505a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800505c:	e015      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	3304      	adds	r3, #4
 8005062:	2100      	movs	r1, #0
 8005064:	4618      	mov	r0, r3
 8005066:	f000 fa83 	bl	8005570 <RCCEx_PLLSAI1_Config>
 800506a:	4603      	mov	r3, r0
 800506c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800506e:	e00c      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	3320      	adds	r3, #32
 8005074:	2100      	movs	r1, #0
 8005076:	4618      	mov	r0, r3
 8005078:	f000 fb6a 	bl	8005750 <RCCEx_PLLSAI2_Config>
 800507c:	4603      	mov	r3, r0
 800507e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005080:	e003      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	74fb      	strb	r3, [r7, #19]
      break;
 8005086:	e000      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005088:	bf00      	nop
    }

    if(ret == HAL_OK)
 800508a:	7cfb      	ldrb	r3, [r7, #19]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10b      	bne.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005090:	4b52      	ldr	r3, [pc, #328]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005096:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800509e:	494f      	ldr	r1, [pc, #316]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80050a6:	e001      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a8:	7cfb      	ldrb	r3, [r7, #19]
 80050aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 80a0 	beq.w	80051fa <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ba:	2300      	movs	r3, #0
 80050bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050be:	4b47      	ldr	r3, [pc, #284]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80050ca:	2301      	movs	r3, #1
 80050cc:	e000      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80050ce:	2300      	movs	r3, #0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00d      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050d4:	4b41      	ldr	r3, [pc, #260]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d8:	4a40      	ldr	r2, [pc, #256]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050de:	6593      	str	r3, [r2, #88]	; 0x58
 80050e0:	4b3e      	ldr	r3, [pc, #248]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050e8:	60bb      	str	r3, [r7, #8]
 80050ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050ec:	2301      	movs	r3, #1
 80050ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050f0:	4b3b      	ldr	r3, [pc, #236]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a3a      	ldr	r2, [pc, #232]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80050f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050fc:	f7fd f978 	bl	80023f0 <HAL_GetTick>
 8005100:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005102:	e009      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005104:	f7fd f974 	bl	80023f0 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b02      	cmp	r3, #2
 8005110:	d902      	bls.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	74fb      	strb	r3, [r7, #19]
        break;
 8005116:	e005      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005118:	4b31      	ldr	r3, [pc, #196]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005120:	2b00      	cmp	r3, #0
 8005122:	d0ef      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8005124:	7cfb      	ldrb	r3, [r7, #19]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d15c      	bne.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800512a:	4b2c      	ldr	r3, [pc, #176]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800512c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005130:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005134:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d01f      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	429a      	cmp	r2, r3
 8005146:	d019      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005148:	4b24      	ldr	r3, [pc, #144]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800514a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800514e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005152:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005154:	4b21      	ldr	r3, [pc, #132]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800515a:	4a20      	ldr	r2, [pc, #128]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800515c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005160:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005164:	4b1d      	ldr	r3, [pc, #116]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516a:	4a1c      	ldr	r2, [pc, #112]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800516c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005170:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005174:	4a19      	ldr	r2, [pc, #100]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b00      	cmp	r3, #0
 8005184:	d016      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005186:	f7fd f933 	bl	80023f0 <HAL_GetTick>
 800518a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800518c:	e00b      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800518e:	f7fd f92f 	bl	80023f0 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	f241 3288 	movw	r2, #5000	; 0x1388
 800519c:	4293      	cmp	r3, r2
 800519e:	d902      	bls.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	74fb      	strb	r3, [r7, #19]
            break;
 80051a4:	e006      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051a6:	4b0d      	ldr	r3, [pc, #52]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d0ec      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80051b4:	7cfb      	ldrb	r3, [r7, #19]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10c      	bne.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051ba:	4b08      	ldr	r3, [pc, #32]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051ca:	4904      	ldr	r1, [pc, #16]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80051d2:	e009      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051d4:	7cfb      	ldrb	r3, [r7, #19]
 80051d6:	74bb      	strb	r3, [r7, #18]
 80051d8:	e006      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80051da:	bf00      	nop
 80051dc:	40021000 	.word	0x40021000
 80051e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e4:	7cfb      	ldrb	r3, [r7, #19]
 80051e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051e8:	7c7b      	ldrb	r3, [r7, #17]
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d105      	bne.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051ee:	4b9e      	ldr	r3, [pc, #632]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80051f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f2:	4a9d      	ldr	r2, [pc, #628]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80051f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00a      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005206:	4b98      	ldr	r3, [pc, #608]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800520c:	f023 0203 	bic.w	r2, r3, #3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005214:	4994      	ldr	r1, [pc, #592]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005216:	4313      	orrs	r3, r2
 8005218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00a      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005228:	4b8f      	ldr	r3, [pc, #572]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800522a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800522e:	f023 020c 	bic.w	r2, r3, #12
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005236:	498c      	ldr	r1, [pc, #560]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005238:	4313      	orrs	r3, r2
 800523a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0304 	and.w	r3, r3, #4
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00a      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800524a:	4b87      	ldr	r3, [pc, #540]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800524c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005250:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005258:	4983      	ldr	r1, [pc, #524]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800525a:	4313      	orrs	r3, r2
 800525c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0308 	and.w	r3, r3, #8
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00a      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800526c:	4b7e      	ldr	r3, [pc, #504]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800526e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005272:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527a:	497b      	ldr	r1, [pc, #492]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800527c:	4313      	orrs	r3, r2
 800527e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0310 	and.w	r3, r3, #16
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00a      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800528e:	4b76      	ldr	r3, [pc, #472]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005294:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800529c:	4972      	ldr	r1, [pc, #456]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0320 	and.w	r3, r3, #32
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00a      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052b0:	4b6d      	ldr	r3, [pc, #436]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052be:	496a      	ldr	r1, [pc, #424]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00a      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052d2:	4b65      	ldr	r3, [pc, #404]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052e0:	4961      	ldr	r1, [pc, #388]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00a      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052f4:	4b5c      	ldr	r3, [pc, #368]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005302:	4959      	ldr	r1, [pc, #356]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005304:	4313      	orrs	r3, r2
 8005306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00a      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005316:	4b54      	ldr	r3, [pc, #336]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800531c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005324:	4950      	ldr	r1, [pc, #320]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005326:	4313      	orrs	r3, r2
 8005328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00a      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005338:	4b4b      	ldr	r3, [pc, #300]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800533a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005346:	4948      	ldr	r1, [pc, #288]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005348:	4313      	orrs	r3, r2
 800534a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00a      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800535a:	4b43      	ldr	r3, [pc, #268]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800535c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005360:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005368:	493f      	ldr	r1, [pc, #252]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800536a:	4313      	orrs	r3, r2
 800536c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d028      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800537c:	4b3a      	ldr	r3, [pc, #232]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800537e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005382:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800538a:	4937      	ldr	r1, [pc, #220]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800538c:	4313      	orrs	r3, r2
 800538e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005396:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800539a:	d106      	bne.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800539c:	4b32      	ldr	r3, [pc, #200]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	4a31      	ldr	r2, [pc, #196]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053a6:	60d3      	str	r3, [r2, #12]
 80053a8:	e011      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053b2:	d10c      	bne.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	3304      	adds	r3, #4
 80053b8:	2101      	movs	r1, #1
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 f8d8 	bl	8005570 <RCCEx_PLLSAI1_Config>
 80053c0:	4603      	mov	r3, r0
 80053c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80053c4:	7cfb      	ldrb	r3, [r7, #19]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d001      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80053ca:	7cfb      	ldrb	r3, [r7, #19]
 80053cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d028      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80053da:	4b23      	ldr	r3, [pc, #140]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e8:	491f      	ldr	r1, [pc, #124]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053f8:	d106      	bne.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053fa:	4b1b      	ldr	r3, [pc, #108]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	4a1a      	ldr	r2, [pc, #104]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005400:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005404:	60d3      	str	r3, [r2, #12]
 8005406:	e011      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005410:	d10c      	bne.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	3304      	adds	r3, #4
 8005416:	2101      	movs	r1, #1
 8005418:	4618      	mov	r0, r3
 800541a:	f000 f8a9 	bl	8005570 <RCCEx_PLLSAI1_Config>
 800541e:	4603      	mov	r3, r0
 8005420:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005422:	7cfb      	ldrb	r3, [r7, #19]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d001      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8005428:	7cfb      	ldrb	r3, [r7, #19]
 800542a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d02b      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005438:	4b0b      	ldr	r3, [pc, #44]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800543a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005446:	4908      	ldr	r1, [pc, #32]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005448:	4313      	orrs	r3, r2
 800544a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005452:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005456:	d109      	bne.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005458:	4b03      	ldr	r3, [pc, #12]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	4a02      	ldr	r2, [pc, #8]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800545e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005462:	60d3      	str	r3, [r2, #12]
 8005464:	e014      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005466:	bf00      	nop
 8005468:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005470:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005474:	d10c      	bne.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	3304      	adds	r3, #4
 800547a:	2101      	movs	r1, #1
 800547c:	4618      	mov	r0, r3
 800547e:	f000 f877 	bl	8005570 <RCCEx_PLLSAI1_Config>
 8005482:	4603      	mov	r3, r0
 8005484:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005486:	7cfb      	ldrb	r3, [r7, #19]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d001      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800548c:	7cfb      	ldrb	r3, [r7, #19]
 800548e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d02f      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800549c:	4b2b      	ldr	r3, [pc, #172]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800549e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054aa:	4928      	ldr	r1, [pc, #160]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054ba:	d10d      	bne.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3304      	adds	r3, #4
 80054c0:	2102      	movs	r1, #2
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 f854 	bl	8005570 <RCCEx_PLLSAI1_Config>
 80054c8:	4603      	mov	r3, r0
 80054ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054cc:	7cfb      	ldrb	r3, [r7, #19]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d014      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80054d2:	7cfb      	ldrb	r3, [r7, #19]
 80054d4:	74bb      	strb	r3, [r7, #18]
 80054d6:	e011      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054e0:	d10c      	bne.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	3320      	adds	r3, #32
 80054e6:	2102      	movs	r1, #2
 80054e8:	4618      	mov	r0, r3
 80054ea:	f000 f931 	bl	8005750 <RCCEx_PLLSAI2_Config>
 80054ee:	4603      	mov	r3, r0
 80054f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054f2:	7cfb      	ldrb	r3, [r7, #19]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d001      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80054f8:	7cfb      	ldrb	r3, [r7, #19]
 80054fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00a      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005508:	4b10      	ldr	r3, [pc, #64]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800550a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800550e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005516:	490d      	ldr	r1, [pc, #52]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005518:	4313      	orrs	r3, r2
 800551a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00b      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800552a:	4b08      	ldr	r3, [pc, #32]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800552c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005530:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800553a:	4904      	ldr	r1, [pc, #16]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800553c:	4313      	orrs	r3, r2
 800553e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005542:	7cbb      	ldrb	r3, [r7, #18]
}
 8005544:	4618      	mov	r0, r3
 8005546:	3718      	adds	r7, #24
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	40021000 	.word	0x40021000

08005550 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005550:	b480      	push	{r7}
 8005552:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005554:	4b05      	ldr	r3, [pc, #20]	; (800556c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a04      	ldr	r2, [pc, #16]	; (800556c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800555a:	f043 0304 	orr.w	r3, r3, #4
 800555e:	6013      	str	r3, [r2, #0]
}
 8005560:	bf00      	nop
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	40021000 	.word	0x40021000

08005570 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800557a:	2300      	movs	r3, #0
 800557c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800557e:	4b73      	ldr	r3, [pc, #460]	; (800574c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	f003 0303 	and.w	r3, r3, #3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d018      	beq.n	80055bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800558a:	4b70      	ldr	r3, [pc, #448]	; (800574c <RCCEx_PLLSAI1_Config+0x1dc>)
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f003 0203 	and.w	r2, r3, #3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	429a      	cmp	r2, r3
 8005598:	d10d      	bne.n	80055b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
       ||
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d009      	beq.n	80055b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80055a2:	4b6a      	ldr	r3, [pc, #424]	; (800574c <RCCEx_PLLSAI1_Config+0x1dc>)
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	091b      	lsrs	r3, r3, #4
 80055a8:	f003 0307 	and.w	r3, r3, #7
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
       ||
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d044      	beq.n	8005640 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	73fb      	strb	r3, [r7, #15]
 80055ba:	e041      	b.n	8005640 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d00c      	beq.n	80055de <RCCEx_PLLSAI1_Config+0x6e>
 80055c4:	2b03      	cmp	r3, #3
 80055c6:	d013      	beq.n	80055f0 <RCCEx_PLLSAI1_Config+0x80>
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d120      	bne.n	800560e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80055cc:	4b5f      	ldr	r3, [pc, #380]	; (800574c <RCCEx_PLLSAI1_Config+0x1dc>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d11d      	bne.n	8005614 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055dc:	e01a      	b.n	8005614 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80055de:	4b5b      	ldr	r3, [pc, #364]	; (800574c <RCCEx_PLLSAI1_Config+0x1dc>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d116      	bne.n	8005618 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055ee:	e013      	b.n	8005618 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80055f0:	4b56      	ldr	r3, [pc, #344]	; (800574c <RCCEx_PLLSAI1_Config+0x1dc>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10f      	bne.n	800561c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80055fc:	4b53      	ldr	r3, [pc, #332]	; (800574c <RCCEx_PLLSAI1_Config+0x1dc>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d109      	bne.n	800561c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800560c:	e006      	b.n	800561c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	73fb      	strb	r3, [r7, #15]
      break;
 8005612:	e004      	b.n	800561e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005614:	bf00      	nop
 8005616:	e002      	b.n	800561e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005618:	bf00      	nop
 800561a:	e000      	b.n	800561e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800561c:	bf00      	nop
    }

    if(status == HAL_OK)
 800561e:	7bfb      	ldrb	r3, [r7, #15]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d10d      	bne.n	8005640 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005624:	4b49      	ldr	r3, [pc, #292]	; (800574c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6819      	ldr	r1, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	3b01      	subs	r3, #1
 8005636:	011b      	lsls	r3, r3, #4
 8005638:	430b      	orrs	r3, r1
 800563a:	4944      	ldr	r1, [pc, #272]	; (800574c <RCCEx_PLLSAI1_Config+0x1dc>)
 800563c:	4313      	orrs	r3, r2
 800563e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005640:	7bfb      	ldrb	r3, [r7, #15]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d17d      	bne.n	8005742 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005646:	4b41      	ldr	r3, [pc, #260]	; (800574c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a40      	ldr	r2, [pc, #256]	; (800574c <RCCEx_PLLSAI1_Config+0x1dc>)
 800564c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005650:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005652:	f7fc fecd 	bl	80023f0 <HAL_GetTick>
 8005656:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005658:	e009      	b.n	800566e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800565a:	f7fc fec9 	bl	80023f0 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	2b02      	cmp	r3, #2
 8005666:	d902      	bls.n	800566e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	73fb      	strb	r3, [r7, #15]
        break;
 800566c:	e005      	b.n	800567a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800566e:	4b37      	ldr	r3, [pc, #220]	; (800574c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1ef      	bne.n	800565a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800567a:	7bfb      	ldrb	r3, [r7, #15]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d160      	bne.n	8005742 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d111      	bne.n	80056aa <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005686:	4b31      	ldr	r3, [pc, #196]	; (800574c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800568e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	6892      	ldr	r2, [r2, #8]
 8005696:	0211      	lsls	r1, r2, #8
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	68d2      	ldr	r2, [r2, #12]
 800569c:	0912      	lsrs	r2, r2, #4
 800569e:	0452      	lsls	r2, r2, #17
 80056a0:	430a      	orrs	r2, r1
 80056a2:	492a      	ldr	r1, [pc, #168]	; (800574c <RCCEx_PLLSAI1_Config+0x1dc>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	610b      	str	r3, [r1, #16]
 80056a8:	e027      	b.n	80056fa <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d112      	bne.n	80056d6 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056b0:	4b26      	ldr	r3, [pc, #152]	; (800574c <RCCEx_PLLSAI1_Config+0x1dc>)
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80056b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	6892      	ldr	r2, [r2, #8]
 80056c0:	0211      	lsls	r1, r2, #8
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	6912      	ldr	r2, [r2, #16]
 80056c6:	0852      	lsrs	r2, r2, #1
 80056c8:	3a01      	subs	r2, #1
 80056ca:	0552      	lsls	r2, r2, #21
 80056cc:	430a      	orrs	r2, r1
 80056ce:	491f      	ldr	r1, [pc, #124]	; (800574c <RCCEx_PLLSAI1_Config+0x1dc>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	610b      	str	r3, [r1, #16]
 80056d4:	e011      	b.n	80056fa <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056d6:	4b1d      	ldr	r3, [pc, #116]	; (800574c <RCCEx_PLLSAI1_Config+0x1dc>)
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80056de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	6892      	ldr	r2, [r2, #8]
 80056e6:	0211      	lsls	r1, r2, #8
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	6952      	ldr	r2, [r2, #20]
 80056ec:	0852      	lsrs	r2, r2, #1
 80056ee:	3a01      	subs	r2, #1
 80056f0:	0652      	lsls	r2, r2, #25
 80056f2:	430a      	orrs	r2, r1
 80056f4:	4915      	ldr	r1, [pc, #84]	; (800574c <RCCEx_PLLSAI1_Config+0x1dc>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80056fa:	4b14      	ldr	r3, [pc, #80]	; (800574c <RCCEx_PLLSAI1_Config+0x1dc>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a13      	ldr	r2, [pc, #76]	; (800574c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005700:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005704:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005706:	f7fc fe73 	bl	80023f0 <HAL_GetTick>
 800570a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800570c:	e009      	b.n	8005722 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800570e:	f7fc fe6f 	bl	80023f0 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	2b02      	cmp	r3, #2
 800571a:	d902      	bls.n	8005722 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	73fb      	strb	r3, [r7, #15]
          break;
 8005720:	e005      	b.n	800572e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005722:	4b0a      	ldr	r3, [pc, #40]	; (800574c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d0ef      	beq.n	800570e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800572e:	7bfb      	ldrb	r3, [r7, #15]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d106      	bne.n	8005742 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005734:	4b05      	ldr	r3, [pc, #20]	; (800574c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005736:	691a      	ldr	r2, [r3, #16]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	4903      	ldr	r1, [pc, #12]	; (800574c <RCCEx_PLLSAI1_Config+0x1dc>)
 800573e:	4313      	orrs	r3, r2
 8005740:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005742:	7bfb      	ldrb	r3, [r7, #15]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	40021000 	.word	0x40021000

08005750 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800575a:	2300      	movs	r3, #0
 800575c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800575e:	4b68      	ldr	r3, [pc, #416]	; (8005900 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	f003 0303 	and.w	r3, r3, #3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d018      	beq.n	800579c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800576a:	4b65      	ldr	r3, [pc, #404]	; (8005900 <RCCEx_PLLSAI2_Config+0x1b0>)
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	f003 0203 	and.w	r2, r3, #3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	429a      	cmp	r2, r3
 8005778:	d10d      	bne.n	8005796 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
       ||
 800577e:	2b00      	cmp	r3, #0
 8005780:	d009      	beq.n	8005796 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005782:	4b5f      	ldr	r3, [pc, #380]	; (8005900 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	091b      	lsrs	r3, r3, #4
 8005788:	f003 0307 	and.w	r3, r3, #7
 800578c:	1c5a      	adds	r2, r3, #1
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
       ||
 8005792:	429a      	cmp	r2, r3
 8005794:	d044      	beq.n	8005820 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	73fb      	strb	r3, [r7, #15]
 800579a:	e041      	b.n	8005820 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d00c      	beq.n	80057be <RCCEx_PLLSAI2_Config+0x6e>
 80057a4:	2b03      	cmp	r3, #3
 80057a6:	d013      	beq.n	80057d0 <RCCEx_PLLSAI2_Config+0x80>
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d120      	bne.n	80057ee <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057ac:	4b54      	ldr	r3, [pc, #336]	; (8005900 <RCCEx_PLLSAI2_Config+0x1b0>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d11d      	bne.n	80057f4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057bc:	e01a      	b.n	80057f4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80057be:	4b50      	ldr	r3, [pc, #320]	; (8005900 <RCCEx_PLLSAI2_Config+0x1b0>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d116      	bne.n	80057f8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057ce:	e013      	b.n	80057f8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057d0:	4b4b      	ldr	r3, [pc, #300]	; (8005900 <RCCEx_PLLSAI2_Config+0x1b0>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10f      	bne.n	80057fc <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057dc:	4b48      	ldr	r3, [pc, #288]	; (8005900 <RCCEx_PLLSAI2_Config+0x1b0>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d109      	bne.n	80057fc <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057ec:	e006      	b.n	80057fc <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	73fb      	strb	r3, [r7, #15]
      break;
 80057f2:	e004      	b.n	80057fe <RCCEx_PLLSAI2_Config+0xae>
      break;
 80057f4:	bf00      	nop
 80057f6:	e002      	b.n	80057fe <RCCEx_PLLSAI2_Config+0xae>
      break;
 80057f8:	bf00      	nop
 80057fa:	e000      	b.n	80057fe <RCCEx_PLLSAI2_Config+0xae>
      break;
 80057fc:	bf00      	nop
    }

    if(status == HAL_OK)
 80057fe:	7bfb      	ldrb	r3, [r7, #15]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10d      	bne.n	8005820 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005804:	4b3e      	ldr	r3, [pc, #248]	; (8005900 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6819      	ldr	r1, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	3b01      	subs	r3, #1
 8005816:	011b      	lsls	r3, r3, #4
 8005818:	430b      	orrs	r3, r1
 800581a:	4939      	ldr	r1, [pc, #228]	; (8005900 <RCCEx_PLLSAI2_Config+0x1b0>)
 800581c:	4313      	orrs	r3, r2
 800581e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005820:	7bfb      	ldrb	r3, [r7, #15]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d167      	bne.n	80058f6 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005826:	4b36      	ldr	r3, [pc, #216]	; (8005900 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a35      	ldr	r2, [pc, #212]	; (8005900 <RCCEx_PLLSAI2_Config+0x1b0>)
 800582c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005830:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005832:	f7fc fddd 	bl	80023f0 <HAL_GetTick>
 8005836:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005838:	e009      	b.n	800584e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800583a:	f7fc fdd9 	bl	80023f0 <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	2b02      	cmp	r3, #2
 8005846:	d902      	bls.n	800584e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	73fb      	strb	r3, [r7, #15]
        break;
 800584c:	e005      	b.n	800585a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800584e:	4b2c      	ldr	r3, [pc, #176]	; (8005900 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1ef      	bne.n	800583a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800585a:	7bfb      	ldrb	r3, [r7, #15]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d14a      	bne.n	80058f6 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d111      	bne.n	800588a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005866:	4b26      	ldr	r3, [pc, #152]	; (8005900 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800586e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	6892      	ldr	r2, [r2, #8]
 8005876:	0211      	lsls	r1, r2, #8
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	68d2      	ldr	r2, [r2, #12]
 800587c:	0912      	lsrs	r2, r2, #4
 800587e:	0452      	lsls	r2, r2, #17
 8005880:	430a      	orrs	r2, r1
 8005882:	491f      	ldr	r1, [pc, #124]	; (8005900 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005884:	4313      	orrs	r3, r2
 8005886:	614b      	str	r3, [r1, #20]
 8005888:	e011      	b.n	80058ae <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800588a:	4b1d      	ldr	r3, [pc, #116]	; (8005900 <RCCEx_PLLSAI2_Config+0x1b0>)
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005892:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	6892      	ldr	r2, [r2, #8]
 800589a:	0211      	lsls	r1, r2, #8
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6912      	ldr	r2, [r2, #16]
 80058a0:	0852      	lsrs	r2, r2, #1
 80058a2:	3a01      	subs	r2, #1
 80058a4:	0652      	lsls	r2, r2, #25
 80058a6:	430a      	orrs	r2, r1
 80058a8:	4915      	ldr	r1, [pc, #84]	; (8005900 <RCCEx_PLLSAI2_Config+0x1b0>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80058ae:	4b14      	ldr	r3, [pc, #80]	; (8005900 <RCCEx_PLLSAI2_Config+0x1b0>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a13      	ldr	r2, [pc, #76]	; (8005900 <RCCEx_PLLSAI2_Config+0x1b0>)
 80058b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058b8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ba:	f7fc fd99 	bl	80023f0 <HAL_GetTick>
 80058be:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058c0:	e009      	b.n	80058d6 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80058c2:	f7fc fd95 	bl	80023f0 <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d902      	bls.n	80058d6 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	73fb      	strb	r3, [r7, #15]
          break;
 80058d4:	e005      	b.n	80058e2 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058d6:	4b0a      	ldr	r3, [pc, #40]	; (8005900 <RCCEx_PLLSAI2_Config+0x1b0>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d0ef      	beq.n	80058c2 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80058e2:	7bfb      	ldrb	r3, [r7, #15]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d106      	bne.n	80058f6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80058e8:	4b05      	ldr	r3, [pc, #20]	; (8005900 <RCCEx_PLLSAI2_Config+0x1b0>)
 80058ea:	695a      	ldr	r2, [r3, #20]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	4903      	ldr	r1, [pc, #12]	; (8005900 <RCCEx_PLLSAI2_Config+0x1b0>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80058f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	40021000 	.word	0x40021000

08005904 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e07c      	b.n	8005a10 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005922:	b2db      	uxtb	r3, r3
 8005924:	2b00      	cmp	r3, #0
 8005926:	d106      	bne.n	8005936 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f7fc f9ab 	bl	8001c8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2202      	movs	r2, #2
 800593a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800594c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005956:	d902      	bls.n	800595e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005958:	2300      	movs	r3, #0
 800595a:	60fb      	str	r3, [r7, #12]
 800595c:	e002      	b.n	8005964 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800595e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005962:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800596c:	d007      	beq.n	800597e <HAL_SPI_Init+0x7a>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005976:	d002      	beq.n	800597e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10b      	bne.n	800599e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800598e:	d903      	bls.n	8005998 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2202      	movs	r2, #2
 8005994:	631a      	str	r2, [r3, #48]	; 0x30
 8005996:	e002      	b.n	800599e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685a      	ldr	r2, [r3, #4]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	431a      	orrs	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	431a      	orrs	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	431a      	orrs	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059bc:	431a      	orrs	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	431a      	orrs	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a1b      	ldr	r3, [r3, #32]
 80059c8:	ea42 0103 	orr.w	r1, r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	430a      	orrs	r2, r1
 80059d6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	0c1b      	lsrs	r3, r3, #16
 80059de:	f003 0204 	and.w	r2, r3, #4
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e6:	431a      	orrs	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ec:	431a      	orrs	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	ea42 0103 	orr.w	r1, r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	430a      	orrs	r2, r1
 80059fe:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e040      	b.n	8005aac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d106      	bne.n	8005a40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f7fc f96a 	bl	8001d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2224      	movs	r2, #36	; 0x24
 8005a44:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 0201 	bic.w	r2, r2, #1
 8005a54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f8c0 	bl	8005bdc <UART_SetConfig>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d101      	bne.n	8005a66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e022      	b.n	8005aac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d002      	beq.n	8005a74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fc26 	bl	80062c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689a      	ldr	r2, [r3, #8]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f042 0201 	orr.w	r2, r2, #1
 8005aa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 fcad 	bl	8006404 <UART_CheckIdleState>
 8005aaa:	4603      	mov	r3, r0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3708      	adds	r7, #8
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b08a      	sub	sp, #40	; 0x28
 8005ab8:	af02      	add	r7, sp, #8
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	603b      	str	r3, [r7, #0]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ac8:	2b20      	cmp	r3, #32
 8005aca:	f040 8081 	bne.w	8005bd0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <HAL_UART_Transmit+0x26>
 8005ad4:	88fb      	ldrh	r3, [r7, #6]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e079      	b.n	8005bd2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d101      	bne.n	8005aec <HAL_UART_Transmit+0x38>
 8005ae8:	2302      	movs	r3, #2
 8005aea:	e072      	b.n	8005bd2 <HAL_UART_Transmit+0x11e>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2221      	movs	r2, #33	; 0x21
 8005afe:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005b00:	f7fc fc76 	bl	80023f0 <HAL_GetTick>
 8005b04:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	88fa      	ldrh	r2, [r7, #6]
 8005b0a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	88fa      	ldrh	r2, [r7, #6]
 8005b12:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b1e:	d108      	bne.n	8005b32 <HAL_UART_Transmit+0x7e>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d104      	bne.n	8005b32 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	61bb      	str	r3, [r7, #24]
 8005b30:	e003      	b.n	8005b3a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b36:	2300      	movs	r3, #0
 8005b38:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005b42:	e02d      	b.n	8005ba0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	2180      	movs	r1, #128	; 0x80
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f000 fc9d 	bl	800648e <UART_WaitOnFlagUntilTimeout>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e039      	b.n	8005bd2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10b      	bne.n	8005b7c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	881a      	ldrh	r2, [r3, #0]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b70:	b292      	uxth	r2, r2
 8005b72:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	3302      	adds	r3, #2
 8005b78:	61bb      	str	r3, [r7, #24]
 8005b7a:	e008      	b.n	8005b8e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	781a      	ldrb	r2, [r3, #0]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	b292      	uxth	r2, r2
 8005b86:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	3b01      	subs	r3, #1
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1cb      	bne.n	8005b44 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	9300      	str	r3, [sp, #0]
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	2140      	movs	r1, #64	; 0x40
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f000 fc69 	bl	800648e <UART_WaitOnFlagUntilTimeout>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e005      	b.n	8005bd2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2220      	movs	r2, #32
 8005bca:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	e000      	b.n	8005bd2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005bd0:	2302      	movs	r3, #2
  }
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3720      	adds	r7, #32
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
	...

08005bdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bdc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005be0:	b08a      	sub	sp, #40	; 0x28
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005be6:	2300      	movs	r3, #0
 8005be8:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bea:	2300      	movs	r3, #0
 8005bec:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	689a      	ldr	r2, [r3, #8]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	431a      	orrs	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	4bb8      	ldr	r3, [pc, #736]	; (8005ef4 <UART_SetConfig+0x318>)
 8005c12:	4013      	ands	r3, r2
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	6812      	ldr	r2, [r2, #0]
 8005c18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c1a:	430b      	orrs	r3, r1
 8005c1c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	68da      	ldr	r2, [r3, #12]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	430a      	orrs	r2, r1
 8005c32:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4aae      	ldr	r2, [pc, #696]	; (8005ef8 <UART_SetConfig+0x31c>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d004      	beq.n	8005c4e <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4aa5      	ldr	r2, [pc, #660]	; (8005efc <UART_SetConfig+0x320>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d126      	bne.n	8005cba <UART_SetConfig+0xde>
 8005c6c:	4ba4      	ldr	r3, [pc, #656]	; (8005f00 <UART_SetConfig+0x324>)
 8005c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c72:	f003 0303 	and.w	r3, r3, #3
 8005c76:	2b03      	cmp	r3, #3
 8005c78:	d81a      	bhi.n	8005cb0 <UART_SetConfig+0xd4>
 8005c7a:	a201      	add	r2, pc, #4	; (adr r2, 8005c80 <UART_SetConfig+0xa4>)
 8005c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c80:	08005c91 	.word	0x08005c91
 8005c84:	08005ca1 	.word	0x08005ca1
 8005c88:	08005c99 	.word	0x08005c99
 8005c8c:	08005ca9 	.word	0x08005ca9
 8005c90:	2301      	movs	r3, #1
 8005c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c96:	e105      	b.n	8005ea4 <UART_SetConfig+0x2c8>
 8005c98:	2302      	movs	r3, #2
 8005c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c9e:	e101      	b.n	8005ea4 <UART_SetConfig+0x2c8>
 8005ca0:	2304      	movs	r3, #4
 8005ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ca6:	e0fd      	b.n	8005ea4 <UART_SetConfig+0x2c8>
 8005ca8:	2308      	movs	r3, #8
 8005caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cae:	e0f9      	b.n	8005ea4 <UART_SetConfig+0x2c8>
 8005cb0:	2310      	movs	r3, #16
 8005cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cb6:	bf00      	nop
 8005cb8:	e0f4      	b.n	8005ea4 <UART_SetConfig+0x2c8>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a91      	ldr	r2, [pc, #580]	; (8005f04 <UART_SetConfig+0x328>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d138      	bne.n	8005d36 <UART_SetConfig+0x15a>
 8005cc4:	4b8e      	ldr	r3, [pc, #568]	; (8005f00 <UART_SetConfig+0x324>)
 8005cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cca:	f003 030c 	and.w	r3, r3, #12
 8005cce:	2b0c      	cmp	r3, #12
 8005cd0:	d82c      	bhi.n	8005d2c <UART_SetConfig+0x150>
 8005cd2:	a201      	add	r2, pc, #4	; (adr r2, 8005cd8 <UART_SetConfig+0xfc>)
 8005cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd8:	08005d0d 	.word	0x08005d0d
 8005cdc:	08005d2d 	.word	0x08005d2d
 8005ce0:	08005d2d 	.word	0x08005d2d
 8005ce4:	08005d2d 	.word	0x08005d2d
 8005ce8:	08005d1d 	.word	0x08005d1d
 8005cec:	08005d2d 	.word	0x08005d2d
 8005cf0:	08005d2d 	.word	0x08005d2d
 8005cf4:	08005d2d 	.word	0x08005d2d
 8005cf8:	08005d15 	.word	0x08005d15
 8005cfc:	08005d2d 	.word	0x08005d2d
 8005d00:	08005d2d 	.word	0x08005d2d
 8005d04:	08005d2d 	.word	0x08005d2d
 8005d08:	08005d25 	.word	0x08005d25
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d12:	e0c7      	b.n	8005ea4 <UART_SetConfig+0x2c8>
 8005d14:	2302      	movs	r3, #2
 8005d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d1a:	e0c3      	b.n	8005ea4 <UART_SetConfig+0x2c8>
 8005d1c:	2304      	movs	r3, #4
 8005d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d22:	e0bf      	b.n	8005ea4 <UART_SetConfig+0x2c8>
 8005d24:	2308      	movs	r3, #8
 8005d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d2a:	e0bb      	b.n	8005ea4 <UART_SetConfig+0x2c8>
 8005d2c:	2310      	movs	r3, #16
 8005d2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d32:	bf00      	nop
 8005d34:	e0b6      	b.n	8005ea4 <UART_SetConfig+0x2c8>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a73      	ldr	r2, [pc, #460]	; (8005f08 <UART_SetConfig+0x32c>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d125      	bne.n	8005d8c <UART_SetConfig+0x1b0>
 8005d40:	4b6f      	ldr	r3, [pc, #444]	; (8005f00 <UART_SetConfig+0x324>)
 8005d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d46:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d4a:	2b10      	cmp	r3, #16
 8005d4c:	d011      	beq.n	8005d72 <UART_SetConfig+0x196>
 8005d4e:	2b10      	cmp	r3, #16
 8005d50:	d802      	bhi.n	8005d58 <UART_SetConfig+0x17c>
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d005      	beq.n	8005d62 <UART_SetConfig+0x186>
 8005d56:	e014      	b.n	8005d82 <UART_SetConfig+0x1a6>
 8005d58:	2b20      	cmp	r3, #32
 8005d5a:	d006      	beq.n	8005d6a <UART_SetConfig+0x18e>
 8005d5c:	2b30      	cmp	r3, #48	; 0x30
 8005d5e:	d00c      	beq.n	8005d7a <UART_SetConfig+0x19e>
 8005d60:	e00f      	b.n	8005d82 <UART_SetConfig+0x1a6>
 8005d62:	2300      	movs	r3, #0
 8005d64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d68:	e09c      	b.n	8005ea4 <UART_SetConfig+0x2c8>
 8005d6a:	2302      	movs	r3, #2
 8005d6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d70:	e098      	b.n	8005ea4 <UART_SetConfig+0x2c8>
 8005d72:	2304      	movs	r3, #4
 8005d74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d78:	e094      	b.n	8005ea4 <UART_SetConfig+0x2c8>
 8005d7a:	2308      	movs	r3, #8
 8005d7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d80:	e090      	b.n	8005ea4 <UART_SetConfig+0x2c8>
 8005d82:	2310      	movs	r3, #16
 8005d84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d88:	bf00      	nop
 8005d8a:	e08b      	b.n	8005ea4 <UART_SetConfig+0x2c8>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a5e      	ldr	r2, [pc, #376]	; (8005f0c <UART_SetConfig+0x330>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d125      	bne.n	8005de2 <UART_SetConfig+0x206>
 8005d96:	4b5a      	ldr	r3, [pc, #360]	; (8005f00 <UART_SetConfig+0x324>)
 8005d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005da0:	2b40      	cmp	r3, #64	; 0x40
 8005da2:	d011      	beq.n	8005dc8 <UART_SetConfig+0x1ec>
 8005da4:	2b40      	cmp	r3, #64	; 0x40
 8005da6:	d802      	bhi.n	8005dae <UART_SetConfig+0x1d2>
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d005      	beq.n	8005db8 <UART_SetConfig+0x1dc>
 8005dac:	e014      	b.n	8005dd8 <UART_SetConfig+0x1fc>
 8005dae:	2b80      	cmp	r3, #128	; 0x80
 8005db0:	d006      	beq.n	8005dc0 <UART_SetConfig+0x1e4>
 8005db2:	2bc0      	cmp	r3, #192	; 0xc0
 8005db4:	d00c      	beq.n	8005dd0 <UART_SetConfig+0x1f4>
 8005db6:	e00f      	b.n	8005dd8 <UART_SetConfig+0x1fc>
 8005db8:	2300      	movs	r3, #0
 8005dba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dbe:	e071      	b.n	8005ea4 <UART_SetConfig+0x2c8>
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dc6:	e06d      	b.n	8005ea4 <UART_SetConfig+0x2c8>
 8005dc8:	2304      	movs	r3, #4
 8005dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dce:	e069      	b.n	8005ea4 <UART_SetConfig+0x2c8>
 8005dd0:	2308      	movs	r3, #8
 8005dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dd6:	e065      	b.n	8005ea4 <UART_SetConfig+0x2c8>
 8005dd8:	2310      	movs	r3, #16
 8005dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dde:	bf00      	nop
 8005de0:	e060      	b.n	8005ea4 <UART_SetConfig+0x2c8>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a4a      	ldr	r2, [pc, #296]	; (8005f10 <UART_SetConfig+0x334>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d129      	bne.n	8005e40 <UART_SetConfig+0x264>
 8005dec:	4b44      	ldr	r3, [pc, #272]	; (8005f00 <UART_SetConfig+0x324>)
 8005dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dfa:	d014      	beq.n	8005e26 <UART_SetConfig+0x24a>
 8005dfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e00:	d802      	bhi.n	8005e08 <UART_SetConfig+0x22c>
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d007      	beq.n	8005e16 <UART_SetConfig+0x23a>
 8005e06:	e016      	b.n	8005e36 <UART_SetConfig+0x25a>
 8005e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e0c:	d007      	beq.n	8005e1e <UART_SetConfig+0x242>
 8005e0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e12:	d00c      	beq.n	8005e2e <UART_SetConfig+0x252>
 8005e14:	e00f      	b.n	8005e36 <UART_SetConfig+0x25a>
 8005e16:	2300      	movs	r3, #0
 8005e18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e1c:	e042      	b.n	8005ea4 <UART_SetConfig+0x2c8>
 8005e1e:	2302      	movs	r3, #2
 8005e20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e24:	e03e      	b.n	8005ea4 <UART_SetConfig+0x2c8>
 8005e26:	2304      	movs	r3, #4
 8005e28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e2c:	e03a      	b.n	8005ea4 <UART_SetConfig+0x2c8>
 8005e2e:	2308      	movs	r3, #8
 8005e30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e34:	e036      	b.n	8005ea4 <UART_SetConfig+0x2c8>
 8005e36:	2310      	movs	r3, #16
 8005e38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e3c:	bf00      	nop
 8005e3e:	e031      	b.n	8005ea4 <UART_SetConfig+0x2c8>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a2c      	ldr	r2, [pc, #176]	; (8005ef8 <UART_SetConfig+0x31c>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d129      	bne.n	8005e9e <UART_SetConfig+0x2c2>
 8005e4a:	4b2d      	ldr	r3, [pc, #180]	; (8005f00 <UART_SetConfig+0x324>)
 8005e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e58:	d014      	beq.n	8005e84 <UART_SetConfig+0x2a8>
 8005e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e5e:	d802      	bhi.n	8005e66 <UART_SetConfig+0x28a>
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d007      	beq.n	8005e74 <UART_SetConfig+0x298>
 8005e64:	e016      	b.n	8005e94 <UART_SetConfig+0x2b8>
 8005e66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e6a:	d007      	beq.n	8005e7c <UART_SetConfig+0x2a0>
 8005e6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e70:	d00c      	beq.n	8005e8c <UART_SetConfig+0x2b0>
 8005e72:	e00f      	b.n	8005e94 <UART_SetConfig+0x2b8>
 8005e74:	2300      	movs	r3, #0
 8005e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e7a:	e013      	b.n	8005ea4 <UART_SetConfig+0x2c8>
 8005e7c:	2302      	movs	r3, #2
 8005e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e82:	e00f      	b.n	8005ea4 <UART_SetConfig+0x2c8>
 8005e84:	2304      	movs	r3, #4
 8005e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e8a:	e00b      	b.n	8005ea4 <UART_SetConfig+0x2c8>
 8005e8c:	2308      	movs	r3, #8
 8005e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e92:	e007      	b.n	8005ea4 <UART_SetConfig+0x2c8>
 8005e94:	2310      	movs	r3, #16
 8005e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e9a:	bf00      	nop
 8005e9c:	e002      	b.n	8005ea4 <UART_SetConfig+0x2c8>
 8005e9e:	2310      	movs	r3, #16
 8005ea0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a13      	ldr	r2, [pc, #76]	; (8005ef8 <UART_SetConfig+0x31c>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	f040 80fe 	bne.w	80060ac <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005eb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005eb4:	2b08      	cmp	r3, #8
 8005eb6:	d837      	bhi.n	8005f28 <UART_SetConfig+0x34c>
 8005eb8:	a201      	add	r2, pc, #4	; (adr r2, 8005ec0 <UART_SetConfig+0x2e4>)
 8005eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ebe:	bf00      	nop
 8005ec0:	08005ee5 	.word	0x08005ee5
 8005ec4:	08005f29 	.word	0x08005f29
 8005ec8:	08005eed 	.word	0x08005eed
 8005ecc:	08005f29 	.word	0x08005f29
 8005ed0:	08005f19 	.word	0x08005f19
 8005ed4:	08005f29 	.word	0x08005f29
 8005ed8:	08005f29 	.word	0x08005f29
 8005edc:	08005f29 	.word	0x08005f29
 8005ee0:	08005f21 	.word	0x08005f21
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005ee4:	f7fe ffc2 	bl	8004e6c <HAL_RCC_GetPCLK1Freq>
 8005ee8:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005eea:	e020      	b.n	8005f2e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005eec:	4b09      	ldr	r3, [pc, #36]	; (8005f14 <UART_SetConfig+0x338>)
 8005eee:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005ef0:	e01d      	b.n	8005f2e <UART_SetConfig+0x352>
 8005ef2:	bf00      	nop
 8005ef4:	efff69f3 	.word	0xefff69f3
 8005ef8:	40008000 	.word	0x40008000
 8005efc:	40013800 	.word	0x40013800
 8005f00:	40021000 	.word	0x40021000
 8005f04:	40004400 	.word	0x40004400
 8005f08:	40004800 	.word	0x40004800
 8005f0c:	40004c00 	.word	0x40004c00
 8005f10:	40005000 	.word	0x40005000
 8005f14:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8005f18:	f7fe ff12 	bl	8004d40 <HAL_RCC_GetSysClockFreq>
 8005f1c:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005f1e:	e006      	b.n	8005f2e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005f20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f24:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005f26:	e002      	b.n	8005f2e <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	76fb      	strb	r3, [r7, #27]
        break;
 8005f2c:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f000 81b9 	beq.w	80062a8 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	005b      	lsls	r3, r3, #1
 8005f3e:	4413      	add	r3, r2
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d305      	bcc.n	8005f52 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d902      	bls.n	8005f58 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	76fb      	strb	r3, [r7, #27]
 8005f56:	e1a7      	b.n	80062a8 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8005f58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f5c:	2b08      	cmp	r3, #8
 8005f5e:	f200 8092 	bhi.w	8006086 <UART_SetConfig+0x4aa>
 8005f62:	a201      	add	r2, pc, #4	; (adr r2, 8005f68 <UART_SetConfig+0x38c>)
 8005f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f68:	08005f8d 	.word	0x08005f8d
 8005f6c:	08006087 	.word	0x08006087
 8005f70:	08005fdb 	.word	0x08005fdb
 8005f74:	08006087 	.word	0x08006087
 8005f78:	0800600f 	.word	0x0800600f
 8005f7c:	08006087 	.word	0x08006087
 8005f80:	08006087 	.word	0x08006087
 8005f84:	08006087 	.word	0x08006087
 8005f88:	0800605d 	.word	0x0800605d
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8005f8c:	f7fe ff6e 	bl	8004e6c <HAL_RCC_GetPCLK1Freq>
 8005f90:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	4619      	mov	r1, r3
 8005f96:	f04f 0200 	mov.w	r2, #0
 8005f9a:	f04f 0300 	mov.w	r3, #0
 8005f9e:	f04f 0400 	mov.w	r4, #0
 8005fa2:	0214      	lsls	r4, r2, #8
 8005fa4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005fa8:	020b      	lsls	r3, r1, #8
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	6852      	ldr	r2, [r2, #4]
 8005fae:	0852      	lsrs	r2, r2, #1
 8005fb0:	4611      	mov	r1, r2
 8005fb2:	f04f 0200 	mov.w	r2, #0
 8005fb6:	eb13 0b01 	adds.w	fp, r3, r1
 8005fba:	eb44 0c02 	adc.w	ip, r4, r2
 8005fbe:	4658      	mov	r0, fp
 8005fc0:	4661      	mov	r1, ip
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f04f 0400 	mov.w	r4, #0
 8005fca:	461a      	mov	r2, r3
 8005fcc:	4623      	mov	r3, r4
 8005fce:	f7fa fb33 	bl	8000638 <__aeabi_uldivmod>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	460c      	mov	r4, r1
 8005fd6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005fd8:	e058      	b.n	800608c <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	085b      	lsrs	r3, r3, #1
 8005fe0:	f04f 0400 	mov.w	r4, #0
 8005fe4:	49ae      	ldr	r1, [pc, #696]	; (80062a0 <UART_SetConfig+0x6c4>)
 8005fe6:	f04f 0200 	mov.w	r2, #0
 8005fea:	eb13 0b01 	adds.w	fp, r3, r1
 8005fee:	eb44 0c02 	adc.w	ip, r4, r2
 8005ff2:	4658      	mov	r0, fp
 8005ff4:	4661      	mov	r1, ip
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f04f 0400 	mov.w	r4, #0
 8005ffe:	461a      	mov	r2, r3
 8006000:	4623      	mov	r3, r4
 8006002:	f7fa fb19 	bl	8000638 <__aeabi_uldivmod>
 8006006:	4603      	mov	r3, r0
 8006008:	460c      	mov	r4, r1
 800600a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800600c:	e03e      	b.n	800608c <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800600e:	f7fe fe97 	bl	8004d40 <HAL_RCC_GetSysClockFreq>
 8006012:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	4619      	mov	r1, r3
 8006018:	f04f 0200 	mov.w	r2, #0
 800601c:	f04f 0300 	mov.w	r3, #0
 8006020:	f04f 0400 	mov.w	r4, #0
 8006024:	0214      	lsls	r4, r2, #8
 8006026:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800602a:	020b      	lsls	r3, r1, #8
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	6852      	ldr	r2, [r2, #4]
 8006030:	0852      	lsrs	r2, r2, #1
 8006032:	4611      	mov	r1, r2
 8006034:	f04f 0200 	mov.w	r2, #0
 8006038:	eb13 0b01 	adds.w	fp, r3, r1
 800603c:	eb44 0c02 	adc.w	ip, r4, r2
 8006040:	4658      	mov	r0, fp
 8006042:	4661      	mov	r1, ip
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f04f 0400 	mov.w	r4, #0
 800604c:	461a      	mov	r2, r3
 800604e:	4623      	mov	r3, r4
 8006050:	f7fa faf2 	bl	8000638 <__aeabi_uldivmod>
 8006054:	4603      	mov	r3, r0
 8006056:	460c      	mov	r4, r1
 8006058:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800605a:	e017      	b.n	800608c <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	085b      	lsrs	r3, r3, #1
 8006062:	f04f 0400 	mov.w	r4, #0
 8006066:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800606a:	f144 0100 	adc.w	r1, r4, #0
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f04f 0400 	mov.w	r4, #0
 8006076:	461a      	mov	r2, r3
 8006078:	4623      	mov	r3, r4
 800607a:	f7fa fadd 	bl	8000638 <__aeabi_uldivmod>
 800607e:	4603      	mov	r3, r0
 8006080:	460c      	mov	r4, r1
 8006082:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006084:	e002      	b.n	800608c <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	76fb      	strb	r3, [r7, #27]
            break;
 800608a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006092:	d308      	bcc.n	80060a6 <UART_SetConfig+0x4ca>
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800609a:	d204      	bcs.n	80060a6 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	69fa      	ldr	r2, [r7, #28]
 80060a2:	60da      	str	r2, [r3, #12]
 80060a4:	e100      	b.n	80062a8 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	76fb      	strb	r3, [r7, #27]
 80060aa:	e0fd      	b.n	80062a8 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	69db      	ldr	r3, [r3, #28]
 80060b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060b4:	f040 8084 	bne.w	80061c0 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 80060b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060bc:	2b08      	cmp	r3, #8
 80060be:	d85f      	bhi.n	8006180 <UART_SetConfig+0x5a4>
 80060c0:	a201      	add	r2, pc, #4	; (adr r2, 80060c8 <UART_SetConfig+0x4ec>)
 80060c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c6:	bf00      	nop
 80060c8:	080060ed 	.word	0x080060ed
 80060cc:	0800610d 	.word	0x0800610d
 80060d0:	0800612d 	.word	0x0800612d
 80060d4:	08006181 	.word	0x08006181
 80060d8:	08006149 	.word	0x08006149
 80060dc:	08006181 	.word	0x08006181
 80060e0:	08006181 	.word	0x08006181
 80060e4:	08006181 	.word	0x08006181
 80060e8:	08006169 	.word	0x08006169
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060ec:	f7fe febe 	bl	8004e6c <HAL_RCC_GetPCLK1Freq>
 80060f0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	005a      	lsls	r2, r3, #1
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	085b      	lsrs	r3, r3, #1
 80060fc:	441a      	add	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	fbb2 f3f3 	udiv	r3, r2, r3
 8006106:	b29b      	uxth	r3, r3
 8006108:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800610a:	e03c      	b.n	8006186 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800610c:	f7fe fec4 	bl	8004e98 <HAL_RCC_GetPCLK2Freq>
 8006110:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	005a      	lsls	r2, r3, #1
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	085b      	lsrs	r3, r3, #1
 800611c:	441a      	add	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	fbb2 f3f3 	udiv	r3, r2, r3
 8006126:	b29b      	uxth	r3, r3
 8006128:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800612a:	e02c      	b.n	8006186 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	085b      	lsrs	r3, r3, #1
 8006132:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8006136:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	6852      	ldr	r2, [r2, #4]
 800613e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006142:	b29b      	uxth	r3, r3
 8006144:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006146:	e01e      	b.n	8006186 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006148:	f7fe fdfa 	bl	8004d40 <HAL_RCC_GetSysClockFreq>
 800614c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	005a      	lsls	r2, r3, #1
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	085b      	lsrs	r3, r3, #1
 8006158:	441a      	add	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006162:	b29b      	uxth	r3, r3
 8006164:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006166:	e00e      	b.n	8006186 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	085b      	lsrs	r3, r3, #1
 800616e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	fbb2 f3f3 	udiv	r3, r2, r3
 800617a:	b29b      	uxth	r3, r3
 800617c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800617e:	e002      	b.n	8006186 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	76fb      	strb	r3, [r7, #27]
        break;
 8006184:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	2b0f      	cmp	r3, #15
 800618a:	d916      	bls.n	80061ba <UART_SetConfig+0x5de>
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006192:	d212      	bcs.n	80061ba <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	b29b      	uxth	r3, r3
 8006198:	f023 030f 	bic.w	r3, r3, #15
 800619c:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	085b      	lsrs	r3, r3, #1
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	f003 0307 	and.w	r3, r3, #7
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	89fb      	ldrh	r3, [r7, #14]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	89fa      	ldrh	r2, [r7, #14]
 80061b6:	60da      	str	r2, [r3, #12]
 80061b8:	e076      	b.n	80062a8 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	76fb      	strb	r3, [r7, #27]
 80061be:	e073      	b.n	80062a8 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 80061c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061c4:	2b08      	cmp	r3, #8
 80061c6:	d85c      	bhi.n	8006282 <UART_SetConfig+0x6a6>
 80061c8:	a201      	add	r2, pc, #4	; (adr r2, 80061d0 <UART_SetConfig+0x5f4>)
 80061ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ce:	bf00      	nop
 80061d0:	080061f5 	.word	0x080061f5
 80061d4:	08006213 	.word	0x08006213
 80061d8:	08006231 	.word	0x08006231
 80061dc:	08006283 	.word	0x08006283
 80061e0:	0800624d 	.word	0x0800624d
 80061e4:	08006283 	.word	0x08006283
 80061e8:	08006283 	.word	0x08006283
 80061ec:	08006283 	.word	0x08006283
 80061f0:	0800626b 	.word	0x0800626b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061f4:	f7fe fe3a 	bl	8004e6c <HAL_RCC_GetPCLK1Freq>
 80061f8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	085a      	lsrs	r2, r3, #1
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	441a      	add	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	fbb2 f3f3 	udiv	r3, r2, r3
 800620c:	b29b      	uxth	r3, r3
 800620e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006210:	e03a      	b.n	8006288 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006212:	f7fe fe41 	bl	8004e98 <HAL_RCC_GetPCLK2Freq>
 8006216:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	085a      	lsrs	r2, r3, #1
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	441a      	add	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	fbb2 f3f3 	udiv	r3, r2, r3
 800622a:	b29b      	uxth	r3, r3
 800622c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800622e:	e02b      	b.n	8006288 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	085b      	lsrs	r3, r3, #1
 8006236:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800623a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	6852      	ldr	r2, [r2, #4]
 8006242:	fbb3 f3f2 	udiv	r3, r3, r2
 8006246:	b29b      	uxth	r3, r3
 8006248:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800624a:	e01d      	b.n	8006288 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800624c:	f7fe fd78 	bl	8004d40 <HAL_RCC_GetSysClockFreq>
 8006250:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	085a      	lsrs	r2, r3, #1
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	441a      	add	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	fbb2 f3f3 	udiv	r3, r2, r3
 8006264:	b29b      	uxth	r3, r3
 8006266:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006268:	e00e      	b.n	8006288 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	085b      	lsrs	r3, r3, #1
 8006270:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	fbb2 f3f3 	udiv	r3, r2, r3
 800627c:	b29b      	uxth	r3, r3
 800627e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006280:	e002      	b.n	8006288 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	76fb      	strb	r3, [r7, #27]
        break;
 8006286:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	2b0f      	cmp	r3, #15
 800628c:	d90a      	bls.n	80062a4 <UART_SetConfig+0x6c8>
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006294:	d206      	bcs.n	80062a4 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	69fa      	ldr	r2, [r7, #28]
 800629c:	60da      	str	r2, [r3, #12]
 800629e:	e003      	b.n	80062a8 <UART_SetConfig+0x6cc>
 80062a0:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80062b4:	7efb      	ldrb	r3, [r7, #27]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3728      	adds	r7, #40	; 0x28
 80062ba:	46bd      	mov	sp, r7
 80062bc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080062c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062cc:	f003 0301 	and.w	r3, r3, #1
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00a      	beq.n	80062ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	430a      	orrs	r2, r1
 80062e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00a      	beq.n	800630c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	430a      	orrs	r2, r1
 800630a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006310:	f003 0304 	and.w	r3, r3, #4
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00a      	beq.n	800632e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	430a      	orrs	r2, r1
 800632c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006332:	f003 0308 	and.w	r3, r3, #8
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00a      	beq.n	8006350 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	430a      	orrs	r2, r1
 800634e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006354:	f003 0310 	and.w	r3, r3, #16
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00a      	beq.n	8006372 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	430a      	orrs	r2, r1
 8006370:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006376:	f003 0320 	and.w	r3, r3, #32
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00a      	beq.n	8006394 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	430a      	orrs	r2, r1
 8006392:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800639c:	2b00      	cmp	r3, #0
 800639e:	d01a      	beq.n	80063d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	430a      	orrs	r2, r1
 80063b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063be:	d10a      	bne.n	80063d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	430a      	orrs	r2, r1
 80063d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00a      	beq.n	80063f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	430a      	orrs	r2, r1
 80063f6:	605a      	str	r2, [r3, #4]
  }
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b086      	sub	sp, #24
 8006408:	af02      	add	r7, sp, #8
 800640a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006412:	f7fb ffed 	bl	80023f0 <HAL_GetTick>
 8006416:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0308 	and.w	r3, r3, #8
 8006422:	2b08      	cmp	r3, #8
 8006424:	d10e      	bne.n	8006444 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006426:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 f82a 	bl	800648e <UART_WaitOnFlagUntilTimeout>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d001      	beq.n	8006444 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e020      	b.n	8006486 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 0304 	and.w	r3, r3, #4
 800644e:	2b04      	cmp	r3, #4
 8006450:	d10e      	bne.n	8006470 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006452:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f814 	bl	800648e <UART_WaitOnFlagUntilTimeout>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d001      	beq.n	8006470 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e00a      	b.n	8006486 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2220      	movs	r2, #32
 8006474:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2220      	movs	r2, #32
 800647a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b084      	sub	sp, #16
 8006492:	af00      	add	r7, sp, #0
 8006494:	60f8      	str	r0, [r7, #12]
 8006496:	60b9      	str	r1, [r7, #8]
 8006498:	603b      	str	r3, [r7, #0]
 800649a:	4613      	mov	r3, r2
 800649c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800649e:	e05d      	b.n	800655c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a6:	d059      	beq.n	800655c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064a8:	f7fb ffa2 	bl	80023f0 <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	69ba      	ldr	r2, [r7, #24]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d302      	bcc.n	80064be <UART_WaitOnFlagUntilTimeout+0x30>
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d11b      	bne.n	80064f6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80064cc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	689a      	ldr	r2, [r3, #8]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f022 0201 	bic.w	r2, r2, #1
 80064dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2220      	movs	r2, #32
 80064e2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2220      	movs	r2, #32
 80064e8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e042      	b.n	800657c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0304 	and.w	r3, r3, #4
 8006500:	2b00      	cmp	r3, #0
 8006502:	d02b      	beq.n	800655c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800650e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006512:	d123      	bne.n	800655c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800651c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800652c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	689a      	ldr	r2, [r3, #8]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f022 0201 	bic.w	r2, r2, #1
 800653c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2220      	movs	r2, #32
 8006542:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2220      	movs	r2, #32
 8006548:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2220      	movs	r2, #32
 800654e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e00f      	b.n	800657c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	69da      	ldr	r2, [r3, #28]
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	4013      	ands	r3, r2
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	429a      	cmp	r2, r3
 800656a:	bf0c      	ite	eq
 800656c:	2301      	moveq	r3, #1
 800656e:	2300      	movne	r3, #0
 8006570:	b2db      	uxtb	r3, r3
 8006572:	461a      	mov	r2, r3
 8006574:	79fb      	ldrb	r3, [r7, #7]
 8006576:	429a      	cmp	r2, r3
 8006578:	d092      	beq.n	80064a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006584:	b084      	sub	sp, #16
 8006586:	b580      	push	{r7, lr}
 8006588:	b084      	sub	sp, #16
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
 800658e:	f107 001c 	add.w	r0, r7, #28
 8006592:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006598:	2b01      	cmp	r3, #1
 800659a:	d122      	bne.n	80065e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80065b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80065c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d105      	bne.n	80065d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fa28 	bl	8006a2c <USB_CoreReset>
 80065dc:	4603      	mov	r3, r0
 80065de:	73fb      	strb	r3, [r7, #15]
 80065e0:	e01a      	b.n	8006618 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 fa1c 	bl	8006a2c <USB_CoreReset>
 80065f4:	4603      	mov	r3, r0
 80065f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80065f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d106      	bne.n	800660c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006602:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	639a      	str	r2, [r3, #56]	; 0x38
 800660a:	e005      	b.n	8006618 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006610:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8006618:	7bfb      	ldrb	r3, [r7, #15]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006624:	b004      	add	sp, #16
 8006626:	4770      	bx	lr

08006628 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f023 0201 	bic.w	r2, r3, #1
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	370c      	adds	r7, #12
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr

0800664a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b082      	sub	sp, #8
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
 8006652:	460b      	mov	r3, r1
 8006654:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006662:	78fb      	ldrb	r3, [r7, #3]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d106      	bne.n	8006676 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	60da      	str	r2, [r3, #12]
 8006674:	e00b      	b.n	800668e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006676:	78fb      	ldrb	r3, [r7, #3]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d106      	bne.n	800668a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	60da      	str	r2, [r3, #12]
 8006688:	e001      	b.n	800668e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e003      	b.n	8006696 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800668e:	2032      	movs	r0, #50	; 0x32
 8006690:	f7fb feba 	bl	8002408 <HAL_Delay>

  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3708      	adds	r7, #8
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
	...

080066a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066a0:	b084      	sub	sp, #16
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b086      	sub	sp, #24
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
 80066aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80066ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80066b2:	2300      	movs	r3, #0
 80066b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80066ba:	2300      	movs	r3, #0
 80066bc:	613b      	str	r3, [r7, #16]
 80066be:	e009      	b.n	80066d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	3340      	adds	r3, #64	; 0x40
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	4413      	add	r3, r2
 80066ca:	2200      	movs	r2, #0
 80066cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	3301      	adds	r3, #1
 80066d2:	613b      	str	r3, [r7, #16]
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	2b0e      	cmp	r3, #14
 80066d8:	d9f2      	bls.n	80066c0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80066da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d11c      	bne.n	800671a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066ee:	f043 0302 	orr.w	r3, r3, #2
 80066f2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	601a      	str	r2, [r3, #0]
 8006718:	e005      	b.n	8006726 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800672c:	461a      	mov	r2, r3
 800672e:	2300      	movs	r3, #0
 8006730:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006738:	4619      	mov	r1, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006740:	461a      	mov	r2, r3
 8006742:	680b      	ldr	r3, [r1, #0]
 8006744:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006746:	2103      	movs	r1, #3
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 f93d 	bl	80069c8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800674e:	2110      	movs	r1, #16
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f8f1 	bl	8006938 <USB_FlushTxFifo>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d001      	beq.n	8006760 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f90f 	bl	8006984 <USB_FlushRxFifo>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d001      	beq.n	8006770 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006776:	461a      	mov	r2, r3
 8006778:	2300      	movs	r3, #0
 800677a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006782:	461a      	mov	r2, r3
 8006784:	2300      	movs	r3, #0
 8006786:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800678e:	461a      	mov	r2, r3
 8006790:	2300      	movs	r3, #0
 8006792:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006794:	2300      	movs	r3, #0
 8006796:	613b      	str	r3, [r7, #16]
 8006798:	e043      	b.n	8006822 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	015a      	lsls	r2, r3, #5
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	4413      	add	r3, r2
 80067a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067b0:	d118      	bne.n	80067e4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10a      	bne.n	80067ce <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	015a      	lsls	r2, r3, #5
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067c4:	461a      	mov	r2, r3
 80067c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80067ca:	6013      	str	r3, [r2, #0]
 80067cc:	e013      	b.n	80067f6 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	015a      	lsls	r2, r3, #5
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	4413      	add	r3, r2
 80067d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067da:	461a      	mov	r2, r3
 80067dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80067e0:	6013      	str	r3, [r2, #0]
 80067e2:	e008      	b.n	80067f6 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	015a      	lsls	r2, r3, #5
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	4413      	add	r3, r2
 80067ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f0:	461a      	mov	r2, r3
 80067f2:	2300      	movs	r3, #0
 80067f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006802:	461a      	mov	r2, r3
 8006804:	2300      	movs	r3, #0
 8006806:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	015a      	lsls	r2, r3, #5
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4413      	add	r3, r2
 8006810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006814:	461a      	mov	r2, r3
 8006816:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800681a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	3301      	adds	r3, #1
 8006820:	613b      	str	r3, [r7, #16]
 8006822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	429a      	cmp	r2, r3
 8006828:	d3b7      	bcc.n	800679a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800682a:	2300      	movs	r3, #0
 800682c:	613b      	str	r3, [r7, #16]
 800682e:	e043      	b.n	80068b8 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	4413      	add	r3, r2
 8006838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006842:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006846:	d118      	bne.n	800687a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d10a      	bne.n	8006864 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	015a      	lsls	r2, r3, #5
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	4413      	add	r3, r2
 8006856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800685a:	461a      	mov	r2, r3
 800685c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006860:	6013      	str	r3, [r2, #0]
 8006862:	e013      	b.n	800688c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4413      	add	r3, r2
 800686c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006870:	461a      	mov	r2, r3
 8006872:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006876:	6013      	str	r3, [r2, #0]
 8006878:	e008      	b.n	800688c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	015a      	lsls	r2, r3, #5
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	4413      	add	r3, r2
 8006882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006886:	461a      	mov	r2, r3
 8006888:	2300      	movs	r3, #0
 800688a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	015a      	lsls	r2, r3, #5
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	4413      	add	r3, r2
 8006894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006898:	461a      	mov	r2, r3
 800689a:	2300      	movs	r3, #0
 800689c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	015a      	lsls	r2, r3, #5
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	4413      	add	r3, r2
 80068a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068aa:	461a      	mov	r2, r3
 80068ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80068b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	3301      	adds	r3, #1
 80068b6:	613b      	str	r3, [r7, #16]
 80068b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d3b7      	bcc.n	8006830 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80068e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	f043 0210 	orr.w	r2, r3, #16
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	699a      	ldr	r2, [r3, #24]
 80068f2:	4b10      	ldr	r3, [pc, #64]	; (8006934 <USB_DevInit+0x294>)
 80068f4:	4313      	orrs	r3, r2
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80068fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d005      	beq.n	800690c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	f043 0208 	orr.w	r2, r3, #8
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800690c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800690e:	2b01      	cmp	r3, #1
 8006910:	d107      	bne.n	8006922 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800691a:	f043 0304 	orr.w	r3, r3, #4
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006922:	7dfb      	ldrb	r3, [r7, #23]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3718      	adds	r7, #24
 8006928:	46bd      	mov	sp, r7
 800692a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800692e:	b004      	add	sp, #16
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	803c3800 	.word	0x803c3800

08006938 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006942:	2300      	movs	r3, #0
 8006944:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	019b      	lsls	r3, r3, #6
 800694a:	f043 0220 	orr.w	r2, r3, #32
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	3301      	adds	r3, #1
 8006956:	60fb      	str	r3, [r7, #12]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	4a09      	ldr	r2, [pc, #36]	; (8006980 <USB_FlushTxFifo+0x48>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d901      	bls.n	8006964 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e006      	b.n	8006972 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	f003 0320 	and.w	r3, r3, #32
 800696c:	2b20      	cmp	r3, #32
 800696e:	d0f0      	beq.n	8006952 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3714      	adds	r7, #20
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	00030d40 	.word	0x00030d40

08006984 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800698c:	2300      	movs	r3, #0
 800698e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2210      	movs	r2, #16
 8006994:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	3301      	adds	r3, #1
 800699a:	60fb      	str	r3, [r7, #12]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4a09      	ldr	r2, [pc, #36]	; (80069c4 <USB_FlushRxFifo+0x40>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d901      	bls.n	80069a8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e006      	b.n	80069b6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	f003 0310 	and.w	r3, r3, #16
 80069b0:	2b10      	cmp	r3, #16
 80069b2:	d0f0      	beq.n	8006996 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	00030d40 	.word	0x00030d40

080069c8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	460b      	mov	r3, r1
 80069d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	78fb      	ldrb	r3, [r7, #3]
 80069e2:	68f9      	ldr	r1, [r7, #12]
 80069e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069e8:	4313      	orrs	r3, r2
 80069ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b084      	sub	sp, #16
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a14:	f043 0302 	orr.w	r3, r3, #2
 8006a18:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006a1a:	2003      	movs	r0, #3
 8006a1c:	f7fb fcf4 	bl	8002408 <HAL_Delay>

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
	...

08006a2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006a34:	2300      	movs	r3, #0
 8006a36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	60fb      	str	r3, [r7, #12]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	4a13      	ldr	r2, [pc, #76]	; (8006a90 <USB_CoreReset+0x64>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d901      	bls.n	8006a4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e01b      	b.n	8006a82 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	daf2      	bge.n	8006a38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a52:	2300      	movs	r3, #0
 8006a54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	f043 0201 	orr.w	r2, r3, #1
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	3301      	adds	r3, #1
 8006a66:	60fb      	str	r3, [r7, #12]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	4a09      	ldr	r2, [pc, #36]	; (8006a90 <USB_CoreReset+0x64>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d901      	bls.n	8006a74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e006      	b.n	8006a82 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	f003 0301 	and.w	r3, r3, #1
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d0f0      	beq.n	8006a62 <USB_CoreReset+0x36>

  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3714      	adds	r7, #20
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	00030d40 	.word	0x00030d40

08006a94 <RB_init>:
#include "ring_buffer.h"

#define ABS(a) ((a>=0) ? (a) : -(a))

int RB_init(ring_buffer_t* rb, int size)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
    rb->buffer_end = rb->buffer + ((size<RB_MAX_SIZE) ? size : RB_MAX_SIZE);
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	2b10      	cmp	r3, #16
 8006aa4:	bfa8      	it	ge
 8006aa6:	2310      	movge	r3, #16
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	441a      	add	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	641a      	str	r2, [r3, #64]	; 0x40
    rb->size = size;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	683a      	ldr	r2, [r7, #0]
 8006ab4:	651a      	str	r2, [r3, #80]	; 0x50
    rb->data_start = rb->buffer;
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	645a      	str	r2, [r3, #68]	; 0x44
    rb->data_end = rb->buffer;
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	649a      	str	r2, [r3, #72]	; 0x48
    rb->count = 0;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	64da      	str	r2, [r3, #76]	; 0x4c
    return (size<=RB_MAX_SIZE) ? 0 : -1;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	2b10      	cmp	r3, #16
 8006acc:	dc01      	bgt.n	8006ad2 <RB_init+0x3e>
 8006ace:	2300      	movs	r3, #0
 8006ad0:	e001      	b.n	8006ad6 <RB_init+0x42>
 8006ad2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	370c      	adds	r7, #12
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <RB_push>:

int RB_push(ring_buffer_t* rb, int data)
{
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b082      	sub	sp, #8
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
 8006aea:	6039      	str	r1, [r7, #0]
    if (rb == NULL || rb->buffer == NULL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d002      	beq.n	8006af8 <RB_push+0x16>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d102      	bne.n	8006afe <RB_push+0x1c>
        return -1;
 8006af8:	f04f 33ff 	mov.w	r3, #4294967295
 8006afc:	e02e      	b.n	8006b5c <RB_push+0x7a>

    *rb->data_end = data;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	601a      	str	r2, [r3, #0]
    rb->data_end++;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b0a:	1d1a      	adds	r2, r3, #4
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	649a      	str	r2, [r3, #72]	; 0x48
    if (rb->data_end == rb->buffer_end)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d102      	bne.n	8006b22 <RB_push+0x40>
        rb->data_end = rb->buffer;
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	649a      	str	r2, [r3, #72]	; 0x48

    if (RB_full(rb)) {
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 f81e 	bl	8006b64 <RB_full>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d010      	beq.n	8006b50 <RB_push+0x6e>
        if ((rb->data_start + 1) == rb->buffer_end)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b32:	1d1a      	adds	r2, r3, #4
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d103      	bne.n	8006b44 <RB_push+0x62>
            rb->data_start = rb->buffer;
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	645a      	str	r2, [r3, #68]	; 0x44
 8006b42:	e00a      	b.n	8006b5a <RB_push+0x78>
        else
            rb->data_start++;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b48:	1d1a      	adds	r2, r3, #4
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	645a      	str	r2, [r3, #68]	; 0x44
 8006b4e:	e004      	b.n	8006b5a <RB_push+0x78>
    } else {
        rb->count++;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b54:	1c5a      	adds	r2, r3, #1
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    return 0;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3708      	adds	r7, #8
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <RB_full>:

    return data;
}

bool RB_full(ring_buffer_t* rb)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
    return rb->count == rb->size;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b74:	429a      	cmp	r2, r3
 8006b76:	bf0c      	ite	eq
 8006b78:	2301      	moveq	r3, #1
 8006b7a:	2300      	movne	r3, #0
 8006b7c:	b2db      	uxtb	r3, r3
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	370c      	adds	r7, #12
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr

08006b8a <RB_sum>:
    }
    //trace_printf("\n");
}

int RB_sum(ring_buffer_t*rb)
{
 8006b8a:	b480      	push	{r7}
 8006b8c:	b087      	sub	sp, #28
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
    int i=0;
 8006b92:	2300      	movs	r3, #0
 8006b94:	617b      	str	r3, [r7, #20]
    int sum=0;
 8006b96:	2300      	movs	r3, #0
 8006b98:	613b      	str	r3, [r7, #16]
    int *ptr;
    
    ptr = rb->data_start;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b9e:	60fb      	str	r3, [r7, #12]
    for(i=0;i<rb->count;i++)
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	617b      	str	r3, [r7, #20]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	da11      	bge.n	8006bd2 <RB_sum+0x48>
    {
        sum += *ptr++;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	1d1a      	adds	r2, r3, #4
 8006bb2:	60fa      	str	r2, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	693a      	ldr	r2, [r7, #16]
 8006bb8:	4413      	add	r3, r2
 8006bba:	613b      	str	r3, [r7, #16]
        if(ptr == rb->buffer_end)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d101      	bne.n	8006bca <RB_sum+0x40>
            ptr = rb->buffer;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	60fb      	str	r3, [r7, #12]
    for(i=0;i<rb->count;i++)
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	617b      	str	r3, [r7, #20]
 8006bd0:	e7e8      	b.n	8006ba4 <RB_sum+0x1a>
    }
    return sum;
 8006bd2:	693b      	ldr	r3, [r7, #16]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	371c      	adds	r7, #28
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <RB_mean>:

int RB_mean(ring_buffer_t*rb)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
    return RB_sum(rb)/rb->count;
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f7ff ffce 	bl	8006b8a <RB_sum>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bf4:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3708      	adds	r7, #8
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b08a      	sub	sp, #40	; 0x28
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8006c08:	4b27      	ldr	r3, [pc, #156]	; (8006ca8 <I2Cx_MspInit+0xa8>)
 8006c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c0c:	4a26      	ldr	r2, [pc, #152]	; (8006ca8 <I2Cx_MspInit+0xa8>)
 8006c0e:	f043 0302 	orr.w	r3, r3, #2
 8006c12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c14:	4b24      	ldr	r3, [pc, #144]	; (8006ca8 <I2Cx_MspInit+0xa8>)
 8006c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c18:	f003 0302 	and.w	r3, r3, #2
 8006c1c:	613b      	str	r3, [r7, #16]
 8006c1e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8006c20:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006c24:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8006c26:	2312      	movs	r3, #18
 8006c28:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8006c32:	2304      	movs	r3, #4
 8006c34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006c36:	f107 0314 	add.w	r3, r7, #20
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	481b      	ldr	r0, [pc, #108]	; (8006cac <I2Cx_MspInit+0xac>)
 8006c3e:	f7fb fe23 	bl	8002888 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006c42:	f107 0314 	add.w	r3, r7, #20
 8006c46:	4619      	mov	r1, r3
 8006c48:	4818      	ldr	r0, [pc, #96]	; (8006cac <I2Cx_MspInit+0xac>)
 8006c4a:	f7fb fe1d 	bl	8002888 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8006c4e:	4b16      	ldr	r3, [pc, #88]	; (8006ca8 <I2Cx_MspInit+0xa8>)
 8006c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c52:	4a15      	ldr	r2, [pc, #84]	; (8006ca8 <I2Cx_MspInit+0xa8>)
 8006c54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006c58:	6593      	str	r3, [r2, #88]	; 0x58
 8006c5a:	4b13      	ldr	r3, [pc, #76]	; (8006ca8 <I2Cx_MspInit+0xa8>)
 8006c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c62:	60fb      	str	r3, [r7, #12]
 8006c64:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8006c66:	4b10      	ldr	r3, [pc, #64]	; (8006ca8 <I2Cx_MspInit+0xa8>)
 8006c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6a:	4a0f      	ldr	r2, [pc, #60]	; (8006ca8 <I2Cx_MspInit+0xa8>)
 8006c6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006c70:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8006c72:	4b0d      	ldr	r3, [pc, #52]	; (8006ca8 <I2Cx_MspInit+0xa8>)
 8006c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c76:	4a0c      	ldr	r2, [pc, #48]	; (8006ca8 <I2Cx_MspInit+0xa8>)
 8006c78:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006c7c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8006c7e:	2200      	movs	r2, #0
 8006c80:	210f      	movs	r1, #15
 8006c82:	2021      	movs	r0, #33	; 0x21
 8006c84:	f7fb fcbd 	bl	8002602 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8006c88:	2021      	movs	r0, #33	; 0x21
 8006c8a:	f7fb fcd6 	bl	800263a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8006c8e:	2200      	movs	r2, #0
 8006c90:	210f      	movs	r1, #15
 8006c92:	2022      	movs	r0, #34	; 0x22
 8006c94:	f7fb fcb5 	bl	8002602 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8006c98:	2022      	movs	r0, #34	; 0x22
 8006c9a:	f7fb fcce 	bl	800263a <HAL_NVIC_EnableIRQ>
}
 8006c9e:	bf00      	nop
 8006ca0:	3728      	adds	r7, #40	; 0x28
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	40021000 	.word	0x40021000
 8006cac:	48000400 	.word	0x48000400

08006cb0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a12      	ldr	r2, [pc, #72]	; (8006d04 <I2Cx_Init+0x54>)
 8006cbc:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a11      	ldr	r2, [pc, #68]	; (8006d08 <I2Cx_Init+0x58>)
 8006cc2:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f7ff ff89 	bl	8006c00 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f7fc f8d3 	bl	8002e9a <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7fd f82e 	bl	8003d58 <HAL_I2CEx_ConfigAnalogFilter>
}
 8006cfc:	bf00      	nop
 8006cfe:	3708      	adds	r7, #8
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	40005800 	.word	0x40005800
 8006d08:	00702681 	.word	0x00702681

08006d0c <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b08a      	sub	sp, #40	; 0x28
 8006d10:	af04      	add	r7, sp, #16
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	4608      	mov	r0, r1
 8006d16:	4611      	mov	r1, r2
 8006d18:	461a      	mov	r2, r3
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	72fb      	strb	r3, [r7, #11]
 8006d1e:	460b      	mov	r3, r1
 8006d20:	813b      	strh	r3, [r7, #8]
 8006d22:	4613      	mov	r3, r2
 8006d24:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8006d26:	2300      	movs	r3, #0
 8006d28:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8006d2a:	7afb      	ldrb	r3, [r7, #11]
 8006d2c:	b299      	uxth	r1, r3
 8006d2e:	88f8      	ldrh	r0, [r7, #6]
 8006d30:	893a      	ldrh	r2, [r7, #8]
 8006d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d36:	9302      	str	r3, [sp, #8]
 8006d38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d3a:	9301      	str	r3, [sp, #4]
 8006d3c:	6a3b      	ldr	r3, [r7, #32]
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	4603      	mov	r3, r0
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f7fc fc66 	bl	8003614 <HAL_I2C_Mem_Read>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8006d4c:	7dfb      	ldrb	r3, [r7, #23]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d004      	beq.n	8006d5c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8006d52:	7afb      	ldrb	r3, [r7, #11]
 8006d54:	4619      	mov	r1, r3
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f000 f832 	bl	8006dc0 <I2Cx_Error>
  }
  return status;
 8006d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3718      	adds	r7, #24
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b08a      	sub	sp, #40	; 0x28
 8006d6a:	af04      	add	r7, sp, #16
 8006d6c:	60f8      	str	r0, [r7, #12]
 8006d6e:	4608      	mov	r0, r1
 8006d70:	4611      	mov	r1, r2
 8006d72:	461a      	mov	r2, r3
 8006d74:	4603      	mov	r3, r0
 8006d76:	72fb      	strb	r3, [r7, #11]
 8006d78:	460b      	mov	r3, r1
 8006d7a:	813b      	strh	r3, [r7, #8]
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8006d80:	2300      	movs	r3, #0
 8006d82:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8006d84:	7afb      	ldrb	r3, [r7, #11]
 8006d86:	b299      	uxth	r1, r3
 8006d88:	88f8      	ldrh	r0, [r7, #6]
 8006d8a:	893a      	ldrh	r2, [r7, #8]
 8006d8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d90:	9302      	str	r3, [sp, #8]
 8006d92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d94:	9301      	str	r3, [sp, #4]
 8006d96:	6a3b      	ldr	r3, [r7, #32]
 8006d98:	9300      	str	r3, [sp, #0]
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f7fc fb25 	bl	80033ec <HAL_I2C_Mem_Write>
 8006da2:	4603      	mov	r3, r0
 8006da4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8006da6:	7dfb      	ldrb	r3, [r7, #23]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d004      	beq.n	8006db6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8006dac:	7afb      	ldrb	r3, [r7, #11]
 8006dae:	4619      	mov	r1, r3
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f000 f805 	bl	8006dc0 <I2Cx_Error>
  }
  return status;
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3718      	adds	r7, #24
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	460b      	mov	r3, r1
 8006dca:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f7fc f8f3 	bl	8002fb8 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f7ff ff6c 	bl	8006cb0 <I2Cx_Init>
}
 8006dd8:	bf00      	nop
 8006dda:	3708      	adds	r7, #8
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8006de4:	4802      	ldr	r0, [pc, #8]	; (8006df0 <SENSOR_IO_Init+0x10>)
 8006de6:	f7ff ff63 	bl	8006cb0 <I2Cx_Init>
}
 8006dea:	bf00      	nop
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	20003778 	.word	0x20003778

08006df4 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af02      	add	r7, sp, #8
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	71fb      	strb	r3, [r7, #7]
 8006dfe:	460b      	mov	r3, r1
 8006e00:	71bb      	strb	r3, [r7, #6]
 8006e02:	4613      	mov	r3, r2
 8006e04:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8006e06:	79bb      	ldrb	r3, [r7, #6]
 8006e08:	b29a      	uxth	r2, r3
 8006e0a:	79f9      	ldrb	r1, [r7, #7]
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	9301      	str	r3, [sp, #4]
 8006e10:	1d7b      	adds	r3, r7, #5
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	2301      	movs	r3, #1
 8006e16:	4803      	ldr	r0, [pc, #12]	; (8006e24 <SENSOR_IO_Write+0x30>)
 8006e18:	f7ff ffa5 	bl	8006d66 <I2Cx_WriteMultiple>
}
 8006e1c:	bf00      	nop
 8006e1e:	3708      	adds	r7, #8
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	20003778 	.word	0x20003778

08006e28 <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af02      	add	r7, sp, #8
 8006e2e:	4603      	mov	r3, r0
 8006e30:	460a      	mov	r2, r1
 8006e32:	71fb      	strb	r3, [r7, #7]
 8006e34:	4613      	mov	r3, r2
 8006e36:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8006e3c:	79bb      	ldrb	r3, [r7, #6]
 8006e3e:	b29a      	uxth	r2, r3
 8006e40:	79f9      	ldrb	r1, [r7, #7]
 8006e42:	2301      	movs	r3, #1
 8006e44:	9301      	str	r3, [sp, #4]
 8006e46:	f107 030f 	add.w	r3, r7, #15
 8006e4a:	9300      	str	r3, [sp, #0]
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	4804      	ldr	r0, [pc, #16]	; (8006e60 <SENSOR_IO_Read+0x38>)
 8006e50:	f7ff ff5c 	bl	8006d0c <I2Cx_ReadMultiple>

  return read_value;
 8006e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	20003778 	.word	0x20003778

08006e64 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af02      	add	r7, sp, #8
 8006e6a:	603a      	str	r2, [r7, #0]
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	4603      	mov	r3, r0
 8006e70:	71fb      	strb	r3, [r7, #7]
 8006e72:	460b      	mov	r3, r1
 8006e74:	71bb      	strb	r3, [r7, #6]
 8006e76:	4613      	mov	r3, r2
 8006e78:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8006e7a:	79bb      	ldrb	r3, [r7, #6]
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	79f9      	ldrb	r1, [r7, #7]
 8006e80:	88bb      	ldrh	r3, [r7, #4]
 8006e82:	9301      	str	r3, [sp, #4]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	9300      	str	r3, [sp, #0]
 8006e88:	2301      	movs	r3, #1
 8006e8a:	4804      	ldr	r0, [pc, #16]	; (8006e9c <SENSOR_IO_ReadMultiple+0x38>)
 8006e8c:	f7ff ff3e 	bl	8006d0c <I2Cx_ReadMultiple>
 8006e90:	4603      	mov	r3, r0
 8006e92:	b29b      	uxth	r3, r3
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3708      	adds	r7, #8
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	20003778 	.word	0x20003778

08006ea0 <tof_gestures_initSWIPE_1>:
 */

#include "tof_gestures.h"
#include "tof_gestures_SWIPE_1.h"

int tof_gestures_initSWIPE_1(Gesture_SWIPE_1_Data_t *data){
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
    int status=0;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	60fb      	str	r3, [r7, #12]
    status |= (int)(RB_init(&(data->rangeList),SWIPE_1_BUFFER_SIZE));
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	3304      	adds	r3, #4
 8006eb0:	2110      	movs	r1, #16
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7ff fdee 	bl	8006a94 <RB_init>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	60fb      	str	r3, [r7, #12]
    data->meanBackground = 0;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	659a      	str	r2, [r3, #88]	; 0x58
    data->meanHand = 0;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	65da      	str	r2, [r3, #92]	; 0x5c
    data->gestureCode = GESTURES_NULL;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	601a      	str	r2, [r3, #0]
    data->cpt = SWIPE_1_SENSITIVITY;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	665a      	str	r2, [r3, #100]	; 0x64
    return status;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
	...

08006ee4 <tof_gestures_detectSWIPE_1>:

int tof_gestures_detectSWIPE_1(int32_t range_mm, Gesture_SWIPE_1_Data_t *data){
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
    int time = GET_TIME_STAMP();
 8006eee:	f242 7310 	movw	r3, #10000	; 0x2710
 8006ef2:	60fb      	str	r3, [r7, #12]

    /* Default state */
    if (data->gestureCode == GESTURES_NULL){
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d143      	bne.n	8006f84 <tof_gestures_detectSWIPE_1+0xa0>
    	// Calculate background distance (averaging)
    	data->meanBackground = (data->rangeList.count==0) ? 0 : RB_mean(&(data->rangeList));
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d006      	beq.n	8006f12 <tof_gestures_detectSWIPE_1+0x2e>
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	3304      	adds	r3, #4
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7ff fe69 	bl	8006be0 <RB_mean>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	e000      	b.n	8006f14 <tof_gestures_detectSWIPE_1+0x30>
 8006f12:	2200      	movs	r2, #0
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	659a      	str	r2, [r3, #88]	; 0x58
    	// Check current distance vs background distance
    	if (range_mm < (((100-SWIPE_1_BACKGROUND_VARIATION) * data->meanBackground) / 100)){
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	4413      	add	r3, r2
 8006f22:	011b      	lsls	r3, r3, #4
 8006f24:	4a60      	ldr	r2, [pc, #384]	; (80070a8 <tof_gestures_detectSWIPE_1+0x1c4>)
 8006f26:	fb82 1203 	smull	r1, r2, r2, r3
 8006f2a:	1152      	asrs	r2, r2, #5
 8006f2c:	17db      	asrs	r3, r3, #31
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	da1f      	bge.n	8006f76 <tof_gestures_detectSWIPE_1+0x92>
    		// big variation detected => hand entering in FoV
    		if (data->cpt == 0) {
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d115      	bne.n	8006f6a <tof_gestures_detectSWIPE_1+0x86>
    			// Potential spikes (duster ?) skipped
    			data->cpt = SWIPE_1_SENSITIVITY;
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	2200      	movs	r2, #0
 8006f42:	665a      	str	r2, [r3, #100]	; 0x64
				data->gestureCode = GESTURES_HAND_ENTERING;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	2205      	movs	r2, #5
 8006f48:	601a      	str	r2, [r3, #0]
				RB_init(&(data->rangeList),SWIPE_1_BUFFER_SIZE);
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	3304      	adds	r3, #4
 8006f4e:	2110      	movs	r1, #16
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7ff fd9f 	bl	8006a94 <RB_init>
				RB_push(&(data->rangeList), range_mm);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	3304      	adds	r3, #4
 8006f5a:	6879      	ldr	r1, [r7, #4]
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7ff fdc0 	bl	8006ae2 <RB_push>
				data->timestamp = time;
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	661a      	str	r2, [r3, #96]	; 0x60
 8006f68:	e098      	b.n	800709c <tof_gestures_detectSWIPE_1+0x1b8>
				//TOF_GESTURES_DEBUG(SWIPE_1,"(background=%d, current=%d) => HAND_ENTERING", data->meanBackground, range_mm);
    		} else {
    			data->cpt--;
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f6e:	1e5a      	subs	r2, r3, #1
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	665a      	str	r2, [r3, #100]	; 0x64
 8006f74:	e092      	b.n	800709c <tof_gestures_detectSWIPE_1+0x1b8>
    			//TOF_GESTURES_DEBUG(SWIPE_1,"(background=%d, current=%d) => SKIP", data->meanBackground, range_mm);
    		}
    	}else{
    		// no variation => keep averaging background
    		RB_push(&(data->rangeList), range_mm);
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	3304      	adds	r3, #4
 8006f7a:	6879      	ldr	r1, [r7, #4]
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7ff fdb0 	bl	8006ae2 <RB_push>
 8006f82:	e08b      	b.n	800709c <tof_gestures_detectSWIPE_1+0x1b8>
    	}

    /* Hand entering */
    } else if (data->gestureCode == GESTURES_HAND_ENTERING){
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2b05      	cmp	r3, #5
 8006f8a:	d156      	bne.n	800703a <tof_gestures_detectSWIPE_1+0x156>
    	// Calculate hand distance (averaging)
    	data->meanHand = (data->rangeList.count==0) ? 0 : RB_mean(&(data->rangeList));
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d006      	beq.n	8006fa2 <tof_gestures_detectSWIPE_1+0xbe>
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	3304      	adds	r3, #4
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f7ff fe21 	bl	8006be0 <RB_mean>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	e000      	b.n	8006fa4 <tof_gestures_detectSWIPE_1+0xc0>
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	65da      	str	r2, [r3, #92]	; 0x5c
    	// Check current distance vs hand mean distance
    	if ((range_mm < ((data->meanHand * (100-SWIPE_1_HAND_VARIATION)) / 100)) || ((((data->meanHand * (100+SWIPE_1_HAND_VARIATION)) / 100) < range_mm))){
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006fac:	4613      	mov	r3, r2
 8006fae:	011b      	lsls	r3, r3, #4
 8006fb0:	1a9b      	subs	r3, r3, r2
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	4a3c      	ldr	r2, [pc, #240]	; (80070a8 <tof_gestures_detectSWIPE_1+0x1c4>)
 8006fb6:	fb82 1203 	smull	r1, r2, r2, r3
 8006fba:	1152      	asrs	r2, r2, #5
 8006fbc:	17db      	asrs	r3, r3, #31
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	db0d      	blt.n	8006fe2 <tof_gestures_detectSWIPE_1+0xfe>
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fca:	228c      	movs	r2, #140	; 0x8c
 8006fcc:	fb02 f303 	mul.w	r3, r2, r3
 8006fd0:	4a35      	ldr	r2, [pc, #212]	; (80070a8 <tof_gestures_detectSWIPE_1+0x1c4>)
 8006fd2:	fb82 1203 	smull	r1, r2, r2, r3
 8006fd6:	1152      	asrs	r2, r2, #5
 8006fd8:	17db      	asrs	r3, r3, #31
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	dd12      	ble.n	8007008 <tof_gestures_detectSWIPE_1+0x124>
    		// Big variation => Hand leaving
			data->gestureCode = GESTURES_HAND_LEAVING;
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	2206      	movs	r2, #6
 8006fe6:	601a      	str	r2, [r3, #0]
			RB_init(&(data->rangeList),SWIPE_1_BUFFER_SIZE);
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	3304      	adds	r3, #4
 8006fec:	2110      	movs	r1, #16
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7ff fd50 	bl	8006a94 <RB_init>
			RB_push(&(data->rangeList), range_mm);
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	3304      	adds	r3, #4
 8006ff8:	6879      	ldr	r1, [r7, #4]
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7ff fd71 	bl	8006ae2 <RB_push>
			data->timestamp = time;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	661a      	str	r2, [r3, #96]	; 0x60
 8007006:	e049      	b.n	800709c <tof_gestures_detectSWIPE_1+0x1b8>
			//TOF_GESTURES_DEBUG(SWIPE_1,"(meanHand=%d, current=%d) => HAND_LEAVING", data->meanHand, range_mm);
    	} else if ((time - data->timestamp) > SWIPE_1_MAX_SWIPE_DURATION) {
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007014:	dd0a      	ble.n	800702c <tof_gestures_detectSWIPE_1+0x148>
    		// Too slow => discard (swipe is too slow, this may be a background change for a long time)
			data->gestureCode = GESTURES_DISCARDED_TOO_SLOW;
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	f06f 0202 	mvn.w	r2, #2
 800701c:	601a      	str	r2, [r3, #0]
			RB_init(&(data->rangeList),SWIPE_1_BUFFER_SIZE);
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	3304      	adds	r3, #4
 8007022:	2110      	movs	r1, #16
 8007024:	4618      	mov	r0, r3
 8007026:	f7ff fd35 	bl	8006a94 <RB_init>
 800702a:	e037      	b.n	800709c <tof_gestures_detectSWIPE_1+0x1b8>
			//TOF_GESTURES_DEBUG(SWIPE_1,"DISCARDED_TOO_SLOW");
    	} else {
    		// No big variation => remains in this state
			RB_push(&(data->rangeList), range_mm);
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	3304      	adds	r3, #4
 8007030:	6879      	ldr	r1, [r7, #4]
 8007032:	4618      	mov	r0, r3
 8007034:	f7ff fd55 	bl	8006ae2 <RB_push>
 8007038:	e030      	b.n	800709c <tof_gestures_detectSWIPE_1+0x1b8>
			//TOF_GESTURES_DEBUG(SWIPE_1, "Wait (meanHand=%d, current=%d)", data->meanHand, range_mm);
    	}

    /* Hand leaving */
    } else if (data->gestureCode == GESTURES_HAND_LEAVING){
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2b06      	cmp	r3, #6
 8007040:	d129      	bne.n	8007096 <tof_gestures_detectSWIPE_1+0x1b2>
    	// Check current distance vs background distance (previously calculated)
    	if ((((data->meanBackground * (100-SWIPE_1_BACKGROUND_VARIATION)) / 100) < range_mm)){
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007046:	4613      	mov	r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	4413      	add	r3, r2
 800704c:	011b      	lsls	r3, r3, #4
 800704e:	4a16      	ldr	r2, [pc, #88]	; (80070a8 <tof_gestures_detectSWIPE_1+0x1c4>)
 8007050:	fb82 1203 	smull	r1, r2, r2, r3
 8007054:	1152      	asrs	r2, r2, #5
 8007056:	17db      	asrs	r3, r3, #31
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	429a      	cmp	r2, r3
 800705e:	dd09      	ble.n	8007074 <tof_gestures_detectSWIPE_1+0x190>
    		// Almost same => Swipe detected/finished
    		data->gestureCode = GESTURES_SINGLE_SWIPE;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	2202      	movs	r2, #2
 8007064:	601a      	str	r2, [r3, #0]
    		//data->cpt = 0;
    		RB_init(&(data->rangeList),SWIPE_1_BUFFER_SIZE);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	3304      	adds	r3, #4
 800706a:	2110      	movs	r1, #16
 800706c:	4618      	mov	r0, r3
 800706e:	f7ff fd11 	bl	8006a94 <RB_init>
 8007072:	e013      	b.n	800709c <tof_gestures_detectSWIPE_1+0x1b8>
    		//return_code = GESTURES_SINGLE_SWIPE;
    		//TOF_GESTURES_DEBUG(SWIPE_1, "(background=%d, current==%d) => SINGLE_SWIPE\n", data->meanBackground, range_mm);
    		//uart_printf("2 : Next state : %d, (background=%d), range=%d (SWIPE)\n", data->gestureCode, data->meanBackground, range_mm);
    	} else if ((time - data->timestamp) > SWIPE_1_BACKGROUND_TIMEOUT){
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	2b64      	cmp	r3, #100	; 0x64
 800707e:	dd0d      	ble.n	800709c <tof_gestures_detectSWIPE_1+0x1b8>
    		// To slow to converge back to background distance => discard (background may have change during the gesture)
    		data->gestureCode = GESTURES_DISCARDED;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	f06f 0201 	mvn.w	r2, #1
 8007086:	601a      	str	r2, [r3, #0]
			RB_init(&(data->rangeList),SWIPE_1_BUFFER_SIZE);
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	3304      	adds	r3, #4
 800708c:	2110      	movs	r1, #16
 800708e:	4618      	mov	r0, r3
 8007090:	f7ff fd00 	bl	8006a94 <RB_init>
 8007094:	e002      	b.n	800709c <tof_gestures_detectSWIPE_1+0x1b8>
    		//TOF_GESTURES_DEBUG(SWIPE_1,"Wait (background=%d, current=%d)", data->meanBackground, range_mm);
    	}

    /* Swipe detected or discarded */
    } else {
    	data->gestureCode = GESTURES_NULL;
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	2200      	movs	r2, #0
 800709a:	601a      	str	r2, [r3, #0]
    }

    return data->gestureCode;
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	51eb851f 	.word	0x51eb851f

080070ac <VL53L0X_GetDeviceInfo>:

}

VL53L0X_Error VL53L0X_GetDeviceInfo(VL53L0X_DEV Dev,
	VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070b6:	2300      	movs	r3, #0
 80070b8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
 80070ba:	6839      	ldr	r1, [r7, #0]
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f004 fff7 	bl	800c0b0 <VL53L0X_get_device_info>
 80070c2:	4603      	mov	r3, r0
 80070c4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80070c6:	7bfb      	ldrb	r3, [r7, #15]
 80070c8:	b25b      	sxtb	r3, r3
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b084      	sub	sp, #16
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070dc:	2300      	movs	r3, #0
 80070de:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80070e0:	6839      	ldr	r1, [r7, #0]
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f001 fe07 	bl	8008cf6 <VL53L0X_get_offset_calibration_data_micro_meter>
 80070e8:	4603      	mov	r3, r0
 80070ea:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80070ec:	7bfb      	ldrb	r3, [r7, #15]
 80070ee:	b25b      	sxtb	r3, r3
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b0a4      	sub	sp, #144	; 0x90
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007100:	2300      	movs	r3, #0
 8007102:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8007106:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800710a:	b25b      	sxtb	r3, r3
 800710c:	2b00      	cmp	r3, #0
 800710e:	d107      	bne.n	8007120 <VL53L0X_DataInit+0x28>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8007110:	2200      	movs	r2, #0
 8007112:	2188      	movs	r1, #136	; 0x88
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f005 f98b 	bl	800c430 <VL53L0X_WrByte>
 800711a:	4603      	mov	r3, r0
 800711c:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800712e:	f8a3 217e 	strh.w	r2, [r3, #382]	; 0x17e

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660
	 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4abc      	ldr	r2, [pc, #752]	; (8007428 <VL53L0X_DataInit+0x330>)
 8007136:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	619a      	str	r2, [r3, #24]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8007140:	f107 0310 	add.w	r3, r7, #16
 8007144:	4619      	mov	r1, r3
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 fb18 	bl	800777c <VL53L0X_GetDeviceParameters>
 800714c:	4603      	mov	r3, r0
 800714e:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
	if (Status == VL53L0X_ERROR_NONE) {
 8007152:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8007156:	b25b      	sxtb	r3, r3
 8007158:	2b00      	cmp	r3, #0
 800715a:	d130      	bne.n	80071be <VL53L0X_DataInit+0xc6>
		/* initialize PAL values */
		CurrentParameters.DeviceMode =
 800715c:	2300      	movs	r3, #0
 800715e:	743b      	strb	r3, [r7, #16]
					VL53L0X_DEVICEMODE_SINGLE_RANGING;
		CurrentParameters.HistogramMode =
 8007160:	2300      	movs	r3, #0
 8007162:	747b      	strb	r3, [r7, #17]
					VL53L0X_HISTOGRAMMODE_DISABLED;

		/* Dmax lookup table */
	/* 0.0 */
	CurrentParameters.dmax_lut.ambRate_mcps[0] = (FixPoint1616_t)0x00000000;
 8007164:	2300      	movs	r3, #0
 8007166:	64fb      	str	r3, [r7, #76]	; 0x4c
	/* 1200 */
	CurrentParameters.dmax_lut.dmax_mm[0]      = (FixPoint1616_t)0x04B00000;
 8007168:	f04f 6396 	mov.w	r3, #78643200	; 0x4b00000
 800716c:	66bb      	str	r3, [r7, #104]	; 0x68
	/* 0.7 */
	CurrentParameters.dmax_lut.ambRate_mcps[1] = (FixPoint1616_t)0x0000B333;
 800716e:	f24b 3333 	movw	r3, #45875	; 0xb333
 8007172:	653b      	str	r3, [r7, #80]	; 0x50
	/* 1100 */
	CurrentParameters.dmax_lut.dmax_mm[1]      = (FixPoint1616_t)0x044C0000;
 8007174:	4bad      	ldr	r3, [pc, #692]	; (800742c <VL53L0X_DataInit+0x334>)
 8007176:	66fb      	str	r3, [r7, #108]	; 0x6c
	/* 2 */
	CurrentParameters.dmax_lut.ambRate_mcps[2] = (FixPoint1616_t)0x00020000;
 8007178:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800717c:	657b      	str	r3, [r7, #84]	; 0x54
	/* 900 */
	CurrentParameters.dmax_lut.dmax_mm[2]      = (FixPoint1616_t)0x03840000;
 800717e:	f04f 7361 	mov.w	r3, #58982400	; 0x3840000
 8007182:	673b      	str	r3, [r7, #112]	; 0x70
	/* 3.8 */
	CurrentParameters.dmax_lut.ambRate_mcps[3] = (FixPoint1616_t)0x0003CCCC;
 8007184:	4baa      	ldr	r3, [pc, #680]	; (8007430 <VL53L0X_DataInit+0x338>)
 8007186:	65bb      	str	r3, [r7, #88]	; 0x58
	/* 750 */
	CurrentParameters.dmax_lut.dmax_mm[3]      = (FixPoint1616_t)0x02EE0000;
 8007188:	4baa      	ldr	r3, [pc, #680]	; (8007434 <VL53L0X_DataInit+0x33c>)
 800718a:	677b      	str	r3, [r7, #116]	; 0x74
	/* 7.3 */
	CurrentParameters.dmax_lut.ambRate_mcps[4] = (FixPoint1616_t)0x00074CCC;
 800718c:	4baa      	ldr	r3, [pc, #680]	; (8007438 <VL53L0X_DataInit+0x340>)
 800718e:	65fb      	str	r3, [r7, #92]	; 0x5c
	/* 550 */
	CurrentParameters.dmax_lut.dmax_mm[4]      = (FixPoint1616_t)0x02260000;
 8007190:	4baa      	ldr	r3, [pc, #680]	; (800743c <VL53L0X_DataInit+0x344>)
 8007192:	67bb      	str	r3, [r7, #120]	; 0x78
	/* 10 */
	CurrentParameters.dmax_lut.ambRate_mcps[5] = (FixPoint1616_t)0x000A0000;
 8007194:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 8007198:	663b      	str	r3, [r7, #96]	; 0x60
	/* 500 */
	CurrentParameters.dmax_lut.dmax_mm[5]      = (FixPoint1616_t)0x01F40000;
 800719a:	f04f 73fa 	mov.w	r3, #32768000	; 0x1f40000
 800719e:	67fb      	str	r3, [r7, #124]	; 0x7c
	/* 15 */
	CurrentParameters.dmax_lut.ambRate_mcps[6] = (FixPoint1616_t)0x000F0000;
 80071a0:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 80071a4:	667b      	str	r3, [r7, #100]	; 0x64
	/* 400 */
	CurrentParameters.dmax_lut.dmax_mm[6]      = (FixPoint1616_t)0x01900000;
 80071a6:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
 80071aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	3308      	adds	r3, #8
 80071b2:	f107 0110 	add.w	r1, r7, #16
 80071b6:	2278      	movs	r2, #120	; 0x78
 80071b8:	4618      	mov	r0, r3
 80071ba:	f008 fe17 	bl	800fdec <memcpy>
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2264      	movs	r2, #100	; 0x64
 80071c2:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f44f 7261 	mov.w	r2, #900	; 0x384
 80071cc:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80071d6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80071e0:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80071ec:	2201      	movs	r2, #1
 80071ee:	2180      	movs	r1, #128	; 0x80
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f005 f91d 	bl	800c430 <VL53L0X_WrByte>
 80071f6:	4603      	mov	r3, r0
 80071f8:	461a      	mov	r2, r3
 80071fa:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80071fe:	b25b      	sxtb	r3, r3
 8007200:	4313      	orrs	r3, r2
 8007202:	b25b      	sxtb	r3, r3
 8007204:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007208:	2201      	movs	r2, #1
 800720a:	21ff      	movs	r1, #255	; 0xff
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f005 f90f 	bl	800c430 <VL53L0X_WrByte>
 8007212:	4603      	mov	r3, r0
 8007214:	461a      	mov	r2, r3
 8007216:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800721a:	b25b      	sxtb	r3, r3
 800721c:	4313      	orrs	r3, r2
 800721e:	b25b      	sxtb	r3, r3
 8007220:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007224:	2200      	movs	r2, #0
 8007226:	2100      	movs	r1, #0
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f005 f901 	bl	800c430 <VL53L0X_WrByte>
 800722e:	4603      	mov	r3, r0
 8007230:	461a      	mov	r2, r3
 8007232:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8007236:	b25b      	sxtb	r3, r3
 8007238:	4313      	orrs	r3, r2
 800723a:	b25b      	sxtb	r3, r3
 800723c:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8007240:	f107 030f 	add.w	r3, r7, #15
 8007244:	461a      	mov	r2, r3
 8007246:	2191      	movs	r1, #145	; 0x91
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f004 fff6 	bl	800c23a <VL53L0X_RdByte>
 800724e:	4603      	mov	r3, r0
 8007250:	461a      	mov	r2, r3
 8007252:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8007256:	b25b      	sxtb	r3, r3
 8007258:	4313      	orrs	r3, r2
 800725a:	b25b      	sxtb	r3, r3
 800725c:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8007260:	7bfa      	ldrb	r2, [r7, #15]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007268:	2201      	movs	r2, #1
 800726a:	2100      	movs	r1, #0
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f005 f8df 	bl	800c430 <VL53L0X_WrByte>
 8007272:	4603      	mov	r3, r0
 8007274:	461a      	mov	r2, r3
 8007276:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800727a:	b25b      	sxtb	r3, r3
 800727c:	4313      	orrs	r3, r2
 800727e:	b25b      	sxtb	r3, r3
 8007280:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007284:	2200      	movs	r2, #0
 8007286:	21ff      	movs	r1, #255	; 0xff
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f005 f8d1 	bl	800c430 <VL53L0X_WrByte>
 800728e:	4603      	mov	r3, r0
 8007290:	461a      	mov	r2, r3
 8007292:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8007296:	b25b      	sxtb	r3, r3
 8007298:	4313      	orrs	r3, r2
 800729a:	b25b      	sxtb	r3, r3
 800729c:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80072a0:	2200      	movs	r2, #0
 80072a2:	2180      	movs	r1, #128	; 0x80
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f005 f8c3 	bl	800c430 <VL53L0X_WrByte>
 80072aa:	4603      	mov	r3, r0
 80072ac:	461a      	mov	r2, r3
 80072ae:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80072b2:	b25b      	sxtb	r3, r3
 80072b4:	4313      	orrs	r3, r2
 80072b6:	b25b      	sxtb	r3, r3
 80072b8:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80072bc:	2300      	movs	r3, #0
 80072be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80072c2:	e01a      	b.n	80072fa <VL53L0X_DataInit+0x202>
		if (Status == VL53L0X_ERROR_NONE)
 80072c4:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80072c8:	b25b      	sxtb	r3, r3
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d11a      	bne.n	8007304 <VL53L0X_DataInit+0x20c>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 80072ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	2201      	movs	r2, #1
 80072d6:	4619      	mov	r1, r3
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 fda1 	bl	8007e20 <VL53L0X_SetLimitCheckEnable>
 80072de:	4603      	mov	r3, r0
 80072e0:	461a      	mov	r2, r3
 80072e2:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80072e6:	b25b      	sxtb	r3, r3
 80072e8:	4313      	orrs	r3, r2
 80072ea:	b25b      	sxtb	r3, r3
 80072ec:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80072f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072f4:	3301      	adds	r3, #1
 80072f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80072fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072fe:	2b05      	cmp	r3, #5
 8007300:	dde0      	ble.n	80072c4 <VL53L0X_DataInit+0x1cc>
 8007302:	e000      	b.n	8007306 <VL53L0X_DataInit+0x20e>
		else
			break;
 8007304:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8007306:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800730a:	b25b      	sxtb	r3, r3
 800730c:	2b00      	cmp	r3, #0
 800730e:	d107      	bne.n	8007320 <VL53L0X_DataInit+0x228>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007310:	2200      	movs	r2, #0
 8007312:	2102      	movs	r1, #2
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 fd83 	bl	8007e20 <VL53L0X_SetLimitCheckEnable>
 800731a:	4603      	mov	r3, r0
 800731c:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8007320:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8007324:	b25b      	sxtb	r3, r3
 8007326:	2b00      	cmp	r3, #0
 8007328:	d107      	bne.n	800733a <VL53L0X_DataInit+0x242>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800732a:	2200      	movs	r2, #0
 800732c:	2103      	movs	r1, #3
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 fd76 	bl	8007e20 <VL53L0X_SetLimitCheckEnable>
 8007334:	4603      	mov	r3, r0
 8007336:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800733a:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800733e:	b25b      	sxtb	r3, r3
 8007340:	2b00      	cmp	r3, #0
 8007342:	d107      	bne.n	8007354 <VL53L0X_DataInit+0x25c>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007344:	2200      	movs	r2, #0
 8007346:	2104      	movs	r1, #4
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 fd69 	bl	8007e20 <VL53L0X_SetLimitCheckEnable>
 800734e:	4603      	mov	r3, r0
 8007350:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8007354:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8007358:	b25b      	sxtb	r3, r3
 800735a:	2b00      	cmp	r3, #0
 800735c:	d107      	bne.n	800736e <VL53L0X_DataInit+0x276>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800735e:	2200      	movs	r2, #0
 8007360:	2105      	movs	r1, #5
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fd5c 	bl	8007e20 <VL53L0X_SetLimitCheckEnable>
 8007368:	4603      	mov	r3, r0
 800736a:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 800736e:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8007372:	b25b      	sxtb	r3, r3
 8007374:	2b00      	cmp	r3, #0
 8007376:	d108      	bne.n	800738a <VL53L0X_DataInit+0x292>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007378:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800737c:	2100      	movs	r1, #0
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fdfe 	bl	8007f80 <VL53L0X_SetLimitCheckValue>
 8007384:	4603      	mov	r3, r0
 8007386:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800738a:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800738e:	b25b      	sxtb	r3, r3
 8007390:	2b00      	cmp	r3, #0
 8007392:	d108      	bne.n	80073a6 <VL53L0X_DataInit+0x2ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007394:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007398:	2101      	movs	r1, #1
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 fdf0 	bl	8007f80 <VL53L0X_SetLimitCheckValue>
 80073a0:	4603      	mov	r3, r0
 80073a2:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80073a6:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80073aa:	b25b      	sxtb	r3, r3
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d108      	bne.n	80073c2 <VL53L0X_DataInit+0x2ca>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80073b0:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 80073b4:	2102      	movs	r1, #2
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fde2 	bl	8007f80 <VL53L0X_SetLimitCheckValue>
 80073bc:	4603      	mov	r3, r0
 80073be:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80073c2:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80073c6:	b25b      	sxtb	r3, r3
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d107      	bne.n	80073dc <VL53L0X_DataInit+0x2e4>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80073cc:	2200      	movs	r2, #0
 80073ce:	2103      	movs	r1, #3
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 fdd5 	bl	8007f80 <VL53L0X_SetLimitCheckValue>
 80073d6:	4603      	mov	r3, r0
 80073d8:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80073dc:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80073e0:	b25b      	sxtb	r3, r3
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d10f      	bne.n	8007406 <VL53L0X_DataInit+0x30e>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	22ff      	movs	r2, #255	; 0xff
 80073ea:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80073ee:	22ff      	movs	r2, #255	; 0xff
 80073f0:	2101      	movs	r1, #1
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f005 f81c 	bl	800c430 <VL53L0X_WrByte>
 80073f8:	4603      	mov	r3, r0
 80073fa:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit
		 */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2201      	movs	r2, #1
 8007402:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
	}

	if (Status == VL53L0X_ERROR_NONE)
 8007406:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800740a:	b25b      	sxtb	r3, r3
 800740c:	2b00      	cmp	r3, #0
 800740e:	d103      	bne.n	8007418 <VL53L0X_DataInit+0x320>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141


	LOG_FUNCTION_END(Status);
	return Status;
 8007418:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800741c:	b25b      	sxtb	r3, r3
}
 800741e:	4618      	mov	r0, r3
 8007420:	3790      	adds	r7, #144	; 0x90
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	000970a4 	.word	0x000970a4
 800742c:	044c0000 	.word	0x044c0000
 8007430:	0003cccc 	.word	0x0003cccc
 8007434:	02ee0000 	.word	0x02ee0000
 8007438:	00074ccc 	.word	0x00074ccc
 800743c:	02260000 	.word	0x02260000

08007440 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b0aa      	sub	sp, #168	; 0xa8
 8007444:	af02      	add	r7, sp, #8
 8007446:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007448:	2300      	movs	r3, #0
 800744a:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800744e:	f107 0318 	add.w	r3, r7, #24
 8007452:	2278      	movs	r2, #120	; 0x78
 8007454:	2100      	movs	r1, #0
 8007456:	4618      	mov	r0, r3
 8007458:	f008 fcd3 	bl	800fe02 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 800745c:	2300      	movs	r3, #0
 800745e:	82fb      	strh	r3, [r7, #22]
	uint8_t tempbyte = 0;
 8007460:	2300      	movs	r3, #0
 8007462:	757b      	strb	r3, [r7, #21]
	uint8_t UseInternalTuningSettings = 0;
 8007464:	2300      	movs	r3, #0
 8007466:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
	uint32_t count = 0;
 800746a:	2300      	movs	r3, #0
 800746c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	uint8_t isApertureSpads = 0;
 8007470:	2300      	movs	r3, #0
 8007472:	753b      	strb	r3, [r7, #20]
	uint32_t refSpadCount = 0;
 8007474:	2300      	movs	r3, #0
 8007476:	613b      	str	r3, [r7, #16]
	uint8_t ApertureSpads = 0;
 8007478:	2300      	movs	r3, #0
 800747a:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 800747e:	2101      	movs	r1, #1
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f002 fbbb 	bl	8009bfc <VL53L0X_get_info_from_device>
 8007486:	4603      	mov	r3, r0
 8007488:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8007492:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800749c:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 80074a0:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d80f      	bhi.n	80074c8 <VL53L0X_StaticInit+0x88>
 80074a8:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d103      	bne.n	80074b8 <VL53L0X_StaticInit+0x78>
		((ApertureSpads == 1) && (count > 32)) ||
 80074b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80074b4:	2b20      	cmp	r3, #32
 80074b6:	d807      	bhi.n	80074c8 <VL53L0X_StaticInit+0x88>
 80074b8:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d10f      	bne.n	80074e0 <VL53L0X_StaticInit+0xa0>
		((ApertureSpads == 0) && (count > 12)))
 80074c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80074c4:	2b0c      	cmp	r3, #12
 80074c6:	d90b      	bls.n	80074e0 <VL53L0X_StaticInit+0xa0>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 80074c8:	f107 0214 	add.w	r2, r7, #20
 80074cc:	f107 0310 	add.w	r3, r7, #16
 80074d0:	4619      	mov	r1, r3
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f001 fe15 	bl	8009102 <VL53L0X_perform_ref_spad_management>
 80074d8:	4603      	mov	r3, r0
 80074da:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 80074de:	e00a      	b.n	80074f6 <VL53L0X_StaticInit+0xb6>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80074e0:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80074e4:	461a      	mov	r2, r3
 80074e6:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f002 f826 	bl	800953c <VL53L0X_set_reference_spads>
 80074f0:	4603      	mov	r3, r0
 80074f2:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 80074f6:	4ba0      	ldr	r3, [pc, #640]	; (8007778 <VL53L0X_StaticInit+0x338>)
 80074f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (Status == VL53L0X_ERROR_NONE) {
 80074fc:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8007500:	b25b      	sxtb	r3, r3
 8007502:	2b00      	cmp	r3, #0
 8007504:	d111      	bne.n	800752a <VL53L0X_StaticInit+0xea>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 800750c:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8007510:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8007514:	2b00      	cmp	r3, #0
 8007516:	d105      	bne.n	8007524 <VL53L0X_StaticInit+0xe4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800751e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007522:	e002      	b.n	800752a <VL53L0X_StaticInit+0xea>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8007524:	4b94      	ldr	r3, [pc, #592]	; (8007778 <VL53L0X_StaticInit+0x338>)
 8007526:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	}

	if (Status == VL53L0X_ERROR_NONE)
 800752a:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 800752e:	b25b      	sxtb	r3, r3
 8007530:	2b00      	cmp	r3, #0
 8007532:	d107      	bne.n	8007544 <VL53L0X_StaticInit+0x104>
		Status = VL53L0X_load_tuning_settings(Dev,
 8007534:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f003 ff35 	bl	800b3a8 <VL53L0X_load_tuning_settings>
 800753e:	4603      	mov	r3, r0
 8007540:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
						      pTuningSettingBuffer);


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8007544:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8007548:	b25b      	sxtb	r3, r3
 800754a:	2b00      	cmp	r3, #0
 800754c:	d10a      	bne.n	8007564 <VL53L0X_StaticInit+0x124>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800754e:	2300      	movs	r3, #0
 8007550:	9300      	str	r3, [sp, #0]
 8007552:	2304      	movs	r3, #4
 8007554:	2200      	movs	r2, #0
 8007556:	2100      	movs	r1, #0
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f001 f9d9 	bl	8008910 <VL53L0X_SetGpioConfig>
 800755e:	4603      	mov	r3, r0
 8007560:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007564:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8007568:	b25b      	sxtb	r3, r3
 800756a:	2b00      	cmp	r3, #0
 800756c:	d125      	bne.n	80075ba <VL53L0X_StaticInit+0x17a>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800756e:	2201      	movs	r2, #1
 8007570:	21ff      	movs	r1, #255	; 0xff
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f004 ff5c 	bl	800c430 <VL53L0X_WrByte>
 8007578:	4603      	mov	r3, r0
 800757a:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800757e:	f107 0316 	add.w	r3, r7, #22
 8007582:	461a      	mov	r2, r3
 8007584:	2184      	movs	r1, #132	; 0x84
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f004 fede 	bl	800c348 <VL53L0X_RdWord>
 800758c:	4603      	mov	r3, r0
 800758e:	461a      	mov	r2, r3
 8007590:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8007594:	b25b      	sxtb	r3, r3
 8007596:	4313      	orrs	r3, r2
 8007598:	b25b      	sxtb	r3, r3
 800759a:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800759e:	2200      	movs	r2, #0
 80075a0:	21ff      	movs	r1, #255	; 0xff
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f004 ff44 	bl	800c430 <VL53L0X_WrByte>
 80075a8:	4603      	mov	r3, r0
 80075aa:	461a      	mov	r2, r3
 80075ac:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 80075b0:	b25b      	sxtb	r3, r3
 80075b2:	4313      	orrs	r3, r2
 80075b4:	b25b      	sxtb	r3, r3
 80075b6:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80075ba:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 80075be:	b25b      	sxtb	r3, r3
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d105      	bne.n	80075d0 <VL53L0X_StaticInit+0x190>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 80075c4:	8afb      	ldrh	r3, [r7, #22]
 80075c6:	011b      	lsls	r3, r3, #4
 80075c8:	461a      	mov	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	}

	/* After static init, some device parameters may be changed,
	 * so update them
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80075d0:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 80075d4:	b25b      	sxtb	r3, r3
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d108      	bne.n	80075ec <VL53L0X_StaticInit+0x1ac>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80075da:	f107 0318 	add.w	r3, r7, #24
 80075de:	4619      	mov	r1, r3
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f8cb 	bl	800777c <VL53L0X_GetDeviceParameters>
 80075e6:	4603      	mov	r3, r0
 80075e8:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92


	if (Status == VL53L0X_ERROR_NONE) {
 80075ec:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 80075f0:	b25b      	sxtb	r3, r3
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d111      	bne.n	800761a <VL53L0X_StaticInit+0x1da>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80075f6:	f107 0315 	add.w	r3, r7, #21
 80075fa:	4619      	mov	r1, r3
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 f9d2 	bl	80079a6 <VL53L0X_GetFractionEnable>
 8007602:	4603      	mov	r3, r0
 8007604:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
		if (Status == VL53L0X_ERROR_NONE)
 8007608:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 800760c:	b25b      	sxtb	r3, r3
 800760e:	2b00      	cmp	r3, #0
 8007610:	d103      	bne.n	800761a <VL53L0X_StaticInit+0x1da>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8007612:	7d7a      	ldrb	r2, [r7, #21]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d

	}

	if (Status == VL53L0X_ERROR_NONE)
 800761a:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 800761e:	b25b      	sxtb	r3, r3
 8007620:	2b00      	cmp	r3, #0
 8007622:	d107      	bne.n	8007634 <VL53L0X_StaticInit+0x1f4>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	3308      	adds	r3, #8
 8007628:	f107 0118 	add.w	r1, r7, #24
 800762c:	2278      	movs	r2, #120	; 0x78
 800762e:	4618      	mov	r0, r3
 8007630:	f008 fbdc 	bl	800fdec <memcpy>


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8007634:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8007638:	b25b      	sxtb	r3, r3
 800763a:	2b00      	cmp	r3, #0
 800763c:	d112      	bne.n	8007664 <VL53L0X_StaticInit+0x224>
		Status = VL53L0X_RdByte(Dev,
 800763e:	f107 0315 	add.w	r3, r7, #21
 8007642:	461a      	mov	r2, r3
 8007644:	2101      	movs	r1, #1
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f004 fdf7 	bl	800c23a <VL53L0X_RdByte>
 800764c:	4603      	mov	r3, r0
 800764e:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8007652:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8007656:	b25b      	sxtb	r3, r3
 8007658:	2b00      	cmp	r3, #0
 800765a:	d103      	bne.n	8007664 <VL53L0X_StaticInit+0x224>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800765c:	7d7a      	ldrb	r2, [r7, #21]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8007664:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8007668:	b25b      	sxtb	r3, r3
 800766a:	2b00      	cmp	r3, #0
 800766c:	d107      	bne.n	800767e <VL53L0X_StaticInit+0x23e>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800766e:	2200      	movs	r2, #0
 8007670:	2100      	movs	r1, #0
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 fa0c 	bl	8007a90 <VL53L0X_SetSequenceStepEnable>
 8007678:	4603      	mov	r3, r0
 800767a:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800767e:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8007682:	b25b      	sxtb	r3, r3
 8007684:	2b00      	cmp	r3, #0
 8007686:	d107      	bne.n	8007698 <VL53L0X_StaticInit+0x258>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8007688:	2200      	movs	r2, #0
 800768a:	2102      	movs	r1, #2
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 f9ff 	bl	8007a90 <VL53L0X_SetSequenceStepEnable>
 8007692:	4603      	mov	r3, r0
 8007694:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8007698:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 800769c:	b25b      	sxtb	r3, r3
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d103      	bne.n	80076aa <VL53L0X_StaticInit+0x26a>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2203      	movs	r2, #3
 80076a6:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80076aa:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 80076ae:	b25b      	sxtb	r3, r3
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d109      	bne.n	80076c8 <VL53L0X_StaticInit+0x288>
		Status = VL53L0X_GetVcselPulsePeriod(
 80076b4:	f107 030f 	add.w	r3, r7, #15
 80076b8:	461a      	mov	r2, r3
 80076ba:	2100      	movs	r1, #0
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 f9cf 	bl	8007a60 <VL53L0X_GetVcselPulsePeriod>
 80076c2:	4603      	mov	r3, r0
 80076c4:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80076c8:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 80076cc:	b25b      	sxtb	r3, r3
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d103      	bne.n	80076da <VL53L0X_StaticInit+0x29a>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80076d2:	7bfa      	ldrb	r2, [r7, #15]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			PreRangeVcselPulsePeriod,
			vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80076da:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 80076de:	b25b      	sxtb	r3, r3
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d109      	bne.n	80076f8 <VL53L0X_StaticInit+0x2b8>
		Status = VL53L0X_GetVcselPulsePeriod(
 80076e4:	f107 030f 	add.w	r3, r7, #15
 80076e8:	461a      	mov	r2, r3
 80076ea:	2101      	movs	r1, #1
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 f9b7 	bl	8007a60 <VL53L0X_GetVcselPulsePeriod>
 80076f2:	4603      	mov	r3, r0
 80076f4:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80076f8:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 80076fc:	b25b      	sxtb	r3, r3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d103      	bne.n	800770a <VL53L0X_StaticInit+0x2ca>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007702:	7bfa      	ldrb	r2, [r7, #15]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
			FinalRangeVcselPulsePeriod,
			vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800770a:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 800770e:	b25b      	sxtb	r3, r3
 8007710:	2b00      	cmp	r3, #0
 8007712:	d109      	bne.n	8007728 <VL53L0X_StaticInit+0x2e8>
		Status = get_sequence_step_timeout(
 8007714:	f107 0308 	add.w	r3, r7, #8
 8007718:	461a      	mov	r2, r3
 800771a:	2103      	movs	r1, #3
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f003 f873 	bl	800a808 <get_sequence_step_timeout>
 8007722:	4603      	mov	r3, r0
 8007724:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007728:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 800772c:	b25b      	sxtb	r3, r3
 800772e:	2b00      	cmp	r3, #0
 8007730:	d103      	bne.n	800773a <VL53L0X_StaticInit+0x2fa>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800773a:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 800773e:	b25b      	sxtb	r3, r3
 8007740:	2b00      	cmp	r3, #0
 8007742:	d109      	bne.n	8007758 <VL53L0X_StaticInit+0x318>
		Status = get_sequence_step_timeout(
 8007744:	f107 0308 	add.w	r3, r7, #8
 8007748:	461a      	mov	r2, r3
 800774a:	2104      	movs	r1, #4
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f003 f85b 	bl	800a808 <get_sequence_step_timeout>
 8007752:	4603      	mov	r3, r0
 8007754:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007758:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 800775c:	b25b      	sxtb	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d103      	bne.n	800776a <VL53L0X_StaticInit+0x32a>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800776a:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 800776e:	b25b      	sxtb	r3, r3
}
 8007770:	4618      	mov	r0, r3
 8007772:	37a0      	adds	r7, #160	; 0xa0
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	200001e4 	.word	0x200001e4

0800777c <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007786:	2300      	movs	r3, #0
 8007788:	72fb      	strb	r3, [r7, #11]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	4619      	mov	r1, r3
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 f8f6 	bl	8007980 <VL53L0X_GetDeviceMode>
 8007794:	4603      	mov	r3, r0
 8007796:	72fb      	strb	r3, [r7, #11]

	if (Status == VL53L0X_ERROR_NONE)
 8007798:	7afb      	ldrb	r3, [r7, #11]
 800779a:	b25b      	sxtb	r3, r3
 800779c:	2b00      	cmp	r3, #0
 800779e:	d107      	bne.n	80077b0 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	3308      	adds	r3, #8
 80077a4:	4619      	mov	r1, r3
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fabe 	bl	8007d28 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80077ac:	4603      	mov	r3, r0
 80077ae:	72fb      	strb	r3, [r7, #11]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80077b0:	7afb      	ldrb	r3, [r7, #11]
 80077b2:	b25b      	sxtb	r3, r3
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d102      	bne.n	80077be <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	2200      	movs	r2, #0
 80077bc:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80077be:	7afb      	ldrb	r3, [r7, #11]
 80077c0:	b25b      	sxtb	r3, r3
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d107      	bne.n	80077d6 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	3310      	adds	r3, #16
 80077ca:	4619      	mov	r1, r3
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 faf4 	bl	8007dba <VL53L0X_GetXTalkCompensationRateMegaCps>
 80077d2:	4603      	mov	r3, r0
 80077d4:	72fb      	strb	r3, [r7, #11]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 80077d6:	7afb      	ldrb	r3, [r7, #11]
 80077d8:	b25b      	sxtb	r3, r3
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d107      	bne.n	80077ee <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	3314      	adds	r3, #20
 80077e2:	4619      	mov	r1, r3
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f7ff fc74 	bl	80070d2 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80077ea:	4603      	mov	r3, r0
 80077ec:	72fb      	strb	r3, [r7, #11]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80077ee:	7afb      	ldrb	r3, [r7, #11]
 80077f0:	b25b      	sxtb	r3, r3
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d138      	bne.n	8007868 <VL53L0X_GetDeviceParameters+0xec>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80077f6:	2300      	movs	r3, #0
 80077f8:	60fb      	str	r3, [r7, #12]
 80077fa:	e02e      	b.n	800785a <VL53L0X_GetDeviceParameters+0xde>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80077fc:	7afb      	ldrb	r3, [r7, #11]
 80077fe:	b25b      	sxtb	r3, r3
 8007800:	2b00      	cmp	r3, #0
 8007802:	d12e      	bne.n	8007862 <VL53L0X_GetDeviceParameters+0xe6>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	b299      	uxth	r1, r3
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	3308      	adds	r3, #8
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	4413      	add	r3, r2
 8007812:	3304      	adds	r3, #4
 8007814:	461a      	mov	r2, r3
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 fc14 	bl	8008044 <VL53L0X_GetLimitCheckValue>
 800781c:	4603      	mov	r3, r0
 800781e:	461a      	mov	r2, r3
 8007820:	7afb      	ldrb	r3, [r7, #11]
 8007822:	b25b      	sxtb	r3, r3
 8007824:	4313      	orrs	r3, r2
 8007826:	b25b      	sxtb	r3, r3
 8007828:	72fb      	strb	r3, [r7, #11]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800782a:	7afb      	ldrb	r3, [r7, #11]
 800782c:	b25b      	sxtb	r3, r3
 800782e:	2b00      	cmp	r3, #0
 8007830:	d119      	bne.n	8007866 <VL53L0X_GetDeviceParameters+0xea>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	b299      	uxth	r1, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	3318      	adds	r3, #24
 800783a:	683a      	ldr	r2, [r7, #0]
 800783c:	4413      	add	r3, r2
 800783e:	461a      	mov	r2, r3
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 fb79 	bl	8007f38 <VL53L0X_GetLimitCheckEnable>
 8007846:	4603      	mov	r3, r0
 8007848:	461a      	mov	r2, r3
 800784a:	7afb      	ldrb	r3, [r7, #11]
 800784c:	b25b      	sxtb	r3, r3
 800784e:	4313      	orrs	r3, r2
 8007850:	b25b      	sxtb	r3, r3
 8007852:	72fb      	strb	r3, [r7, #11]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	3301      	adds	r3, #1
 8007858:	60fb      	str	r3, [r7, #12]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2b05      	cmp	r3, #5
 800785e:	ddcd      	ble.n	80077fc <VL53L0X_GetDeviceParameters+0x80>
 8007860:	e002      	b.n	8007868 <VL53L0X_GetDeviceParameters+0xec>
				break;
 8007862:	bf00      	nop
 8007864:	e000      	b.n	8007868 <VL53L0X_GetDeviceParameters+0xec>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8007866:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007868:	7afb      	ldrb	r3, [r7, #11]
 800786a:	b25b      	sxtb	r3, r3
 800786c:	2b00      	cmp	r3, #0
 800786e:	d107      	bne.n	8007880 <VL53L0X_GetDeviceParameters+0x104>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	3374      	adds	r3, #116	; 0x74
 8007874:	4619      	mov	r1, r3
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 fc72 	bl	8008160 <VL53L0X_GetWrapAroundCheckEnable>
 800787c:	4603      	mov	r3, r0
 800787e:	72fb      	strb	r3, [r7, #11]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8007880:	7afb      	ldrb	r3, [r7, #11]
 8007882:	b25b      	sxtb	r3, r3
 8007884:	2b00      	cmp	r3, #0
 8007886:	d107      	bne.n	8007898 <VL53L0X_GetDeviceParameters+0x11c>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	3304      	adds	r3, #4
 800788c:	4619      	mov	r1, r3
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 f8bb 	bl	8007a0a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8007894:	4603      	mov	r3, r0
 8007896:	72fb      	strb	r3, [r7, #11]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007898:	7afb      	ldrb	r3, [r7, #11]
 800789a:	b25b      	sxtb	r3, r3
 800789c:	2b00      	cmp	r3, #0
 800789e:	d120      	bne.n	80078e2 <VL53L0X_GetDeviceParameters+0x166>
		for (i = 0; i < VL53L0X_DMAX_LUT_SIZE; i++) {
 80078a0:	2300      	movs	r3, #0
 80078a2:	60fb      	str	r3, [r7, #12]
 80078a4:	e01a      	b.n	80078dc <VL53L0X_GetDeviceParameters+0x160>
			pDeviceParameters->dmax_lut.ambRate_mcps[i] =
			   Dev->Data.CurrentParameters.dmax_lut.ambRate_mcps[i];
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	3310      	adds	r3, #16
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	4413      	add	r3, r2
 80078b0:	685a      	ldr	r2, [r3, #4]
			pDeviceParameters->dmax_lut.ambRate_mcps[i] =
 80078b2:	6839      	ldr	r1, [r7, #0]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	330e      	adds	r3, #14
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	440b      	add	r3, r1
 80078bc:	605a      	str	r2, [r3, #4]
			pDeviceParameters->dmax_lut.dmax_mm[i] =
			   Dev->Data.CurrentParameters.dmax_lut.dmax_mm[i];
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	3316      	adds	r3, #22
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	4413      	add	r3, r2
 80078c8:	689a      	ldr	r2, [r3, #8]
			pDeviceParameters->dmax_lut.dmax_mm[i] =
 80078ca:	6839      	ldr	r1, [r7, #0]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	3314      	adds	r3, #20
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	440b      	add	r3, r1
 80078d4:	609a      	str	r2, [r3, #8]
		for (i = 0; i < VL53L0X_DMAX_LUT_SIZE; i++) {
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	3301      	adds	r3, #1
 80078da:	60fb      	str	r3, [r7, #12]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2b06      	cmp	r3, #6
 80078e0:	dde1      	ble.n	80078a6 <VL53L0X_GetDeviceParameters+0x12a>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80078e2:	7afb      	ldrb	r3, [r7, #11]
 80078e4:	b25b      	sxtb	r3, r3
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
	...

080078f0 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev,
				    VL53L0X_DeviceModes DeviceMode)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b085      	sub	sp, #20
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	460b      	mov	r3, r1
 80078fa:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80078fc:	2300      	movs	r3, #0
 80078fe:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8007900:	78fb      	ldrb	r3, [r7, #3]
 8007902:	2b15      	cmp	r3, #21
 8007904:	d832      	bhi.n	800796c <VL53L0X_SetDeviceMode+0x7c>
 8007906:	a201      	add	r2, pc, #4	; (adr r2, 800790c <VL53L0X_SetDeviceMode+0x1c>)
 8007908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790c:	08007965 	.word	0x08007965
 8007910:	08007965 	.word	0x08007965
 8007914:	0800796d 	.word	0x0800796d
 8007918:	08007965 	.word	0x08007965
 800791c:	0800796d 	.word	0x0800796d
 8007920:	0800796d 	.word	0x0800796d
 8007924:	0800796d 	.word	0x0800796d
 8007928:	0800796d 	.word	0x0800796d
 800792c:	0800796d 	.word	0x0800796d
 8007930:	0800796d 	.word	0x0800796d
 8007934:	0800796d 	.word	0x0800796d
 8007938:	0800796d 	.word	0x0800796d
 800793c:	0800796d 	.word	0x0800796d
 8007940:	0800796d 	.word	0x0800796d
 8007944:	0800796d 	.word	0x0800796d
 8007948:	0800796d 	.word	0x0800796d
 800794c:	0800796d 	.word	0x0800796d
 8007950:	0800796d 	.word	0x0800796d
 8007954:	0800796d 	.word	0x0800796d
 8007958:	0800796d 	.word	0x0800796d
 800795c:	08007965 	.word	0x08007965
 8007960:	08007965 	.word	0x08007965
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	78fa      	ldrb	r2, [r7, #3]
 8007968:	721a      	strb	r2, [r3, #8]
		break;
 800796a:	e001      	b.n	8007970 <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800796c:	23f8      	movs	r3, #248	; 0xf8
 800796e:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007970:	7bfb      	ldrb	r3, [r7, #15]
 8007972:	b25b      	sxtb	r3, r3
}
 8007974:	4618      	mov	r0, r3
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8007980:	b480      	push	{r7}
 8007982:	b085      	sub	sp, #20
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800798a:	2300      	movs	r3, #0
 800798c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	7a1a      	ldrb	r2, [r3, #8]
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007996:	7bfb      	ldrb	r3, [r7, #15]
 8007998:	b25b      	sxtb	r3, r3
}
 800799a:	4618      	mov	r0, r3
 800799c:	3714      	adds	r7, #20
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr

080079a6 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b084      	sub	sp, #16
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
 80079ae:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80079b0:	2300      	movs	r3, #0
 80079b2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80079b4:	683a      	ldr	r2, [r7, #0]
 80079b6:	2109      	movs	r1, #9
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f004 fc3e 	bl	800c23a <VL53L0X_RdByte>
 80079be:	4603      	mov	r3, r0
 80079c0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80079c2:	7bfb      	ldrb	r3, [r7, #15]
 80079c4:	b25b      	sxtb	r3, r3
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d106      	bne.n	80079d8 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	f003 0301 	and.w	r3, r3, #1
 80079d2:	b2da      	uxtb	r2, r3
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80079d8:	7bfb      	ldrb	r3, [r7, #15]
 80079da:	b25b      	sxtb	r3, r3
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80079ee:	2300      	movs	r3, #0
 80079f0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80079f2:	6839      	ldr	r1, [r7, #0]
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f003 fb61 	bl	800b0bc <VL53L0X_set_measurement_timing_budget_micro_seconds>
 80079fa:	4603      	mov	r3, r0
 80079fc:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 80079fe:	7bfb      	ldrb	r3, [r7, #15]
 8007a00:	b25b      	sxtb	r3, r3
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3710      	adds	r7, #16
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b084      	sub	sp, #16
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a14:	2300      	movs	r3, #0
 8007a16:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8007a18:	6839      	ldr	r1, [r7, #0]
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f003 fc18 	bl	800b250 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8007a20:	4603      	mov	r3, r0
 8007a22:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8007a24:	7bfb      	ldrb	r3, [r7, #15]
 8007a26:	b25b      	sxtb	r3, r3
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	460b      	mov	r3, r1
 8007a3a:	70fb      	strb	r3, [r7, #3]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a40:	2300      	movs	r3, #0
 8007a42:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8007a44:	78ba      	ldrb	r2, [r7, #2]
 8007a46:	78fb      	ldrb	r3, [r7, #3]
 8007a48:	4619      	mov	r1, r3
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f003 f895 	bl	800ab7a <VL53L0X_set_vcsel_pulse_period>
 8007a50:	4603      	mov	r3, r0
 8007a52:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8007a54:	7bfb      	ldrb	r3, [r7, #15]
 8007a56:	b25b      	sxtb	r3, r3
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b086      	sub	sp, #24
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	460b      	mov	r3, r1
 8007a6a:	607a      	str	r2, [r7, #4]
 8007a6c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8007a72:	7afb      	ldrb	r3, [r7, #11]
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	4619      	mov	r1, r3
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f003 fae8 	bl	800b04e <VL53L0X_get_vcsel_pulse_period>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8007a82:	7dfb      	ldrb	r3, [r7, #23]
 8007a84:	b25b      	sxtb	r3, r3
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3718      	adds	r7, #24
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
	...

08007a90 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	460b      	mov	r3, r1
 8007a9a:	70fb      	strb	r3, [r7, #3]
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	73bb      	strb	r3, [r7, #14]
	uint8_t SequenceConfigNew = 0;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	75fb      	strb	r3, [r7, #23]
	uint32_t MeasurementTimingBudgetMicroSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007aac:	f107 030e 	add.w	r3, r7, #14
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	2101      	movs	r1, #1
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f004 fbc0 	bl	800c23a <VL53L0X_RdByte>
 8007aba:	4603      	mov	r3, r0
 8007abc:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8007abe:	7bbb      	ldrb	r3, [r7, #14]
 8007ac0:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE) {
 8007ac2:	7bfb      	ldrb	r3, [r7, #15]
 8007ac4:	b25b      	sxtb	r3, r3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d15a      	bne.n	8007b80 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8007aca:	78bb      	ldrb	r3, [r7, #2]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d12b      	bne.n	8007b28 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8007ad0:	78fb      	ldrb	r3, [r7, #3]
 8007ad2:	2b04      	cmp	r3, #4
 8007ad4:	d825      	bhi.n	8007b22 <VL53L0X_SetSequenceStepEnable+0x92>
 8007ad6:	a201      	add	r2, pc, #4	; (adr r2, 8007adc <VL53L0X_SetSequenceStepEnable+0x4c>)
 8007ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007adc:	08007af1 	.word	0x08007af1
 8007ae0:	08007afb 	.word	0x08007afb
 8007ae4:	08007b05 	.word	0x08007b05
 8007ae8:	08007b0f 	.word	0x08007b0f
 8007aec:	08007b19 	.word	0x08007b19
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8007af0:	7dfb      	ldrb	r3, [r7, #23]
 8007af2:	f043 0310 	orr.w	r3, r3, #16
 8007af6:	75fb      	strb	r3, [r7, #23]
				break;
 8007af8:	e043      	b.n	8007b82 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8007afa:	7dfb      	ldrb	r3, [r7, #23]
 8007afc:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8007b00:	75fb      	strb	r3, [r7, #23]
				break;
 8007b02:	e03e      	b.n	8007b82 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8007b04:	7dfb      	ldrb	r3, [r7, #23]
 8007b06:	f043 0304 	orr.w	r3, r3, #4
 8007b0a:	75fb      	strb	r3, [r7, #23]
				break;
 8007b0c:	e039      	b.n	8007b82 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8007b0e:	7dfb      	ldrb	r3, [r7, #23]
 8007b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b14:	75fb      	strb	r3, [r7, #23]
				break;
 8007b16:	e034      	b.n	8007b82 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8007b18:	7dfb      	ldrb	r3, [r7, #23]
 8007b1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b1e:	75fb      	strb	r3, [r7, #23]
				break;
 8007b20:	e02f      	b.n	8007b82 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007b22:	23fc      	movs	r3, #252	; 0xfc
 8007b24:	73fb      	strb	r3, [r7, #15]
 8007b26:	e02c      	b.n	8007b82 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8007b28:	78fb      	ldrb	r3, [r7, #3]
 8007b2a:	2b04      	cmp	r3, #4
 8007b2c:	d825      	bhi.n	8007b7a <VL53L0X_SetSequenceStepEnable+0xea>
 8007b2e:	a201      	add	r2, pc, #4	; (adr r2, 8007b34 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8007b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b34:	08007b49 	.word	0x08007b49
 8007b38:	08007b53 	.word	0x08007b53
 8007b3c:	08007b5d 	.word	0x08007b5d
 8007b40:	08007b67 	.word	0x08007b67
 8007b44:	08007b71 	.word	0x08007b71
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8007b48:	7dfb      	ldrb	r3, [r7, #23]
 8007b4a:	f023 0310 	bic.w	r3, r3, #16
 8007b4e:	75fb      	strb	r3, [r7, #23]
				break;
 8007b50:	e017      	b.n	8007b82 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8007b52:	7dfb      	ldrb	r3, [r7, #23]
 8007b54:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8007b58:	75fb      	strb	r3, [r7, #23]
				break;
 8007b5a:	e012      	b.n	8007b82 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8007b5c:	7dfb      	ldrb	r3, [r7, #23]
 8007b5e:	f023 0304 	bic.w	r3, r3, #4
 8007b62:	75fb      	strb	r3, [r7, #23]
				break;
 8007b64:	e00d      	b.n	8007b82 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8007b66:	7dfb      	ldrb	r3, [r7, #23]
 8007b68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b6c:	75fb      	strb	r3, [r7, #23]
				break;
 8007b6e:	e008      	b.n	8007b82 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8007b70:	7dfb      	ldrb	r3, [r7, #23]
 8007b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b76:	75fb      	strb	r3, [r7, #23]
				break;
 8007b78:	e003      	b.n	8007b82 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007b7a:	23fc      	movs	r3, #252	; 0xfc
 8007b7c:	73fb      	strb	r3, [r7, #15]
 8007b7e:	e000      	b.n	8007b82 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8007b80:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8007b82:	7bbb      	ldrb	r3, [r7, #14]
 8007b84:	7dfa      	ldrb	r2, [r7, #23]
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d01e      	beq.n	8007bc8 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8007b8a:	7bfb      	ldrb	r3, [r7, #15]
 8007b8c:	b25b      	sxtb	r3, r3
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d107      	bne.n	8007ba2 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8007b92:	7dfb      	ldrb	r3, [r7, #23]
 8007b94:	461a      	mov	r2, r3
 8007b96:	2101      	movs	r1, #1
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f004 fc49 	bl	800c430 <VL53L0X_WrByte>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8007ba2:	7bfb      	ldrb	r3, [r7, #15]
 8007ba4:	b25b      	sxtb	r3, r3
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d103      	bne.n	8007bb2 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	7dfa      	ldrb	r2, [r7, #23]
 8007bae:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8007bb2:	7bfb      	ldrb	r3, [r7, #15]
 8007bb4:	b25b      	sxtb	r3, r3
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d106      	bne.n	8007bc8 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8007bc0:	6939      	ldr	r1, [r7, #16]
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f7ff ff0e 	bl	80079e4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8007bc8:	7bfb      	ldrb	r3, [r7, #15]
 8007bca:	b25b      	sxtb	r3, r3
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3718      	adds	r7, #24
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b087      	sub	sp, #28
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	607b      	str	r3, [r7, #4]
 8007bde:	460b      	mov	r3, r1
 8007be0:	72fb      	strb	r3, [r7, #11]
 8007be2:	4613      	mov	r3, r2
 8007be4:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007be6:	2300      	movs	r3, #0
 8007be8:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8007bf0:	7afb      	ldrb	r3, [r7, #11]
 8007bf2:	2b04      	cmp	r3, #4
 8007bf4:	d836      	bhi.n	8007c64 <sequence_step_enabled+0x90>
 8007bf6:	a201      	add	r2, pc, #4	; (adr r2, 8007bfc <sequence_step_enabled+0x28>)
 8007bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bfc:	08007c11 	.word	0x08007c11
 8007c00:	08007c23 	.word	0x08007c23
 8007c04:	08007c35 	.word	0x08007c35
 8007c08:	08007c47 	.word	0x08007c47
 8007c0c:	08007c59 	.word	0x08007c59
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8007c10:	7abb      	ldrb	r3, [r7, #10]
 8007c12:	111b      	asrs	r3, r3, #4
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	f003 0301 	and.w	r3, r3, #1
 8007c1a:	b2da      	uxtb	r2, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	701a      	strb	r2, [r3, #0]
		break;
 8007c20:	e022      	b.n	8007c68 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8007c22:	7abb      	ldrb	r3, [r7, #10]
 8007c24:	10db      	asrs	r3, r3, #3
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	f003 0301 	and.w	r3, r3, #1
 8007c2c:	b2da      	uxtb	r2, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	701a      	strb	r2, [r3, #0]
		break;
 8007c32:	e019      	b.n	8007c68 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8007c34:	7abb      	ldrb	r3, [r7, #10]
 8007c36:	109b      	asrs	r3, r3, #2
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	f003 0301 	and.w	r3, r3, #1
 8007c3e:	b2da      	uxtb	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	701a      	strb	r2, [r3, #0]
		break;
 8007c44:	e010      	b.n	8007c68 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8007c46:	7abb      	ldrb	r3, [r7, #10]
 8007c48:	119b      	asrs	r3, r3, #6
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	f003 0301 	and.w	r3, r3, #1
 8007c50:	b2da      	uxtb	r2, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	701a      	strb	r2, [r3, #0]
		break;
 8007c56:	e007      	b.n	8007c68 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8007c58:	7abb      	ldrb	r3, [r7, #10]
 8007c5a:	09db      	lsrs	r3, r3, #7
 8007c5c:	b2da      	uxtb	r2, r3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	701a      	strb	r2, [r3, #0]
		break;
 8007c62:	e001      	b.n	8007c68 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007c64:	23fc      	movs	r3, #252	; 0xfc
 8007c66:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007c68:	7dfb      	ldrb	r3, [r7, #23]
 8007c6a:	b25b      	sxtb	r3, r3
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	371c      	adds	r7, #28
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c82:	2300      	movs	r3, #0
 8007c84:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8007c86:	2300      	movs	r3, #0
 8007c88:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007c8a:	f107 030e 	add.w	r3, r7, #14
 8007c8e:	461a      	mov	r2, r3
 8007c90:	2101      	movs	r1, #1
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f004 fad1 	bl	800c23a <VL53L0X_RdByte>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8007c9c:	7bfb      	ldrb	r3, [r7, #15]
 8007c9e:	b25b      	sxtb	r3, r3
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d107      	bne.n	8007cb4 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8007ca4:	7bba      	ldrb	r2, [r7, #14]
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	2100      	movs	r1, #0
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f7ff ff92 	bl	8007bd4 <sequence_step_enabled>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007cb4:	7bfb      	ldrb	r3, [r7, #15]
 8007cb6:	b25b      	sxtb	r3, r3
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d108      	bne.n	8007cce <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8007cbc:	7bba      	ldrb	r2, [r7, #14]
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	3302      	adds	r3, #2
 8007cc2:	2101      	movs	r1, #1
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f7ff ff85 	bl	8007bd4 <sequence_step_enabled>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007cce:	7bfb      	ldrb	r3, [r7, #15]
 8007cd0:	b25b      	sxtb	r3, r3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d108      	bne.n	8007ce8 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8007cd6:	7bba      	ldrb	r2, [r7, #14]
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	2102      	movs	r1, #2
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f7ff ff78 	bl	8007bd4 <sequence_step_enabled>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007ce8:	7bfb      	ldrb	r3, [r7, #15]
 8007cea:	b25b      	sxtb	r3, r3
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d108      	bne.n	8007d02 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8007cf0:	7bba      	ldrb	r2, [r7, #14]
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	3303      	adds	r3, #3
 8007cf6:	2103      	movs	r1, #3
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f7ff ff6b 	bl	8007bd4 <sequence_step_enabled>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007d02:	7bfb      	ldrb	r3, [r7, #15]
 8007d04:	b25b      	sxtb	r3, r3
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d108      	bne.n	8007d1c <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8007d0a:	7bba      	ldrb	r2, [r7, #14]
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	3304      	adds	r3, #4
 8007d10:	2104      	movs	r1, #4
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f7ff ff5e 	bl	8007bd4 <sequence_step_enabled>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007d1c:	7bfb      	ldrb	r3, [r7, #15]
 8007d1e:	b25b      	sxtb	r3, r3
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d32:	2300      	movs	r3, #0
 8007d34:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8007d36:	f107 030c 	add.w	r3, r7, #12
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	21f8      	movs	r1, #248	; 0xf8
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f004 fb02 	bl	800c348 <VL53L0X_RdWord>
 8007d44:	4603      	mov	r3, r0
 8007d46:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8007d48:	7bfb      	ldrb	r3, [r7, #15]
 8007d4a:	b25b      	sxtb	r3, r3
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d108      	bne.n	8007d62 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8007d50:	f107 0308 	add.w	r3, r7, #8
 8007d54:	461a      	mov	r2, r3
 8007d56:	2104      	movs	r1, #4
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f004 fb2d 	bl	800c3b8 <VL53L0X_RdDWord>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007d62:	7bfb      	ldrb	r3, [r7, #15]
 8007d64:	b25b      	sxtb	r3, r3
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d10c      	bne.n	8007d84 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8007d6a:	89bb      	ldrh	r3, [r7, #12]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d005      	beq.n	8007d7c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	89ba      	ldrh	r2, [r7, #12]
 8007d74:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	611a      	str	r2, [r3, #16]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007d84:	7bfb      	ldrb	r3, [r7, #15]
 8007d86:	b25b      	sxtb	r3, r3
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3710      	adds	r7, #16
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b085      	sub	sp, #20
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	7d1b      	ldrb	r3, [r3, #20]
 8007da2:	73fb      	strb	r3, [r7, #15]
	*pXTalkCompensationEnable = Temp8;
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	7bfa      	ldrb	r2, [r7, #15]
 8007da8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007daa:	7bbb      	ldrb	r3, [r7, #14]
 8007dac:	b25b      	sxtb	r3, r3
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3714      	adds	r7, #20
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b084      	sub	sp, #16
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
 8007dc2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	72fb      	strb	r3, [r7, #11]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8007dc8:	f107 0308 	add.w	r3, r7, #8
 8007dcc:	461a      	mov	r2, r3
 8007dce:	2120      	movs	r1, #32
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f004 fab9 	bl	800c348 <VL53L0X_RdWord>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8007dda:	7afb      	ldrb	r3, [r7, #11]
 8007ddc:	b25b      	sxtb	r3, r3
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d118      	bne.n	8007e14 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8007de2:	893b      	ldrh	r3, [r7, #8]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d109      	bne.n	8007dfc <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	699b      	ldr	r3, [r3, #24]
 8007dec:	60fb      	str	r3, [r7, #12]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	751a      	strb	r2, [r3, #20]
 8007dfa:	e00b      	b.n	8007e14 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8007dfc:	893b      	ldrh	r3, [r7, #8]
 8007dfe:	00db      	lsls	r3, r3, #3
 8007e00:	60fb      	str	r3, [r7, #12]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	619a      	str	r2, [r3, #24]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2201      	movs	r2, #1
 8007e12:	751a      	strb	r2, [r3, #20]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007e14:	7afb      	ldrb	r3, [r7, #11]
 8007e16:	b25b      	sxtb	r3, r3
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <VL53L0X_SetLimitCheckEnable>:
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev,
	uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	460b      	mov	r3, r1
 8007e2a:	807b      	strh	r3, [r7, #2]
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e30:	2300      	movs	r3, #0
 8007e32:	723b      	strb	r3, [r7, #8]
	FixPoint1616_t TempFix1616 = 0;
 8007e34:	2300      	movs	r3, #0
 8007e36:	60fb      	str	r3, [r7, #12]
	uint8_t LimitCheckEnableInt = 0;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	72fb      	strb	r3, [r7, #11]
	uint8_t LimitCheckDisable = 0;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	72bb      	strb	r3, [r7, #10]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8007e40:	887b      	ldrh	r3, [r7, #2]
 8007e42:	2b05      	cmp	r3, #5
 8007e44:	d902      	bls.n	8007e4c <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007e46:	23fc      	movs	r3, #252	; 0xfc
 8007e48:	723b      	strb	r3, [r7, #8]
 8007e4a:	e05b      	b.n	8007f04 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8007e4c:	787b      	ldrb	r3, [r7, #1]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d106      	bne.n	8007e60 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8007e52:	2300      	movs	r3, #0
 8007e54:	60fb      	str	r3, [r7, #12]
			LimitCheckEnableInt = 0;
 8007e56:	2300      	movs	r3, #0
 8007e58:	72fb      	strb	r3, [r7, #11]
			LimitCheckDisable = 1;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	72bb      	strb	r3, [r7, #10]
 8007e5e:	e00a      	b.n	8007e76 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007e60:	887b      	ldrh	r3, [r7, #2]
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	330a      	adds	r3, #10
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	4413      	add	r3, r2
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	60fb      	str	r3, [r7, #12]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	72bb      	strb	r3, [r7, #10]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8007e72:	2301      	movs	r3, #1
 8007e74:	72fb      	strb	r3, [r7, #11]
		}

		switch (LimitCheckId) {
 8007e76:	887b      	ldrh	r3, [r7, #2]
 8007e78:	2b05      	cmp	r3, #5
 8007e7a:	d841      	bhi.n	8007f00 <VL53L0X_SetLimitCheckEnable+0xe0>
 8007e7c:	a201      	add	r2, pc, #4	; (adr r2, 8007e84 <VL53L0X_SetLimitCheckEnable+0x64>)
 8007e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e82:	bf00      	nop
 8007e84:	08007e9d 	.word	0x08007e9d
 8007e88:	08007ea7 	.word	0x08007ea7
 8007e8c:	08007ebd 	.word	0x08007ebd
 8007e90:	08007ec7 	.word	0x08007ec7
 8007e94:	08007ed1 	.word	0x08007ed1
 8007e98:	08007ee9 	.word	0x08007ee9

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	7afa      	ldrb	r2, [r7, #11]
 8007ea0:	f883 2020 	strb.w	r2, [r3, #32]
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8007ea4:	e02e      	b.n	8007f04 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	461a      	mov	r2, r3
 8007eae:	2144      	movs	r1, #68	; 0x44
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f004 fae1 	bl	800c478 <VL53L0X_WrWord>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	723b      	strb	r3, [r7, #8]

			break;
 8007eba:	e023      	b.n	8007f04 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	7afa      	ldrb	r2, [r7, #11]
 8007ec0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8007ec4:	e01e      	b.n	8007f04 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	7afa      	ldrb	r2, [r7, #11]
 8007eca:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8007ece:	e019      	b.n	8007f04 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8007ed0:	7abb      	ldrb	r3, [r7, #10]
 8007ed2:	005b      	lsls	r3, r3, #1
 8007ed4:	727b      	strb	r3, [r7, #9]
			Status = VL53L0X_UpdateByte(Dev,
 8007ed6:	7a7b      	ldrb	r3, [r7, #9]
 8007ed8:	22fe      	movs	r2, #254	; 0xfe
 8007eda:	2160      	movs	r1, #96	; 0x60
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f004 faf5 	bl	800c4cc <VL53L0X_UpdateByte>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	723b      	strb	r3, [r7, #8]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8007ee6:	e00d      	b.n	8007f04 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8007ee8:	7abb      	ldrb	r3, [r7, #10]
 8007eea:	011b      	lsls	r3, r3, #4
 8007eec:	727b      	strb	r3, [r7, #9]
			Status = VL53L0X_UpdateByte(Dev,
 8007eee:	7a7b      	ldrb	r3, [r7, #9]
 8007ef0:	22ef      	movs	r2, #239	; 0xef
 8007ef2:	2160      	movs	r1, #96	; 0x60
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f004 fae9 	bl	800c4cc <VL53L0X_UpdateByte>
 8007efa:	4603      	mov	r3, r0
 8007efc:	723b      	strb	r3, [r7, #8]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8007efe:	e001      	b.n	8007f04 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007f00:	23fc      	movs	r3, #252	; 0xfc
 8007f02:	723b      	strb	r3, [r7, #8]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007f04:	7a3b      	ldrb	r3, [r7, #8]
 8007f06:	b25b      	sxtb	r3, r3
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d10f      	bne.n	8007f2c <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8007f0c:	787b      	ldrb	r3, [r7, #1]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d106      	bne.n	8007f20 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007f12:	887b      	ldrh	r3, [r7, #2]
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	4413      	add	r3, r2
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 2020 	strb.w	r2, [r3, #32]
 8007f1e:	e005      	b.n	8007f2c <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007f20:	887b      	ldrh	r3, [r7, #2]
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	4413      	add	r3, r2
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 2020 	strb.w	r2, [r3, #32]
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007f2c:	7a3b      	ldrb	r3, [r7, #8]
 8007f2e:	b25b      	sxtb	r3, r3
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3710      	adds	r7, #16
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev,
	uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b087      	sub	sp, #28
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	460b      	mov	r3, r1
 8007f42:	607a      	str	r2, [r7, #4]
 8007f44:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f46:	2300      	movs	r3, #0
 8007f48:	75bb      	strb	r3, [r7, #22]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8007f4a:	897b      	ldrh	r3, [r7, #10]
 8007f4c:	2b05      	cmp	r3, #5
 8007f4e:	d905      	bls.n	8007f5c <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007f50:	23fc      	movs	r3, #252	; 0xfc
 8007f52:	75bb      	strb	r3, [r7, #22]
		*pLimitCheckEnable = 0;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	701a      	strb	r2, [r3, #0]
 8007f5a:	e008      	b.n	8007f6e <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007f5c:	897b      	ldrh	r3, [r7, #10]
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	4413      	add	r3, r2
 8007f62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007f66:	75fb      	strb	r3, [r7, #23]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	7dfa      	ldrb	r2, [r7, #23]
 8007f6c:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007f6e:	7dbb      	ldrb	r3, [r7, #22]
 8007f70:	b25b      	sxtb	r3, r3
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	371c      	adds	r7, #28
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr
	...

08007f80 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b086      	sub	sp, #24
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	460b      	mov	r3, r1
 8007f8a:	607a      	str	r2, [r7, #4]
 8007f8c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	75bb      	strb	r3, [r7, #22]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8007f92:	897b      	ldrh	r3, [r7, #10]
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	4413      	add	r3, r2
 8007f98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007f9c:	75fb      	strb	r3, [r7, #23]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8007f9e:	7dfb      	ldrb	r3, [r7, #23]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d107      	bne.n	8007fb4 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007fa4:	897b      	ldrh	r3, [r7, #10]
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	330a      	adds	r3, #10
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	4413      	add	r3, r2
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	605a      	str	r2, [r3, #4]
 8007fb2:	e040      	b.n	8008036 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8007fb4:	897b      	ldrh	r3, [r7, #10]
 8007fb6:	2b05      	cmp	r3, #5
 8007fb8:	d830      	bhi.n	800801c <VL53L0X_SetLimitCheckValue+0x9c>
 8007fba:	a201      	add	r2, pc, #4	; (adr r2, 8007fc0 <VL53L0X_SetLimitCheckValue+0x40>)
 8007fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc0:	08007fd9 	.word	0x08007fd9
 8007fc4:	08007fe1 	.word	0x08007fe1
 8007fc8:	08007ff7 	.word	0x08007ff7
 8007fcc:	08007fff 	.word	0x08007fff
 8007fd0:	08008007 	.word	0x08008007
 8007fd4:	08008007 	.word	0x08008007

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	62da      	str	r2, [r3, #44]	; 0x2c
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8007fde:	e01f      	b.n	8008020 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	2144      	movs	r1, #68	; 0x44
 8007fea:	68f8      	ldr	r0, [r7, #12]
 8007fec:	f004 fa44 	bl	800c478 <VL53L0X_WrWord>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	75bb      	strb	r3, [r7, #22]
					LimitCheckValue));

			break;
 8007ff4:	e014      	b.n	8008020 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8007ffc:	e010      	b.n	8008020 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	639a      	str	r2, [r3, #56]	; 0x38
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8008004:	e00c      	b.n	8008020 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800800a:	b29b      	uxth	r3, r3
 800800c:	461a      	mov	r2, r3
 800800e:	2164      	movs	r1, #100	; 0x64
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	f004 fa31 	bl	800c478 <VL53L0X_WrWord>
 8008016:	4603      	mov	r3, r0
 8008018:	75bb      	strb	r3, [r7, #22]
					LimitCheckValue));

			break;
 800801a:	e001      	b.n	8008020 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800801c:	23fc      	movs	r3, #252	; 0xfc
 800801e:	75bb      	strb	r3, [r7, #22]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8008020:	7dbb      	ldrb	r3, [r7, #22]
 8008022:	b25b      	sxtb	r3, r3
 8008024:	2b00      	cmp	r3, #0
 8008026:	d106      	bne.n	8008036 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008028:	897b      	ldrh	r3, [r7, #10]
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	330a      	adds	r3, #10
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	4413      	add	r3, r2
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008036:	7dbb      	ldrb	r3, [r7, #22]
 8008038:	b25b      	sxtb	r3, r3
}
 800803a:	4618      	mov	r0, r3
 800803c:	3718      	adds	r7, #24
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop

08008044 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b088      	sub	sp, #32
 8008048:	af00      	add	r7, sp, #0
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	460b      	mov	r3, r1
 800804e:	607a      	str	r2, [r7, #4]
 8008050:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008052:	2300      	movs	r3, #0
 8008054:	75fb      	strb	r3, [r7, #23]
	uint8_t EnableZeroValue = 0;
 8008056:	2300      	movs	r3, #0
 8008058:	77fb      	strb	r3, [r7, #31]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800805a:	897b      	ldrh	r3, [r7, #10]
 800805c:	2b05      	cmp	r3, #5
 800805e:	d847      	bhi.n	80080f0 <VL53L0X_GetLimitCheckValue+0xac>
 8008060:	a201      	add	r2, pc, #4	; (adr r2, 8008068 <VL53L0X_GetLimitCheckValue+0x24>)
 8008062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008066:	bf00      	nop
 8008068:	08008081 	.word	0x08008081
 800806c:	0800808d 	.word	0x0800808d
 8008070:	080080b3 	.word	0x080080b3
 8008074:	080080bf 	.word	0x080080bf
 8008078:	080080cb 	.word	0x080080cb
 800807c:	080080cb 	.word	0x080080cb

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008084:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8008086:	2300      	movs	r3, #0
 8008088:	77fb      	strb	r3, [r7, #31]
		break;
 800808a:	e033      	b.n	80080f4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800808c:	f107 0314 	add.w	r3, r7, #20
 8008090:	461a      	mov	r2, r3
 8008092:	2144      	movs	r1, #68	; 0x44
 8008094:	68f8      	ldr	r0, [r7, #12]
 8008096:	f004 f957 	bl	800c348 <VL53L0X_RdWord>
 800809a:	4603      	mov	r3, r0
 800809c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800809e:	7dfb      	ldrb	r3, [r7, #23]
 80080a0:	b25b      	sxtb	r3, r3
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d102      	bne.n	80080ac <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80080a6:	8abb      	ldrh	r3, [r7, #20]
 80080a8:	025b      	lsls	r3, r3, #9
 80080aa:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 80080ac:	2301      	movs	r3, #1
 80080ae:	77fb      	strb	r3, [r7, #31]
		break;
 80080b0:	e020      	b.n	80080f4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080b6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 80080b8:	2300      	movs	r3, #0
 80080ba:	77fb      	strb	r3, [r7, #31]
		break;
 80080bc:	e01a      	b.n	80080f4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c2:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
			TempFix1616);
		EnableZeroValue = 0;
 80080c4:	2300      	movs	r3, #0
 80080c6:	77fb      	strb	r3, [r7, #31]
		break;
 80080c8:	e014      	b.n	80080f4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80080ca:	f107 0314 	add.w	r3, r7, #20
 80080ce:	461a      	mov	r2, r3
 80080d0:	2164      	movs	r1, #100	; 0x64
 80080d2:	68f8      	ldr	r0, [r7, #12]
 80080d4:	f004 f938 	bl	800c348 <VL53L0X_RdWord>
 80080d8:	4603      	mov	r3, r0
 80080da:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80080dc:	7dfb      	ldrb	r3, [r7, #23]
 80080de:	b25b      	sxtb	r3, r3
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d102      	bne.n	80080ea <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80080e4:	8abb      	ldrh	r3, [r7, #20]
 80080e6:	025b      	lsls	r3, r3, #9
 80080e8:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 80080ea:	2300      	movs	r3, #0
 80080ec:	77fb      	strb	r3, [r7, #31]
		break;
 80080ee:	e001      	b.n	80080f4 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80080f0:	23fc      	movs	r3, #252	; 0xfc
 80080f2:	75fb      	strb	r3, [r7, #23]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80080f4:	7dfb      	ldrb	r3, [r7, #23]
 80080f6:	b25b      	sxtb	r3, r3
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d12a      	bne.n	8008152 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 80080fc:	7ffb      	ldrb	r3, [r7, #31]
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d124      	bne.n	800814c <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d110      	bne.n	800812a <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8008108:	897b      	ldrh	r3, [r7, #10]
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	330a      	adds	r3, #10
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	4413      	add	r3, r2
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	69ba      	ldr	r2, [r7, #24]
 800811a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800811c:	897b      	ldrh	r3, [r7, #10]
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	4413      	add	r3, r2
 8008122:	2200      	movs	r2, #0
 8008124:	f883 2020 	strb.w	r2, [r3, #32]
 8008128:	e013      	b.n	8008152 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	69ba      	ldr	r2, [r7, #24]
 800812e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8008130:	897b      	ldrh	r3, [r7, #10]
 8008132:	68fa      	ldr	r2, [r7, #12]
 8008134:	330a      	adds	r3, #10
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	4413      	add	r3, r2
 800813a:	69ba      	ldr	r2, [r7, #24]
 800813c:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800813e:	897b      	ldrh	r3, [r7, #10]
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	4413      	add	r3, r2
 8008144:	2201      	movs	r2, #1
 8008146:	f883 2020 	strb.w	r2, [r3, #32]
 800814a:	e002      	b.n	8008152 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	69ba      	ldr	r2, [r7, #24]
 8008150:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008152:	7dfb      	ldrb	r3, [r7, #23]
 8008154:	b25b      	sxtb	r3, r3

}
 8008156:	4618      	mov	r0, r3
 8008158:	3720      	adds	r7, #32
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop

08008160 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800816a:	2300      	movs	r3, #0
 800816c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800816e:	f107 030e 	add.w	r3, r7, #14
 8008172:	461a      	mov	r2, r3
 8008174:	2101      	movs	r1, #1
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f004 f85f 	bl	800c23a <VL53L0X_RdByte>
 800817c:	4603      	mov	r3, r0
 800817e:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8008180:	7bfb      	ldrb	r3, [r7, #15]
 8008182:	b25b      	sxtb	r3, r3
 8008184:	2b00      	cmp	r3, #0
 8008186:	d10e      	bne.n	80081a6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8008188:	7bba      	ldrb	r2, [r7, #14]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
		if (data & (0x01 << 7))
 8008190:	7bbb      	ldrb	r3, [r7, #14]
 8008192:	b25b      	sxtb	r3, r3
 8008194:	2b00      	cmp	r3, #0
 8008196:	da03      	bge.n	80081a0 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	2201      	movs	r2, #1
 800819c:	701a      	strb	r2, [r3, #0]
 800819e:	e002      	b.n	80081a6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	2200      	movs	r2, #0
 80081a4:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80081a6:	7bfb      	ldrb	r3, [r7, #15]
 80081a8:	b25b      	sxtb	r3, r3
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d104      	bne.n	80081b8 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	781a      	ldrb	r2, [r3, #0]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80081b8:	7bfb      	ldrb	r3, [r7, #15]
 80081ba:	b25b      	sxtb	r3, r3
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80081cc:	2300      	movs	r3, #0
 80081ce:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80081d0:	f107 030e 	add.w	r3, r7, #14
 80081d4:	4619      	mov	r1, r3
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f7ff fbd2 	bl	8007980 <VL53L0X_GetDeviceMode>
 80081dc:	4603      	mov	r3, r0
 80081de:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram
	 */
	if (Status == VL53L0X_ERROR_NONE
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
 80081e2:	b25b      	sxtb	r3, r3
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d107      	bne.n	80081f8 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80081e8:	7bbb      	ldrb	r3, [r7, #14]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d104      	bne.n	80081f8 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f93a 	bl	8008468 <VL53L0X_StartMeasurement>
 80081f4:	4603      	mov	r3, r0
 80081f6:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80081f8:	7bfb      	ldrb	r3, [r7, #15]
 80081fa:	b25b      	sxtb	r3, r3
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d104      	bne.n	800820a <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f001 fc2a 	bl	8009a5a <VL53L0X_measurement_poll_for_completion>
 8008206:	4603      	mov	r3, r0
 8008208:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800820a:	7bfb      	ldrb	r3, [r7, #15]
 800820c:	b25b      	sxtb	r3, r3
 800820e:	2b00      	cmp	r3, #0
 8008210:	d106      	bne.n	8008220 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8008212:	7bbb      	ldrb	r3, [r7, #14]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d103      	bne.n	8008220 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2203      	movs	r2, #3
 800821c:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e


	LOG_FUNCTION_END(Status);
	return Status;
 8008220:	7bfb      	ldrb	r3, [r7, #15]
 8008222:	b25b      	sxtb	r3, r3
}
 8008224:	4618      	mov	r0, r3
 8008226:	3710      	adds	r7, #16
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <VL53L0X_PerformRefCalibration>:
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b086      	sub	sp, #24
 8008230:	af00      	add	r7, sp, #0
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008238:	2300      	movs	r3, #0
 800823a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800823c:	2301      	movs	r3, #1
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	68b9      	ldr	r1, [r7, #8]
 8008242:	68f8      	ldr	r0, [r7, #12]
 8008244:	f001 fbcc 	bl	80099e0 <VL53L0X_perform_ref_calibration>
 8008248:	4603      	mov	r3, r0
 800824a:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800824c:	7dfb      	ldrb	r3, [r7, #23]
 800824e:	b25b      	sxtb	r3, r3
}
 8008250:	4618      	mov	r0, r3
 8008252:	3718      	adds	r7, #24
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b086      	sub	sp, #24
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	460b      	mov	r3, r1
 8008262:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008264:	2300      	movs	r3, #0
 8008266:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800826e:	75fb      	strb	r3, [r7, #23]
		Pin0GpioFunctionality);

	switch (InterruptConfig) {
 8008270:	7dfb      	ldrb	r3, [r7, #23]
 8008272:	2b02      	cmp	r3, #2
 8008274:	d054      	beq.n	8008320 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>
 8008276:	2b03      	cmp	r3, #3
 8008278:	f000 80a0 	beq.w	80083bc <VL53L0X_CheckAndLoadInterruptSettings+0x164>
 800827c:	2b01      	cmp	r3, #1
 800827e:	f040 80eb 	bne.w	8008458 <VL53L0X_CheckAndLoadInterruptSettings+0x200>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8008282:	f107 030c 	add.w	r3, r7, #12
 8008286:	f107 0210 	add.w	r2, r7, #16
 800828a:	2101      	movs	r1, #1
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 fc81 	bl	8008b94 <VL53L0X_GetInterruptThresholds>
 8008292:	4603      	mov	r3, r0
 8008294:	72fb      	strb	r3, [r7, #11]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if ((ThresholdLow > 255*65536) &&
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800829c:	f240 80d7 	bls.w	800844e <VL53L0X_CheckAndLoadInterruptSettings+0x1f6>
			(Status == VL53L0X_ERROR_NONE)) {
 80082a0:	7afb      	ldrb	r3, [r7, #11]
 80082a2:	b25b      	sxtb	r3, r3
		if ((ThresholdLow > 255*65536) &&
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f040 80d2 	bne.w	800844e <VL53L0X_CheckAndLoadInterruptSettings+0x1f6>

			if (StartNotStopFlag != 0) {
 80082aa:	78fb      	ldrb	r3, [r7, #3]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d006      	beq.n	80082be <VL53L0X_CheckAndLoadInterruptSettings+0x66>
				Status = VL53L0X_load_tuning_settings(Dev,
 80082b0:	496c      	ldr	r1, [pc, #432]	; (8008464 <VL53L0X_CheckAndLoadInterruptSettings+0x20c>)
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f003 f878 	bl	800b3a8 <VL53L0X_load_tuning_settings>
 80082b8:	4603      	mov	r3, r0
 80082ba:	72fb      	strb	r3, [r7, #11]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 80082bc:	e0c7      	b.n	800844e <VL53L0X_CheckAndLoadInterruptSettings+0x1f6>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 80082be:	2204      	movs	r2, #4
 80082c0:	21ff      	movs	r1, #255	; 0xff
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f004 f8b4 	bl	800c430 <VL53L0X_WrByte>
 80082c8:	4603      	mov	r3, r0
 80082ca:	461a      	mov	r2, r3
 80082cc:	7afb      	ldrb	r3, [r7, #11]
 80082ce:	b25b      	sxtb	r3, r3
 80082d0:	4313      	orrs	r3, r2
 80082d2:	b25b      	sxtb	r3, r3
 80082d4:	72fb      	strb	r3, [r7, #11]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80082d6:	2200      	movs	r2, #0
 80082d8:	2170      	movs	r1, #112	; 0x70
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f004 f8a8 	bl	800c430 <VL53L0X_WrByte>
 80082e0:	4603      	mov	r3, r0
 80082e2:	461a      	mov	r2, r3
 80082e4:	7afb      	ldrb	r3, [r7, #11]
 80082e6:	b25b      	sxtb	r3, r3
 80082e8:	4313      	orrs	r3, r2
 80082ea:	b25b      	sxtb	r3, r3
 80082ec:	72fb      	strb	r3, [r7, #11]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80082ee:	2200      	movs	r2, #0
 80082f0:	21ff      	movs	r1, #255	; 0xff
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f004 f89c 	bl	800c430 <VL53L0X_WrByte>
 80082f8:	4603      	mov	r3, r0
 80082fa:	461a      	mov	r2, r3
 80082fc:	7afb      	ldrb	r3, [r7, #11]
 80082fe:	b25b      	sxtb	r3, r3
 8008300:	4313      	orrs	r3, r2
 8008302:	b25b      	sxtb	r3, r3
 8008304:	72fb      	strb	r3, [r7, #11]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008306:	2200      	movs	r2, #0
 8008308:	2180      	movs	r1, #128	; 0x80
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f004 f890 	bl	800c430 <VL53L0X_WrByte>
 8008310:	4603      	mov	r3, r0
 8008312:	461a      	mov	r2, r3
 8008314:	7afb      	ldrb	r3, [r7, #11]
 8008316:	b25b      	sxtb	r3, r3
 8008318:	4313      	orrs	r3, r2
 800831a:	b25b      	sxtb	r3, r3
 800831c:	72fb      	strb	r3, [r7, #11]
		break;
 800831e:	e096      	b.n	800844e <VL53L0X_CheckAndLoadInterruptSettings+0x1f6>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8008320:	f107 030c 	add.w	r3, r7, #12
 8008324:	f107 0210 	add.w	r2, r7, #16
 8008328:	2101      	movs	r1, #1
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fc32 	bl	8008b94 <VL53L0X_GetInterruptThresholds>
 8008330:	4603      	mov	r3, r0
 8008332:	72fb      	strb	r3, [r7, #11]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if ((ThresholdHigh > 0) &&
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2b00      	cmp	r3, #0
 8008338:	f000 808b 	beq.w	8008452 <VL53L0X_CheckAndLoadInterruptSettings+0x1fa>
			(Status == VL53L0X_ERROR_NONE)) {
 800833c:	7afb      	ldrb	r3, [r7, #11]
 800833e:	b25b      	sxtb	r3, r3
		if ((ThresholdHigh > 0) &&
 8008340:	2b00      	cmp	r3, #0
 8008342:	f040 8086 	bne.w	8008452 <VL53L0X_CheckAndLoadInterruptSettings+0x1fa>

			if (StartNotStopFlag != 0) {
 8008346:	78fb      	ldrb	r3, [r7, #3]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d006      	beq.n	800835a <VL53L0X_CheckAndLoadInterruptSettings+0x102>
				Status = VL53L0X_load_tuning_settings(Dev,
 800834c:	4945      	ldr	r1, [pc, #276]	; (8008464 <VL53L0X_CheckAndLoadInterruptSettings+0x20c>)
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f003 f82a 	bl	800b3a8 <VL53L0X_load_tuning_settings>
 8008354:	4603      	mov	r3, r0
 8008356:	72fb      	strb	r3, [r7, #11]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 8008358:	e07b      	b.n	8008452 <VL53L0X_CheckAndLoadInterruptSettings+0x1fa>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800835a:	2204      	movs	r2, #4
 800835c:	21ff      	movs	r1, #255	; 0xff
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f004 f866 	bl	800c430 <VL53L0X_WrByte>
 8008364:	4603      	mov	r3, r0
 8008366:	461a      	mov	r2, r3
 8008368:	7afb      	ldrb	r3, [r7, #11]
 800836a:	b25b      	sxtb	r3, r3
 800836c:	4313      	orrs	r3, r2
 800836e:	b25b      	sxtb	r3, r3
 8008370:	72fb      	strb	r3, [r7, #11]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8008372:	2200      	movs	r2, #0
 8008374:	2170      	movs	r1, #112	; 0x70
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f004 f85a 	bl	800c430 <VL53L0X_WrByte>
 800837c:	4603      	mov	r3, r0
 800837e:	461a      	mov	r2, r3
 8008380:	7afb      	ldrb	r3, [r7, #11]
 8008382:	b25b      	sxtb	r3, r3
 8008384:	4313      	orrs	r3, r2
 8008386:	b25b      	sxtb	r3, r3
 8008388:	72fb      	strb	r3, [r7, #11]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800838a:	2200      	movs	r2, #0
 800838c:	21ff      	movs	r1, #255	; 0xff
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f004 f84e 	bl	800c430 <VL53L0X_WrByte>
 8008394:	4603      	mov	r3, r0
 8008396:	461a      	mov	r2, r3
 8008398:	7afb      	ldrb	r3, [r7, #11]
 800839a:	b25b      	sxtb	r3, r3
 800839c:	4313      	orrs	r3, r2
 800839e:	b25b      	sxtb	r3, r3
 80083a0:	72fb      	strb	r3, [r7, #11]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80083a2:	2200      	movs	r2, #0
 80083a4:	2180      	movs	r1, #128	; 0x80
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f004 f842 	bl	800c430 <VL53L0X_WrByte>
 80083ac:	4603      	mov	r3, r0
 80083ae:	461a      	mov	r2, r3
 80083b0:	7afb      	ldrb	r3, [r7, #11]
 80083b2:	b25b      	sxtb	r3, r3
 80083b4:	4313      	orrs	r3, r2
 80083b6:	b25b      	sxtb	r3, r3
 80083b8:	72fb      	strb	r3, [r7, #11]
		break;
 80083ba:	e04a      	b.n	8008452 <VL53L0X_CheckAndLoadInterruptSettings+0x1fa>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 80083bc:	f107 030c 	add.w	r3, r7, #12
 80083c0:	f107 0210 	add.w	r2, r7, #16
 80083c4:	2101      	movs	r1, #1
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fbe4 	bl	8008b94 <VL53L0X_GetInterruptThresholds>
 80083cc:	4603      	mov	r3, r0
 80083ce:	72fb      	strb	r3, [r7, #11]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if (Status == VL53L0X_ERROR_NONE) {
 80083d0:	7afb      	ldrb	r3, [r7, #11]
 80083d2:	b25b      	sxtb	r3, r3
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d13e      	bne.n	8008456 <VL53L0X_CheckAndLoadInterruptSettings+0x1fe>
			if (StartNotStopFlag != 0) {
 80083d8:	78fb      	ldrb	r3, [r7, #3]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d006      	beq.n	80083ec <VL53L0X_CheckAndLoadInterruptSettings+0x194>
				Status = VL53L0X_load_tuning_settings(Dev,
 80083de:	4921      	ldr	r1, [pc, #132]	; (8008464 <VL53L0X_CheckAndLoadInterruptSettings+0x20c>)
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f002 ffe1 	bl	800b3a8 <VL53L0X_load_tuning_settings>
 80083e6:	4603      	mov	r3, r0
 80083e8:	72fb      	strb	r3, [r7, #11]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 80083ea:	e034      	b.n	8008456 <VL53L0X_CheckAndLoadInterruptSettings+0x1fe>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 80083ec:	2204      	movs	r2, #4
 80083ee:	21ff      	movs	r1, #255	; 0xff
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f004 f81d 	bl	800c430 <VL53L0X_WrByte>
 80083f6:	4603      	mov	r3, r0
 80083f8:	461a      	mov	r2, r3
 80083fa:	7afb      	ldrb	r3, [r7, #11]
 80083fc:	b25b      	sxtb	r3, r3
 80083fe:	4313      	orrs	r3, r2
 8008400:	b25b      	sxtb	r3, r3
 8008402:	72fb      	strb	r3, [r7, #11]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8008404:	2200      	movs	r2, #0
 8008406:	2170      	movs	r1, #112	; 0x70
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f004 f811 	bl	800c430 <VL53L0X_WrByte>
 800840e:	4603      	mov	r3, r0
 8008410:	461a      	mov	r2, r3
 8008412:	7afb      	ldrb	r3, [r7, #11]
 8008414:	b25b      	sxtb	r3, r3
 8008416:	4313      	orrs	r3, r2
 8008418:	b25b      	sxtb	r3, r3
 800841a:	72fb      	strb	r3, [r7, #11]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800841c:	2200      	movs	r2, #0
 800841e:	21ff      	movs	r1, #255	; 0xff
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f004 f805 	bl	800c430 <VL53L0X_WrByte>
 8008426:	4603      	mov	r3, r0
 8008428:	461a      	mov	r2, r3
 800842a:	7afb      	ldrb	r3, [r7, #11]
 800842c:	b25b      	sxtb	r3, r3
 800842e:	4313      	orrs	r3, r2
 8008430:	b25b      	sxtb	r3, r3
 8008432:	72fb      	strb	r3, [r7, #11]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008434:	2200      	movs	r2, #0
 8008436:	2180      	movs	r1, #128	; 0x80
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f003 fff9 	bl	800c430 <VL53L0X_WrByte>
 800843e:	4603      	mov	r3, r0
 8008440:	461a      	mov	r2, r3
 8008442:	7afb      	ldrb	r3, [r7, #11]
 8008444:	b25b      	sxtb	r3, r3
 8008446:	4313      	orrs	r3, r2
 8008448:	b25b      	sxtb	r3, r3
 800844a:	72fb      	strb	r3, [r7, #11]
		break;
 800844c:	e003      	b.n	8008456 <VL53L0X_CheckAndLoadInterruptSettings+0x1fe>
		break;
 800844e:	bf00      	nop
 8008450:	e002      	b.n	8008458 <VL53L0X_CheckAndLoadInterruptSettings+0x200>
		break;
 8008452:	bf00      	nop
 8008454:	e000      	b.n	8008458 <VL53L0X_CheckAndLoadInterruptSettings+0x200>
		break;
 8008456:	bf00      	nop
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008458:	7afb      	ldrb	r3, [r7, #11]
 800845a:	b25b      	sxtb	r3, r3
}
 800845c:	4618      	mov	r0, r3
 800845e:	3718      	adds	r7, #24
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	200002d8 	.word	0x200002d8

08008468 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008470:	2300      	movs	r3, #0
 8008472:	72bb      	strb	r3, [r7, #10]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8008474:	2301      	movs	r3, #1
 8008476:	72fb      	strb	r3, [r7, #11]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8008478:	f107 0309 	add.w	r3, r7, #9
 800847c:	4619      	mov	r1, r3
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f7ff fa7e 	bl	8007980 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008484:	2201      	movs	r2, #1
 8008486:	2180      	movs	r1, #128	; 0x80
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f003 ffd1 	bl	800c430 <VL53L0X_WrByte>
 800848e:	4603      	mov	r3, r0
 8008490:	72bb      	strb	r3, [r7, #10]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008492:	2201      	movs	r2, #1
 8008494:	21ff      	movs	r1, #255	; 0xff
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f003 ffca 	bl	800c430 <VL53L0X_WrByte>
 800849c:	4603      	mov	r3, r0
 800849e:	72bb      	strb	r3, [r7, #10]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 80084a0:	2200      	movs	r2, #0
 80084a2:	2100      	movs	r1, #0
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f003 ffc3 	bl	800c430 <VL53L0X_WrByte>
 80084aa:	4603      	mov	r3, r0
 80084ac:	72bb      	strb	r3, [r7, #10]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 80084b4:	461a      	mov	r2, r3
 80084b6:	2191      	movs	r1, #145	; 0x91
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f003 ffb9 	bl	800c430 <VL53L0X_WrByte>
 80084be:	4603      	mov	r3, r0
 80084c0:	72bb      	strb	r3, [r7, #10]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80084c2:	2201      	movs	r2, #1
 80084c4:	2100      	movs	r1, #0
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f003 ffb2 	bl	800c430 <VL53L0X_WrByte>
 80084cc:	4603      	mov	r3, r0
 80084ce:	72bb      	strb	r3, [r7, #10]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80084d0:	2200      	movs	r2, #0
 80084d2:	21ff      	movs	r1, #255	; 0xff
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f003 ffab 	bl	800c430 <VL53L0X_WrByte>
 80084da:	4603      	mov	r3, r0
 80084dc:	72bb      	strb	r3, [r7, #10]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 80084de:	2200      	movs	r2, #0
 80084e0:	2180      	movs	r1, #128	; 0x80
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f003 ffa4 	bl	800c430 <VL53L0X_WrByte>
 80084e8:	4603      	mov	r3, r0
 80084ea:	72bb      	strb	r3, [r7, #10]

	switch (DeviceMode) {
 80084ec:	7a7b      	ldrb	r3, [r7, #9]
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d037      	beq.n	8008562 <VL53L0X_StartMeasurement+0xfa>
 80084f2:	2b03      	cmp	r3, #3
 80084f4:	d04f      	beq.n	8008596 <VL53L0X_StartMeasurement+0x12e>
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d167      	bne.n	80085ca <VL53L0X_StartMeasurement+0x162>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 80084fa:	2201      	movs	r2, #1
 80084fc:	2100      	movs	r1, #0
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f003 ff96 	bl	800c430 <VL53L0X_WrByte>
 8008504:	4603      	mov	r3, r0
 8008506:	72bb      	strb	r3, [r7, #10]

		Byte = StartStopByte;
 8008508:	7afb      	ldrb	r3, [r7, #11]
 800850a:	723b      	strb	r3, [r7, #8]
		if (Status == VL53L0X_ERROR_NONE) {
 800850c:	7abb      	ldrb	r3, [r7, #10]
 800850e:	b25b      	sxtb	r3, r3
 8008510:	2b00      	cmp	r3, #0
 8008512:	d15d      	bne.n	80085d0 <VL53L0X_StartMeasurement+0x168>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8008514:	2300      	movs	r3, #0
 8008516:	60fb      	str	r3, [r7, #12]
			do {
				if (LoopNb > 0)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d008      	beq.n	8008530 <VL53L0X_StartMeasurement+0xc8>
					Status = VL53L0X_RdByte(Dev,
 800851e:	f107 0308 	add.w	r3, r7, #8
 8008522:	461a      	mov	r2, r3
 8008524:	2100      	movs	r1, #0
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f003 fe87 	bl	800c23a <VL53L0X_RdByte>
 800852c:	4603      	mov	r3, r0
 800852e:	72bb      	strb	r3, [r7, #10]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	3301      	adds	r3, #1
 8008534:	60fb      	str	r3, [r7, #12]
			} while (((Byte & StartStopByte) == StartStopByte)
 8008536:	7a3a      	ldrb	r2, [r7, #8]
 8008538:	7afb      	ldrb	r3, [r7, #11]
 800853a:	4013      	ands	r3, r2
 800853c:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800853e:	7afa      	ldrb	r2, [r7, #11]
 8008540:	429a      	cmp	r2, r3
 8008542:	d107      	bne.n	8008554 <VL53L0X_StartMeasurement+0xec>
				&& (Status == VL53L0X_ERROR_NONE)
 8008544:	7abb      	ldrb	r3, [r7, #10]
 8008546:	b25b      	sxtb	r3, r3
 8008548:	2b00      	cmp	r3, #0
 800854a:	d103      	bne.n	8008554 <VL53L0X_StartMeasurement+0xec>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008552:	d3e1      	bcc.n	8008518 <VL53L0X_StartMeasurement+0xb0>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800855a:	d339      	bcc.n	80085d0 <VL53L0X_StartMeasurement+0x168>
				Status = VL53L0X_ERROR_TIME_OUT;
 800855c:	23f9      	movs	r3, #249	; 0xf9
 800855e:	72bb      	strb	r3, [r7, #10]

		}

		break;
 8008560:	e036      	b.n	80085d0 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8008562:	7abb      	ldrb	r3, [r7, #10]
 8008564:	b25b      	sxtb	r3, r3
 8008566:	2b00      	cmp	r3, #0
 8008568:	d105      	bne.n	8008576 <VL53L0X_StartMeasurement+0x10e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800856a:	2101      	movs	r1, #1
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f7ff fe73 	bl	8008258 <VL53L0X_CheckAndLoadInterruptSettings>
 8008572:	4603      	mov	r3, r0
 8008574:	72bb      	strb	r3, [r7, #10]

		Status = VL53L0X_WrByte(Dev,
 8008576:	2202      	movs	r2, #2
 8008578:	2100      	movs	r1, #0
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f003 ff58 	bl	800c430 <VL53L0X_WrByte>
 8008580:	4603      	mov	r3, r0
 8008582:	72bb      	strb	r3, [r7, #10]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8008584:	7abb      	ldrb	r3, [r7, #10]
 8008586:	b25b      	sxtb	r3, r3
 8008588:	2b00      	cmp	r3, #0
 800858a:	d123      	bne.n	80085d4 <VL53L0X_StartMeasurement+0x16c>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2204      	movs	r2, #4
 8008590:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		}
		break;
 8008594:	e01e      	b.n	80085d4 <VL53L0X_StartMeasurement+0x16c>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8008596:	7abb      	ldrb	r3, [r7, #10]
 8008598:	b25b      	sxtb	r3, r3
 800859a:	2b00      	cmp	r3, #0
 800859c:	d105      	bne.n	80085aa <VL53L0X_StartMeasurement+0x142>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800859e:	2101      	movs	r1, #1
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f7ff fe59 	bl	8008258 <VL53L0X_CheckAndLoadInterruptSettings>
 80085a6:	4603      	mov	r3, r0
 80085a8:	72bb      	strb	r3, [r7, #10]

		Status = VL53L0X_WrByte(Dev,
 80085aa:	2204      	movs	r2, #4
 80085ac:	2100      	movs	r1, #0
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f003 ff3e 	bl	800c430 <VL53L0X_WrByte>
 80085b4:	4603      	mov	r3, r0
 80085b6:	72bb      	strb	r3, [r7, #10]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 80085b8:	7abb      	ldrb	r3, [r7, #10]
 80085ba:	b25b      	sxtb	r3, r3
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d10b      	bne.n	80085d8 <VL53L0X_StartMeasurement+0x170>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2204      	movs	r2, #4
 80085c4:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		}
		break;
 80085c8:	e006      	b.n	80085d8 <VL53L0X_StartMeasurement+0x170>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80085ca:	23f8      	movs	r3, #248	; 0xf8
 80085cc:	72bb      	strb	r3, [r7, #10]
 80085ce:	e004      	b.n	80085da <VL53L0X_StartMeasurement+0x172>
		break;
 80085d0:	bf00      	nop
 80085d2:	e002      	b.n	80085da <VL53L0X_StartMeasurement+0x172>
		break;
 80085d4:	bf00      	nop
 80085d6:	e000      	b.n	80085da <VL53L0X_StartMeasurement+0x172>
		break;
 80085d8:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80085da:	7abb      	ldrb	r3, [r7, #10]
 80085dc:	b25b      	sxtb	r3, r3
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3710      	adds	r7, #16
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b084      	sub	sp, #16
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
 80085ee:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80085f0:	2300      	movs	r3, #0
 80085f2:	73bb      	strb	r3, [r7, #14]
	uint8_t InterruptConfig;
	uint32_t InterruptMask;

	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80085fa:	73fb      	strb	r3, [r7, #15]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
 80085fe:	2b04      	cmp	r3, #4
 8008600:	d112      	bne.n	8008628 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8008602:	f107 0308 	add.w	r3, r7, #8
 8008606:	4619      	mov	r1, r3
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 fb3d 	bl	8008c88 <VL53L0X_GetInterruptMaskStatus>
 800860e:	4603      	mov	r3, r0
 8008610:	73bb      	strb	r3, [r7, #14]
		if (InterruptMask ==
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	2b04      	cmp	r3, #4
 8008616:	d103      	bne.n	8008620 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	2201      	movs	r2, #1
 800861c:	701a      	strb	r2, [r3, #0]
 800861e:	e01c      	b.n	800865a <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	2200      	movs	r2, #0
 8008624:	701a      	strb	r2, [r3, #0]
 8008626:	e018      	b.n	800865a <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8008628:	f107 030d 	add.w	r3, r7, #13
 800862c:	461a      	mov	r2, r3
 800862e:	2114      	movs	r1, #20
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f003 fe02 	bl	800c23a <VL53L0X_RdByte>
 8008636:	4603      	mov	r3, r0
 8008638:	73bb      	strb	r3, [r7, #14]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800863a:	7bbb      	ldrb	r3, [r7, #14]
 800863c:	b25b      	sxtb	r3, r3
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10b      	bne.n	800865a <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8008642:	7b7b      	ldrb	r3, [r7, #13]
 8008644:	f003 0301 	and.w	r3, r3, #1
 8008648:	2b00      	cmp	r3, #0
 800864a:	d003      	beq.n	8008654 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	2201      	movs	r2, #1
 8008650:	701a      	strb	r2, [r3, #0]
 8008652:	e002      	b.n	800865a <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	2200      	movs	r2, #0
 8008658:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800865a:	7bbb      	ldrb	r3, [r7, #14]
 800865c:	b25b      	sxtb	r3, r3
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
	...

08008668 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8008668:	b5b0      	push	{r4, r5, r7, lr}
 800866a:	b094      	sub	sp, #80	; 0x50
 800866c:	af02      	add	r7, sp, #8
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008672:	2300      	movs	r3, #0
 8008674:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8008678:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800867c:	230c      	movs	r3, #12
 800867e:	2114      	movs	r1, #20
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f003 fe35 	bl	800c2f0 <VL53L0X_ReadMulti>
 8008686:	4603      	mov	r3, r0
 8008688:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (Status == VL53L0X_ERROR_NONE) {
 800868c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008690:	b25b      	sxtb	r3, r3
 8008692:	2b00      	cmp	r3, #0
 8008694:	f040 80ce 	bne.w	8008834 <VL53L0X_GetRangingMeasurementData+0x1cc>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	2200      	movs	r2, #0
 800869c:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	2200      	movs	r2, #0
 80086a2:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11],
 80086a4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	021b      	lsls	r3, r3, #8
 80086ac:	b29a      	uxth	r2, r3
 80086ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	4413      	add	r3, r2
 80086b6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
					       localBuffer[10]);
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	2200      	movs	r2, #0
 80086be:	605a      	str	r2, [r3, #4]


		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80086c0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	021b      	lsls	r3, r3, #8
 80086c8:	b29a      	uxth	r2, r3
 80086ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	4413      	add	r3, r2
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	025b      	lsls	r3, r3, #9
 80086d6:	643b      	str	r3, [r7, #64]	; 0x40
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80086dc:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9],
 80086de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	021b      	lsls	r3, r3, #8
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	4413      	add	r3, r2
 80086f0:	87fb      	strh	r3, [r7, #62]	; 0x3e
						 localBuffer[8]);
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 80086f2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80086f4:	025b      	lsls	r3, r3, #9
 80086f6:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 80086fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008700:	b29b      	uxth	r3, r3
 8008702:	021b      	lsls	r3, r3, #8
 8008704:	b29a      	uxth	r2, r3
 8008706:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800870a:	b29b      	uxth	r3, r3
 800870c:	4413      	add	r3, r2
 800870e:	87bb      	strh	r3, [r7, #60]	; 0x3c
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8008714:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8008716:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800871a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
 8008724:	873b      	strh	r3, [r7, #56]	; 0x38
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f893 315d 	ldrb.w	r3, [r3, #349]	; 0x15d
 800872c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8008730:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008732:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008736:	d045      	beq.n	80087c4 <VL53L0X_GetRangingMeasurementData+0x15c>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8008738:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800873a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800873e:	fb02 f303 	mul.w	r3, r2, r3
 8008742:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008746:	4a59      	ldr	r2, [pc, #356]	; (80088ac <VL53L0X_GetRangingMeasurementData+0x244>)
 8008748:	fb82 1203 	smull	r1, r2, r2, r3
 800874c:	1192      	asrs	r2, r2, #6
 800874e:	17db      	asrs	r3, r3, #31
 8008750:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8008752:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	699b      	ldr	r3, [r3, #24]
 800875a:	86bb      	strh	r3, [r7, #52]	; 0x34
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	7d1b      	ldrb	r3, [r3, #20]
 8008760:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8008764:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008768:	2b00      	cmp	r3, #0
 800876a:	d02b      	beq.n	80087c4 <VL53L0X_GetRangingMeasurementData+0x15c>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800876c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800876e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8008770:	fb02 f303 	mul.w	r3, r2, r3
 8008774:	121b      	asrs	r3, r3, #8
 8008776:	461a      	mov	r2, r3
				if ((SignalRate
 8008778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800877a:	4293      	cmp	r3, r2
 800877c:	d10d      	bne.n	800879a <VL53L0X_GetRangingMeasurementData+0x132>
					<= 0) {
					if (RangeFractionalEnable)
 800877e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008782:	2b00      	cmp	r3, #0
 8008784:	d004      	beq.n	8008790 <VL53L0X_GetRangingMeasurementData+0x128>
						XtalkRangeMilliMeter = 8888;
 8008786:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800878a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800878e:	e015      	b.n	80087bc <VL53L0X_GetRangingMeasurementData+0x154>
					else
						XtalkRangeMilliMeter = 8888
 8008790:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8008794:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008798:	e010      	b.n	80087bc <VL53L0X_GetRangingMeasurementData+0x154>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800879a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800879e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087a0:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 80087a4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80087a6:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 80087a8:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 80087ac:	121b      	asrs	r3, r3, #8
 80087ae:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 80087b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087b2:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 80087b4:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 80087b8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
				}

				tmpuint16 = XtalkRangeMilliMeter;
 80087bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80087c0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			}

		}

		if (RangeFractionalEnable) {
 80087c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d00d      	beq.n	80087e8 <VL53L0X_GetRangingMeasurementData+0x180>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 80087cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80087d0:	089b      	lsrs	r3, r3, #2
 80087d2:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 80087d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	019b      	lsls	r3, r3, #6
 80087e0:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	75da      	strb	r2, [r3, #23]
 80087e6:	e006      	b.n	80087f6 <VL53L0X_GetRangingMeasurementData+0x18e>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80087ee:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	2200      	movs	r2, #0
 80087f4:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 80087f6:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80087f8:	f897 103b 	ldrb.w	r1, [r7, #59]	; 0x3b
 80087fc:	f107 0331 	add.w	r3, r7, #49	; 0x31
 8008800:	9301      	str	r3, [sp, #4]
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	9300      	str	r3, [sp, #0]
 8008806:	4613      	mov	r3, r2
 8008808:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f003 fa28 	bl	800bc60 <VL53L0X_get_pal_range_status>
 8008810:	4603      	mov	r3, r0
 8008812:	461a      	mov	r2, r3
 8008814:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008818:	b25b      	sxtb	r3, r3
 800881a:	4313      	orrs	r3, r2
 800881c:	b25b      	sxtb	r3, r3
 800881e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8008822:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008826:	b25b      	sxtb	r3, r3
 8008828:	2b00      	cmp	r3, #0
 800882a:	d103      	bne.n	8008834 <VL53L0X_GetRangingMeasurementData+0x1cc>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800882c:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008834:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008838:	b25b      	sxtb	r3, r3
 800883a:	2b00      	cmp	r3, #0
 800883c:	d12e      	bne.n	800889c <VL53L0X_GetRangingMeasurementData+0x234>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f107 0408 	add.w	r4, r7, #8
 8008844:	f103 0580 	add.w	r5, r3, #128	; 0x80
 8008848:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800884a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800884c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008850:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8008858:	823b      	strh	r3, [r7, #16]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800885e:	77fb      	strb	r3, [r7, #31]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8008864:	827b      	strh	r3, [r7, #18]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800886a:	60fb      	str	r3, [r7, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8008870:	617b      	str	r3, [r7, #20]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8008876:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800887c:	83bb      	strh	r3, [r7, #28]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8008882:	f887 3020 	strb.w	r3, [r7, #32]

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f103 0480 	add.w	r4, r3, #128	; 0x80
 800888c:	f107 0508 	add.w	r5, r7, #8
 8008890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008894:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008898:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800889c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80088a0:	b25b      	sxtb	r3, r3
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3748      	adds	r7, #72	; 0x48
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bdb0      	pop	{r4, r5, r7, pc}
 80088aa:	bf00      	nop
 80088ac:	10624dd3 	.word	0x10624dd3

080088b0 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80088ba:	2300      	movs	r3, #0
 80088bc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode!
	 */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80088be:	2100      	movs	r1, #0
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f7ff f815 	bl	80078f0 <VL53L0X_SetDeviceMode>
 80088c6:	4603      	mov	r3, r0
 80088c8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80088ca:	7bfb      	ldrb	r3, [r7, #15]
 80088cc:	b25b      	sxtb	r3, r3
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d104      	bne.n	80088dc <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f7ff fc76 	bl	80081c4 <VL53L0X_PerformSingleMeasurement>
 80088d8:	4603      	mov	r3, r0
 80088da:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80088dc:	7bfb      	ldrb	r3, [r7, #15]
 80088de:	b25b      	sxtb	r3, r3
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d105      	bne.n	80088f0 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80088e4:	6839      	ldr	r1, [r7, #0]
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f7ff febe 	bl	8008668 <VL53L0X_GetRangingMeasurementData>
 80088ec:	4603      	mov	r3, r0
 80088ee:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 80088f0:	7bfb      	ldrb	r3, [r7, #15]
 80088f2:	b25b      	sxtb	r3, r3
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d105      	bne.n	8008904 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80088f8:	2100      	movs	r1, #0
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 f980 	bl	8008c00 <VL53L0X_ClearInterruptMask>
 8008900:	4603      	mov	r3, r0
 8008902:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8008904:	7bfb      	ldrb	r3, [r7, #15]
 8008906:	b25b      	sxtb	r3, r3
}
 8008908:	4618      	mov	r0, r3
 800890a:	3710      	adds	r7, #16
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	4608      	mov	r0, r1
 800891a:	4611      	mov	r1, r2
 800891c:	461a      	mov	r2, r3
 800891e:	4603      	mov	r3, r0
 8008920:	70fb      	strb	r3, [r7, #3]
 8008922:	460b      	mov	r3, r1
 8008924:	70bb      	strb	r3, [r7, #2]
 8008926:	4613      	mov	r3, r2
 8008928:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800892a:	2300      	movs	r3, #0
 800892c:	73bb      	strb	r3, [r7, #14]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800892e:	78fb      	ldrb	r3, [r7, #3]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d002      	beq.n	800893a <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8008934:	23f6      	movs	r3, #246	; 0xf6
 8008936:	73bb      	strb	r3, [r7, #14]
 8008938:	e125      	b.n	8008b86 <VL53L0X_SetGpioConfig+0x276>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800893a:	78bb      	ldrb	r3, [r7, #2]
 800893c:	2b14      	cmp	r3, #20
 800893e:	d110      	bne.n	8008962 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8008940:	7e3b      	ldrb	r3, [r7, #24]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d102      	bne.n	800894c <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8008946:	2310      	movs	r3, #16
 8008948:	73fb      	strb	r3, [r7, #15]
 800894a:	e001      	b.n	8008950 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800894c:	2301      	movs	r3, #1
 800894e:	73fb      	strb	r3, [r7, #15]

		Status = VL53L0X_WrByte(Dev,
 8008950:	7bfb      	ldrb	r3, [r7, #15]
 8008952:	461a      	mov	r2, r3
 8008954:	2184      	movs	r1, #132	; 0x84
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f003 fd6a 	bl	800c430 <VL53L0X_WrByte>
 800895c:	4603      	mov	r3, r0
 800895e:	73bb      	strb	r3, [r7, #14]
 8008960:	e111      	b.n	8008b86 <VL53L0X_SetGpioConfig+0x276>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8008962:	78bb      	ldrb	r3, [r7, #2]
 8008964:	2b15      	cmp	r3, #21
 8008966:	f040 80b5 	bne.w	8008ad4 <VL53L0X_SetGpioConfig+0x1c4>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800896a:	2201      	movs	r2, #1
 800896c:	21ff      	movs	r1, #255	; 0xff
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f003 fd5e 	bl	800c430 <VL53L0X_WrByte>
 8008974:	4603      	mov	r3, r0
 8008976:	461a      	mov	r2, r3
 8008978:	7bbb      	ldrb	r3, [r7, #14]
 800897a:	b25b      	sxtb	r3, r3
 800897c:	4313      	orrs	r3, r2
 800897e:	b25b      	sxtb	r3, r3
 8008980:	73bb      	strb	r3, [r7, #14]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008982:	2200      	movs	r2, #0
 8008984:	2100      	movs	r1, #0
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f003 fd52 	bl	800c430 <VL53L0X_WrByte>
 800898c:	4603      	mov	r3, r0
 800898e:	461a      	mov	r2, r3
 8008990:	7bbb      	ldrb	r3, [r7, #14]
 8008992:	b25b      	sxtb	r3, r3
 8008994:	4313      	orrs	r3, r2
 8008996:	b25b      	sxtb	r3, r3
 8008998:	73bb      	strb	r3, [r7, #14]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800899a:	2200      	movs	r2, #0
 800899c:	21ff      	movs	r1, #255	; 0xff
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f003 fd46 	bl	800c430 <VL53L0X_WrByte>
 80089a4:	4603      	mov	r3, r0
 80089a6:	461a      	mov	r2, r3
 80089a8:	7bbb      	ldrb	r3, [r7, #14]
 80089aa:	b25b      	sxtb	r3, r3
 80089ac:	4313      	orrs	r3, r2
 80089ae:	b25b      	sxtb	r3, r3
 80089b0:	73bb      	strb	r3, [r7, #14]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80089b2:	2201      	movs	r2, #1
 80089b4:	2180      	movs	r1, #128	; 0x80
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f003 fd3a 	bl	800c430 <VL53L0X_WrByte>
 80089bc:	4603      	mov	r3, r0
 80089be:	461a      	mov	r2, r3
 80089c0:	7bbb      	ldrb	r3, [r7, #14]
 80089c2:	b25b      	sxtb	r3, r3
 80089c4:	4313      	orrs	r3, r2
 80089c6:	b25b      	sxtb	r3, r3
 80089c8:	73bb      	strb	r3, [r7, #14]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80089ca:	2202      	movs	r2, #2
 80089cc:	2185      	movs	r1, #133	; 0x85
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f003 fd2e 	bl	800c430 <VL53L0X_WrByte>
 80089d4:	4603      	mov	r3, r0
 80089d6:	461a      	mov	r2, r3
 80089d8:	7bbb      	ldrb	r3, [r7, #14]
 80089da:	b25b      	sxtb	r3, r3
 80089dc:	4313      	orrs	r3, r2
 80089de:	b25b      	sxtb	r3, r3
 80089e0:	73bb      	strb	r3, [r7, #14]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80089e2:	2204      	movs	r2, #4
 80089e4:	21ff      	movs	r1, #255	; 0xff
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f003 fd22 	bl	800c430 <VL53L0X_WrByte>
 80089ec:	4603      	mov	r3, r0
 80089ee:	461a      	mov	r2, r3
 80089f0:	7bbb      	ldrb	r3, [r7, #14]
 80089f2:	b25b      	sxtb	r3, r3
 80089f4:	4313      	orrs	r3, r2
 80089f6:	b25b      	sxtb	r3, r3
 80089f8:	73bb      	strb	r3, [r7, #14]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80089fa:	2200      	movs	r2, #0
 80089fc:	21cd      	movs	r1, #205	; 0xcd
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f003 fd16 	bl	800c430 <VL53L0X_WrByte>
 8008a04:	4603      	mov	r3, r0
 8008a06:	461a      	mov	r2, r3
 8008a08:	7bbb      	ldrb	r3, [r7, #14]
 8008a0a:	b25b      	sxtb	r3, r3
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	b25b      	sxtb	r3, r3
 8008a10:	73bb      	strb	r3, [r7, #14]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8008a12:	2211      	movs	r2, #17
 8008a14:	21cc      	movs	r1, #204	; 0xcc
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f003 fd0a 	bl	800c430 <VL53L0X_WrByte>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	461a      	mov	r2, r3
 8008a20:	7bbb      	ldrb	r3, [r7, #14]
 8008a22:	b25b      	sxtb	r3, r3
 8008a24:	4313      	orrs	r3, r2
 8008a26:	b25b      	sxtb	r3, r3
 8008a28:	73bb      	strb	r3, [r7, #14]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8008a2a:	2207      	movs	r2, #7
 8008a2c:	21ff      	movs	r1, #255	; 0xff
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f003 fcfe 	bl	800c430 <VL53L0X_WrByte>
 8008a34:	4603      	mov	r3, r0
 8008a36:	461a      	mov	r2, r3
 8008a38:	7bbb      	ldrb	r3, [r7, #14]
 8008a3a:	b25b      	sxtb	r3, r3
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	b25b      	sxtb	r3, r3
 8008a40:	73bb      	strb	r3, [r7, #14]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8008a42:	2200      	movs	r2, #0
 8008a44:	21be      	movs	r1, #190	; 0xbe
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f003 fcf2 	bl	800c430 <VL53L0X_WrByte>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	461a      	mov	r2, r3
 8008a50:	7bbb      	ldrb	r3, [r7, #14]
 8008a52:	b25b      	sxtb	r3, r3
 8008a54:	4313      	orrs	r3, r2
 8008a56:	b25b      	sxtb	r3, r3
 8008a58:	73bb      	strb	r3, [r7, #14]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8008a5a:	2206      	movs	r2, #6
 8008a5c:	21ff      	movs	r1, #255	; 0xff
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f003 fce6 	bl	800c430 <VL53L0X_WrByte>
 8008a64:	4603      	mov	r3, r0
 8008a66:	461a      	mov	r2, r3
 8008a68:	7bbb      	ldrb	r3, [r7, #14]
 8008a6a:	b25b      	sxtb	r3, r3
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	b25b      	sxtb	r3, r3
 8008a70:	73bb      	strb	r3, [r7, #14]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8008a72:	2209      	movs	r2, #9
 8008a74:	21cc      	movs	r1, #204	; 0xcc
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f003 fcda 	bl	800c430 <VL53L0X_WrByte>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	461a      	mov	r2, r3
 8008a80:	7bbb      	ldrb	r3, [r7, #14]
 8008a82:	b25b      	sxtb	r3, r3
 8008a84:	4313      	orrs	r3, r2
 8008a86:	b25b      	sxtb	r3, r3
 8008a88:	73bb      	strb	r3, [r7, #14]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	21ff      	movs	r1, #255	; 0xff
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f003 fcce 	bl	800c430 <VL53L0X_WrByte>
 8008a94:	4603      	mov	r3, r0
 8008a96:	461a      	mov	r2, r3
 8008a98:	7bbb      	ldrb	r3, [r7, #14]
 8008a9a:	b25b      	sxtb	r3, r3
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	b25b      	sxtb	r3, r3
 8008aa0:	73bb      	strb	r3, [r7, #14]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	21ff      	movs	r1, #255	; 0xff
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f003 fcc2 	bl	800c430 <VL53L0X_WrByte>
 8008aac:	4603      	mov	r3, r0
 8008aae:	461a      	mov	r2, r3
 8008ab0:	7bbb      	ldrb	r3, [r7, #14]
 8008ab2:	b25b      	sxtb	r3, r3
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	b25b      	sxtb	r3, r3
 8008ab8:	73bb      	strb	r3, [r7, #14]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008aba:	2200      	movs	r2, #0
 8008abc:	2100      	movs	r1, #0
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f003 fcb6 	bl	800c430 <VL53L0X_WrByte>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	7bbb      	ldrb	r3, [r7, #14]
 8008aca:	b25b      	sxtb	r3, r3
 8008acc:	4313      	orrs	r3, r2
 8008ace:	b25b      	sxtb	r3, r3
 8008ad0:	73bb      	strb	r3, [r7, #14]
 8008ad2:	e058      	b.n	8008b86 <VL53L0X_SetGpioConfig+0x276>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8008ad4:	7bbb      	ldrb	r3, [r7, #14]
 8008ad6:	b25b      	sxtb	r3, r3
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d121      	bne.n	8008b20 <VL53L0X_SetGpioConfig+0x210>
			switch (Functionality) {
 8008adc:	787b      	ldrb	r3, [r7, #1]
 8008ade:	2b04      	cmp	r3, #4
 8008ae0:	d81b      	bhi.n	8008b1a <VL53L0X_SetGpioConfig+0x20a>
 8008ae2:	a201      	add	r2, pc, #4	; (adr r2, 8008ae8 <VL53L0X_SetGpioConfig+0x1d8>)
 8008ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae8:	08008afd 	.word	0x08008afd
 8008aec:	08008b03 	.word	0x08008b03
 8008af0:	08008b09 	.word	0x08008b09
 8008af4:	08008b0f 	.word	0x08008b0f
 8008af8:	08008b15 	.word	0x08008b15
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8008afc:	2300      	movs	r3, #0
 8008afe:	73fb      	strb	r3, [r7, #15]
				break;
 8008b00:	e00f      	b.n	8008b22 <VL53L0X_SetGpioConfig+0x212>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8008b02:	2301      	movs	r3, #1
 8008b04:	73fb      	strb	r3, [r7, #15]
				break;
 8008b06:	e00c      	b.n	8008b22 <VL53L0X_SetGpioConfig+0x212>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8008b08:	2302      	movs	r3, #2
 8008b0a:	73fb      	strb	r3, [r7, #15]
				break;
 8008b0c:	e009      	b.n	8008b22 <VL53L0X_SetGpioConfig+0x212>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8008b0e:	2303      	movs	r3, #3
 8008b10:	73fb      	strb	r3, [r7, #15]
				break;
 8008b12:	e006      	b.n	8008b22 <VL53L0X_SetGpioConfig+0x212>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8008b14:	2304      	movs	r3, #4
 8008b16:	73fb      	strb	r3, [r7, #15]
				break;
 8008b18:	e003      	b.n	8008b22 <VL53L0X_SetGpioConfig+0x212>
			default:
				Status =
 8008b1a:	23f5      	movs	r3, #245	; 0xf5
 8008b1c:	73bb      	strb	r3, [r7, #14]
 8008b1e:	e000      	b.n	8008b22 <VL53L0X_SetGpioConfig+0x212>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8008b20:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8008b22:	7bbb      	ldrb	r3, [r7, #14]
 8008b24:	b25b      	sxtb	r3, r3
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d107      	bne.n	8008b3a <VL53L0X_SetGpioConfig+0x22a>
			Status = VL53L0X_WrByte(Dev,
 8008b2a:	7bfb      	ldrb	r3, [r7, #15]
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	210a      	movs	r1, #10
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f003 fc7d 	bl	800c430 <VL53L0X_WrByte>
 8008b36:	4603      	mov	r3, r0
 8008b38:	73bb      	strb	r3, [r7, #14]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8008b3a:	7bbb      	ldrb	r3, [r7, #14]
 8008b3c:	b25b      	sxtb	r3, r3
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d10f      	bne.n	8008b62 <VL53L0X_SetGpioConfig+0x252>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8008b42:	7e3b      	ldrb	r3, [r7, #24]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d102      	bne.n	8008b4e <VL53L0X_SetGpioConfig+0x23e>
				data = 0;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	73fb      	strb	r3, [r7, #15]
 8008b4c:	e001      	b.n	8008b52 <VL53L0X_SetGpioConfig+0x242>
			else
				data = (uint8_t)(1 << 4);
 8008b4e:	2310      	movs	r3, #16
 8008b50:	73fb      	strb	r3, [r7, #15]

			Status = VL53L0X_UpdateByte(Dev,
 8008b52:	7bfb      	ldrb	r3, [r7, #15]
 8008b54:	22ef      	movs	r2, #239	; 0xef
 8008b56:	2184      	movs	r1, #132	; 0x84
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f003 fcb7 	bl	800c4cc <VL53L0X_UpdateByte>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	73bb      	strb	r3, [r7, #14]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8008b62:	7bbb      	ldrb	r3, [r7, #14]
 8008b64:	b25b      	sxtb	r3, r3
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d103      	bne.n	8008b72 <VL53L0X_SetGpioConfig+0x262>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	787a      	ldrb	r2, [r7, #1]
 8008b6e:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8008b72:	7bbb      	ldrb	r3, [r7, #14]
 8008b74:	b25b      	sxtb	r3, r3
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d105      	bne.n	8008b86 <VL53L0X_SetGpioConfig+0x276>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008b7a:	2100      	movs	r1, #0
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 f83f 	bl	8008c00 <VL53L0X_ClearInterruptMask>
 8008b82:	4603      	mov	r3, r0
 8008b84:	73bb      	strb	r3, [r7, #14]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008b86:	7bbb      	ldrb	r3, [r7, #14]
 8008b88:	b25b      	sxtb	r3, r3
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop

08008b94 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b086      	sub	sp, #24
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	607a      	str	r2, [r7, #4]
 8008b9e:	603b      	str	r3, [r7, #0]
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW,
 8008ba8:	f107 0314 	add.w	r3, r7, #20
 8008bac:	461a      	mov	r2, r3
 8008bae:	210e      	movs	r1, #14
 8008bb0:	68f8      	ldr	r0, [r7, #12]
 8008bb2:	f003 fbc9 	bl	800c348 <VL53L0X_RdWord>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	75fb      	strb	r3, [r7, #23]
				&Threshold16);
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8008bba:	8abb      	ldrh	r3, [r7, #20]
 8008bbc:	045b      	lsls	r3, r3, #17
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	4b0e      	ldr	r3, [pc, #56]	; (8008bfc <VL53L0X_GetInterruptThresholds+0x68>)
 8008bc2:	4013      	ands	r3, r2
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8008bc8:	7dfb      	ldrb	r3, [r7, #23]
 8008bca:	b25b      	sxtb	r3, r3
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d10f      	bne.n	8008bf0 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8008bd0:	f107 0314 	add.w	r3, r7, #20
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	210c      	movs	r1, #12
 8008bd8:	68f8      	ldr	r0, [r7, #12]
 8008bda:	f003 fbb5 	bl	800c348 <VL53L0X_RdWord>
 8008bde:	4603      	mov	r3, r0
 8008be0:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8008be2:	8abb      	ldrh	r3, [r7, #20]
 8008be4:	045b      	lsls	r3, r3, #17
 8008be6:	461a      	mov	r2, r3
 8008be8:	4b04      	ldr	r3, [pc, #16]	; (8008bfc <VL53L0X_GetInterruptThresholds+0x68>)
 8008bea:	4013      	ands	r3, r2
		*pThresholdHigh =
 8008bec:	683a      	ldr	r2, [r7, #0]
 8008bee:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008bf0:	7dfb      	ldrb	r3, [r7, #23]
 8008bf2:	b25b      	sxtb	r3, r3
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3718      	adds	r7, #24
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	1ffe0000 	.word	0x1ffe0000

08008c00 <VL53L0X_ClearInterruptMask>:
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev,
					 uint32_t InterruptMask)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	73bb      	strb	r3, [r7, #14]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	73fb      	strb	r3, [r7, #15]
	do {
		Status = VL53L0X_WrByte(Dev,
 8008c12:	2201      	movs	r2, #1
 8008c14:	210b      	movs	r1, #11
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f003 fc0a 	bl	800c430 <VL53L0X_WrByte>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	73bb      	strb	r3, [r7, #14]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8008c20:	2200      	movs	r2, #0
 8008c22:	210b      	movs	r1, #11
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f003 fc03 	bl	800c430 <VL53L0X_WrByte>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	7bbb      	ldrb	r3, [r7, #14]
 8008c30:	b25b      	sxtb	r3, r3
 8008c32:	4313      	orrs	r3, r2
 8008c34:	b25b      	sxtb	r3, r3
 8008c36:	73bb      	strb	r3, [r7, #14]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8008c38:	f107 030d 	add.w	r3, r7, #13
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	2113      	movs	r1, #19
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f003 fafa 	bl	800c23a <VL53L0X_RdByte>
 8008c46:	4603      	mov	r3, r0
 8008c48:	461a      	mov	r2, r3
 8008c4a:	7bbb      	ldrb	r3, [r7, #14]
 8008c4c:	b25b      	sxtb	r3, r3
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	b25b      	sxtb	r3, r3
 8008c52:	73bb      	strb	r3, [r7, #14]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8008c54:	7bfb      	ldrb	r3, [r7, #15]
 8008c56:	3301      	adds	r3, #1
 8008c58:	73fb      	strb	r3, [r7, #15]
	} while (((Byte & 0x07) != 0x00)
 8008c5a:	7b7b      	ldrb	r3, [r7, #13]
 8008c5c:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d006      	beq.n	8008c72 <VL53L0X_ClearInterruptMask+0x72>
			&& (LoopCount < 3)
 8008c64:	7bfb      	ldrb	r3, [r7, #15]
 8008c66:	2b02      	cmp	r3, #2
 8008c68:	d803      	bhi.n	8008c72 <VL53L0X_ClearInterruptMask+0x72>
			&& (Status == VL53L0X_ERROR_NONE));
 8008c6a:	7bbb      	ldrb	r3, [r7, #14]
 8008c6c:	b25b      	sxtb	r3, r3
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d0cf      	beq.n	8008c12 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8008c72:	7bfb      	ldrb	r3, [r7, #15]
 8008c74:	2b02      	cmp	r3, #2
 8008c76:	d901      	bls.n	8008c7c <VL53L0X_ClearInterruptMask+0x7c>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8008c78:	23f4      	movs	r3, #244	; 0xf4
 8008c7a:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_END(Status);
	return Status;
 8008c7c:	7bbb      	ldrb	r3, [r7, #14]
 8008c7e:	b25b      	sxtb	r3, r3
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3710      	adds	r7, #16
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c92:	2300      	movs	r3, #0
 8008c94:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS,
 8008c96:	f107 030e 	add.w	r3, r7, #14
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	2113      	movs	r1, #19
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f003 facb 	bl	800c23a <VL53L0X_RdByte>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	73fb      	strb	r3, [r7, #15]
				&Byte);
	*pInterruptMaskStatus = Byte & 0x07;
 8008ca8:	7bbb      	ldrb	r3, [r7, #14]
 8008caa:	f003 0207 	and.w	r2, r3, #7
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8008cb2:	7bbb      	ldrb	r3, [r7, #14]
 8008cb4:	f003 0318 	and.w	r3, r3, #24
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d001      	beq.n	8008cc0 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8008cbc:	23fa      	movs	r3, #250	; 0xfa
 8008cbe:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8008cc0:	7bfb      	ldrb	r3, [r7, #15]
 8008cc2:	b25b      	sxtb	r3, r3
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3710      	adds	r7, #16
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b086      	sub	sp, #24
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	68b9      	ldr	r1, [r7, #8]
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f000 fa0e 	bl	8009102 <VL53L0X_perform_ref_spad_management>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8008cea:	7dfb      	ldrb	r3, [r7, #23]
 8008cec:	b25b      	sxtb	r3, r3
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3718      	adds	r7, #24
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b084      	sub	sp, #16
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
 8008cfe:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008d00:	2300      	movs	r3, #0
 8008d02:	72fb      	strb	r3, [r7, #11]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8008d04:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8008d08:	81fb      	strh	r3, [r7, #14]
	int16_t cOffsetRange = 4096;
 8008d0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d0e:	81bb      	strh	r3, [r7, #12]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8008d10:	f107 0308 	add.w	r3, r7, #8
 8008d14:	461a      	mov	r2, r3
 8008d16:	2128      	movs	r1, #40	; 0x28
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f003 fb15 	bl	800c348 <VL53L0X_RdWord>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	72fb      	strb	r3, [r7, #11]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8008d22:	7afb      	ldrb	r3, [r7, #11]
 8008d24:	b25b      	sxtb	r3, r3
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d11e      	bne.n	8008d68 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8008d2a:	893b      	ldrh	r3, [r7, #8]
 8008d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8008d34:	893b      	ldrh	r3, [r7, #8]
 8008d36:	461a      	mov	r2, r3
 8008d38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	dd0b      	ble.n	8008d58 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8008d40:	893a      	ldrh	r2, [r7, #8]
 8008d42:	89bb      	ldrh	r3, [r7, #12]
 8008d44:	1ad3      	subs	r3, r2, r3
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	b21b      	sxth	r3, r3
 8008d4a:	461a      	mov	r2, r3
					* 250;
 8008d4c:	23fa      	movs	r3, #250	; 0xfa
 8008d4e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	601a      	str	r2, [r3, #0]
 8008d56:	e007      	b.n	8008d68 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8008d58:	893b      	ldrh	r3, [r7, #8]
 8008d5a:	b21b      	sxth	r3, r3
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	23fa      	movs	r3, #250	; 0xfa
 8008d60:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8008d68:	7afb      	ldrb	r3, [r7, #11]
 8008d6a:	b25b      	sxtb	r3, r3
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3710      	adds	r7, #16
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b08b      	sub	sp, #44	; 0x2c
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
 8008d80:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8008d82:	2308      	movs	r3, #8
 8008d84:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8008d86:	2300      	movs	r3, #0
 8008d88:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d90:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	69bb      	ldr	r3, [r7, #24]
 8008d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d9a:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	69ba      	ldr	r2, [r7, #24]
 8008da0:	fbb3 f2f2 	udiv	r2, r3, r2
 8008da4:	69b9      	ldr	r1, [r7, #24]
 8008da6:	fb01 f202 	mul.w	r2, r1, r2
 8008daa:	1a9b      	subs	r3, r3, r2
 8008dac:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	627b      	str	r3, [r7, #36]	; 0x24
 8008db2:	e030      	b.n	8008e16 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8008db4:	2300      	movs	r3, #0
 8008db6:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbc:	4413      	add	r3, r2
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8008dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d11e      	bne.n	8008e08 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating
			 */
			dataByte >>= fineOffset;
 8008dca:	7ffa      	ldrb	r2, [r7, #31]
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	fa42 f303 	asr.w	r3, r2, r3
 8008dd2:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8008dd8:	e016      	b.n	8008e08 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8008dda:	7ffb      	ldrb	r3, [r7, #31]
 8008ddc:	f003 0301 	and.w	r3, r3, #1
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d00b      	beq.n	8008dfc <get_next_good_spad+0x88>
				success = 1;
 8008de4:	2301      	movs	r3, #1
 8008de6:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8008de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dea:	69ba      	ldr	r2, [r7, #24]
 8008dec:	fb02 f203 	mul.w	r2, r2, r3
 8008df0:	6a3b      	ldr	r3, [r7, #32]
 8008df2:	4413      	add	r3, r2
 8008df4:	461a      	mov	r2, r3
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	601a      	str	r2, [r3, #0]
				break;
 8008dfa:	e009      	b.n	8008e10 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8008dfc:	7ffb      	ldrb	r3, [r7, #31]
 8008dfe:	085b      	lsrs	r3, r3, #1
 8008e00:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8008e02:	6a3b      	ldr	r3, [r7, #32]
 8008e04:	3301      	adds	r3, #1
 8008e06:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8008e08:	6a3a      	ldr	r2, [r7, #32]
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d3e4      	bcc.n	8008dda <get_next_good_spad+0x66>
				coarseIndex++) {
 8008e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e12:	3301      	adds	r3, #1
 8008e14:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8008e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d202      	bcs.n	8008e24 <get_next_good_spad+0xb0>
 8008e1e:	7fbb      	ldrb	r3, [r7, #30]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d0c7      	beq.n	8008db4 <get_next_good_spad+0x40>
		}
	}
}
 8008e24:	bf00      	nop
 8008e26:	372c      	adds	r7, #44	; 0x2c
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b085      	sub	sp, #20
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	73fb      	strb	r3, [r7, #15]

	quadrant = spadIndex >> 6;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	099b      	lsrs	r3, r3, #6
 8008e40:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8008e42:	4a07      	ldr	r2, [pc, #28]	; (8008e60 <is_aperture+0x30>)
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d101      	bne.n	8008e52 <is_aperture+0x22>
		isAperture = 0;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8008e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3714      	adds	r7, #20
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr
 8008e60:	20000490 	.word	0x20000490

08008e64 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b089      	sub	sp, #36	; 0x24
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008e70:	2300      	movs	r3, #0
 8008e72:	74fb      	strb	r3, [r7, #19]
	uint32_t cSpadsPerByte = 8;
 8008e74:	2308      	movs	r3, #8
 8008e76:	61fb      	str	r3, [r7, #28]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e80:	61bb      	str	r3, [r7, #24]
	fineIndex = spadIndex % cSpadsPerByte;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	69fa      	ldr	r2, [r7, #28]
 8008e86:	fbb3 f2f2 	udiv	r2, r3, r2
 8008e8a:	69f9      	ldr	r1, [r7, #28]
 8008e8c:	fb01 f202 	mul.w	r2, r1, r2
 8008e90:	1a9b      	subs	r3, r3, r2
 8008e92:	617b      	str	r3, [r7, #20]
	if (coarseIndex >= size)
 8008e94:	69ba      	ldr	r2, [r7, #24]
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d302      	bcc.n	8008ea2 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008e9c:	23ce      	movs	r3, #206	; 0xce
 8008e9e:	74fb      	strb	r3, [r7, #19]
 8008ea0:	e010      	b.n	8008ec4 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8008ea2:	68fa      	ldr	r2, [r7, #12]
 8008ea4:	69bb      	ldr	r3, [r7, #24]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	b25a      	sxtb	r2, r3
 8008eac:	2101      	movs	r1, #1
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8008eb4:	b25b      	sxtb	r3, r3
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	b259      	sxtb	r1, r3
 8008eba:	68fa      	ldr	r2, [r7, #12]
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	b2ca      	uxtb	r2, r1
 8008ec2:	701a      	strb	r2, [r3, #0]

	return status;
 8008ec4:	7cfb      	ldrb	r3, [r7, #19]
 8008ec6:	b25b      	sxtb	r3, r3
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3724      	adds	r7, #36	; 0x24
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8008ede:	2306      	movs	r3, #6
 8008ee0:	683a      	ldr	r2, [r7, #0]
 8008ee2:	21b0      	movs	r1, #176	; 0xb0
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f003 f9d3 	bl	800c290 <VL53L0X_WriteMulti>
 8008eea:	4603      	mov	r3, r0
 8008eec:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8008eee:	7bfb      	ldrb	r3, [r7, #15]
 8008ef0:	b25b      	sxtb	r3, r3
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b084      	sub	sp, #16
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
 8008f02:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8008f04:	2306      	movs	r3, #6
 8008f06:	683a      	ldr	r2, [r7, #0]
 8008f08:	21b0      	movs	r1, #176	; 0xb0
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f003 f9f0 	bl	800c2f0 <VL53L0X_ReadMulti>
 8008f10:	4603      	mov	r3, r0
 8008f12:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
 8008f16:	b25b      	sxtb	r3, r3
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3710      	adds	r7, #16
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b08c      	sub	sp, #48	; 0x30
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	607a      	str	r2, [r7, #4]
 8008f2a:	603b      	str	r3, [r7, #0]
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008f30:	2300      	movs	r3, #0
 8008f32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8008f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f38:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8008f3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f3c:	627b      	str	r3, [r7, #36]	; 0x24
	for (index = 0; index < spadCount; index++) {
 8008f3e:	2300      	movs	r3, #0
 8008f40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f42:	e02b      	b.n	8008f9c <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8008f44:	f107 031c 	add.w	r3, r7, #28
 8008f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f7ff ff11 	bl	8008d74 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8008f52:	69fb      	ldr	r3, [r7, #28]
 8008f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f58:	d103      	bne.n	8008f62 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008f5a:	23ce      	movs	r3, #206	; 0xce
 8008f5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			break;
 8008f60:	e020      	b.n	8008fa4 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8008f62:	69fb      	ldr	r3, [r7, #28]
 8008f64:	461a      	mov	r2, r3
 8008f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f68:	4413      	add	r3, r2
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7ff ff60 	bl	8008e30 <is_aperture>
 8008f70:	4603      	mov	r3, r0
 8008f72:	461a      	mov	r2, r3
 8008f74:	7afb      	ldrb	r3, [r7, #11]
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d003      	beq.n	8008f82 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008f7a:	23ce      	movs	r3, #206	; 0xce
 8008f7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			break;
 8008f80:	e010      	b.n	8008fa4 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	627b      	str	r3, [r7, #36]	; 0x24
		enable_spad_bit(spadArray, size, currentSpad);
 8008f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008f8a:	6838      	ldr	r0, [r7, #0]
 8008f8c:	f7ff ff6a 	bl	8008e64 <enable_spad_bit>
		currentSpad++;
 8008f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f92:	3301      	adds	r3, #1
 8008f94:	627b      	str	r3, [r7, #36]	; 0x24
	for (index = 0; index < spadCount; index++) {
 8008f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f98:	3301      	adds	r3, #1
 8008f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d3cf      	bcc.n	8008f44 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8008fa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fa8:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8008faa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008fae:	b25b      	sxtb	r3, r3
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d106      	bne.n	8008fc2 <enable_ref_spads+0xa2>
		status = set_ref_spad_map(Dev, spadArray);
 8008fb4:	6839      	ldr	r1, [r7, #0]
 8008fb6:	68f8      	ldr	r0, [r7, #12]
 8008fb8:	f7ff ff8c 	bl	8008ed4 <set_ref_spad_map>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23


	if (status == VL53L0X_ERROR_NONE) {
 8008fc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008fc6:	b25b      	sxtb	r3, r3
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d121      	bne.n	8009010 <enable_ref_spads+0xf0>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8008fcc:	f107 0314 	add.w	r3, r7, #20
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	68f8      	ldr	r0, [r7, #12]
 8008fd4:	f7ff ff91 	bl	8008efa <get_ref_spad_map>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		i = 0;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8008fe2:	e011      	b.n	8009008 <enable_ref_spads+0xe8>
			if (spadArray[i] != checkSpadArray[i]) {
 8008fe4:	683a      	ldr	r2, [r7, #0]
 8008fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe8:	4413      	add	r3, r2
 8008fea:	781a      	ldrb	r2, [r3, #0]
 8008fec:	f107 0114 	add.w	r1, r7, #20
 8008ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff2:	440b      	add	r3, r1
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d003      	beq.n	8009002 <enable_ref_spads+0xe2>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008ffa:	23ce      	movs	r3, #206	; 0xce
 8008ffc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				break;
 8009000:	e006      	b.n	8009010 <enable_ref_spads+0xf0>
			}
			i++;
 8009002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009004:	3301      	adds	r3, #1
 8009006:	62bb      	str	r3, [r7, #40]	; 0x28
		while (i < size) {
 8009008:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800900a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800900c:	429a      	cmp	r2, r3
 800900e:	d3e9      	bcc.n	8008fe4 <enable_ref_spads+0xc4>
		}
	}
	return status;
 8009010:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009014:	b25b      	sxtb	r3, r3
}
 8009016:	4618      	mov	r0, r3
 8009018:	3730      	adds	r7, #48	; 0x30
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b08a      	sub	sp, #40	; 0x28
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
 8009026:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009028:	2300      	movs	r3, #0
 800902a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800902e:	2300      	movs	r3, #0
 8009030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800903a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800903e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009042:	b25b      	sxtb	r3, r3
 8009044:	2b00      	cmp	r3, #0
 8009046:	d107      	bne.n	8009058 <perform_ref_signal_measurement+0x3a>
		status = VL53L0X_WrByte(Dev,
 8009048:	22c0      	movs	r2, #192	; 0xc0
 800904a:	2101      	movs	r1, #1
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f003 f9ef 	bl	800c430 <VL53L0X_WrByte>
 8009052:	4603      	mov	r3, r0
 8009054:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8009058:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800905c:	b25b      	sxtb	r3, r3
 800905e:	2b00      	cmp	r3, #0
 8009060:	d108      	bne.n	8009074 <perform_ref_signal_measurement+0x56>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8009062:	f107 0308 	add.w	r3, r7, #8
 8009066:	4619      	mov	r1, r3
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f7ff fc21 	bl	80088b0 <VL53L0X_PerformSingleRangingMeasurement>
 800906e:	4603      	mov	r3, r0
 8009070:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8009074:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009078:	b25b      	sxtb	r3, r3
 800907a:	2b00      	cmp	r3, #0
 800907c:	d107      	bne.n	800908e <perform_ref_signal_measurement+0x70>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800907e:	2201      	movs	r2, #1
 8009080:	21ff      	movs	r1, #255	; 0xff
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f003 f9d4 	bl	800c430 <VL53L0X_WrByte>
 8009088:	4603      	mov	r3, r0
 800908a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	if (status == VL53L0X_ERROR_NONE)
 800908e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009092:	b25b      	sxtb	r3, r3
 8009094:	2b00      	cmp	r3, #0
 8009096:	d107      	bne.n	80090a8 <perform_ref_signal_measurement+0x8a>
		status = VL53L0X_RdWord(Dev,
 8009098:	683a      	ldr	r2, [r7, #0]
 800909a:	21b6      	movs	r1, #182	; 0xb6
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f003 f953 	bl	800c348 <VL53L0X_RdWord>
 80090a2:	4603      	mov	r3, r0
 80090a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 80090a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80090ac:	b25b      	sxtb	r3, r3
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d107      	bne.n	80090c2 <perform_ref_signal_measurement+0xa4>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80090b2:	2200      	movs	r2, #0
 80090b4:	21ff      	movs	r1, #255	; 0xff
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f003 f9ba 	bl	800c430 <VL53L0X_WrByte>
 80090bc:	4603      	mov	r3, r0
 80090be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	if (status == VL53L0X_ERROR_NONE) {
 80090c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80090c6:	b25b      	sxtb	r3, r3
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d113      	bne.n	80090f4 <perform_ref_signal_measurement+0xd6>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80090cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090d0:	461a      	mov	r2, r3
 80090d2:	2101      	movs	r1, #1
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f003 f9ab 	bl	800c430 <VL53L0X_WrByte>
 80090da:	4603      	mov	r3, r0
 80090dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 80090e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80090e4:	b25b      	sxtb	r3, r3
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d104      	bne.n	80090f4 <perform_ref_signal_measurement+0xd6>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80090f0:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	}

	return status;
 80090f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80090f8:	b25b      	sxtb	r3, r3
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3728      	adds	r7, #40	; 0x28
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8009102:	b590      	push	{r4, r7, lr}
 8009104:	b09d      	sub	sp, #116	; 0x74
 8009106:	af06      	add	r7, sp, #24
 8009108:	60f8      	str	r0, [r7, #12]
 800910a:	60b9      	str	r1, [r7, #8]
 800910c:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800910e:	2300      	movs	r3, #0
 8009110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8009114:	23b4      	movs	r3, #180	; 0xb4
 8009116:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	uint32_t minimumSpadCount = 3;
 800911a:	2303      	movs	r3, #3
 800911c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t maxSpadCount = 44;
 800911e:	232c      	movs	r3, #44	; 0x2c
 8009120:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t currentSpadIndex = 0;
 8009122:	2300      	movs	r3, #0
 8009124:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t lastSpadIndex = 0;
 8009126:	2300      	movs	r3, #0
 8009128:	61fb      	str	r3, [r7, #28]
	int32_t nextGoodSpad = 0;
 800912a:	2300      	movs	r3, #0
 800912c:	61bb      	str	r3, [r7, #24]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800912e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8009132:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8009134:	2300      	movs	r3, #0
 8009136:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t index = 0;
 8009138:	2300      	movs	r3, #0
 800913a:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t spadArraySize = 6;
 800913c:	2306      	movs	r3, #6
 800913e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t signalRateDiff = 0;
 8009140:	2300      	movs	r3, #0
 8009142:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t lastSignalRateDiff = 0;
 8009144:	2300      	movs	r3, #0
 8009146:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t complete = 0;
 8009148:	2300      	movs	r3, #0
 800914a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t VhvSettings = 0;
 800914e:	2300      	movs	r3, #0
 8009150:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8009152:	2300      	movs	r3, #0
 8009154:	753b      	strb	r3, [r7, #20]
	uint32_t refSpadCount_int = 0;
 8009156:	2300      	movs	r3, #0
 8009158:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t	 isApertureSpads_int = 0;
 800915a:	2300      	movs	r3, #0
 800915c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f8b3 3168 	ldrh.w	r3, [r3, #360]	; 0x168
 8009166:	867b      	strh	r3, [r7, #50]	; 0x32
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8009168:	2300      	movs	r3, #0
 800916a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800916c:	e009      	b.n	8009182 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800916e:	68fa      	ldr	r2, [r7, #12]
 8009170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009172:	4413      	add	r3, r2
 8009174:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009178:	2200      	movs	r2, #0
 800917a:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800917c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800917e:	3301      	adds	r3, #1
 8009180:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009182:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009186:	429a      	cmp	r2, r3
 8009188:	d3f1      	bcc.n	800916e <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800918a:	2201      	movs	r2, #1
 800918c:	21ff      	movs	r1, #255	; 0xff
 800918e:	68f8      	ldr	r0, [r7, #12]
 8009190:	f003 f94e 	bl	800c430 <VL53L0X_WrByte>
 8009194:	4603      	mov	r3, r0
 8009196:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Status == VL53L0X_ERROR_NONE)
 800919a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800919e:	b25b      	sxtb	r3, r3
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d107      	bne.n	80091b4 <VL53L0X_perform_ref_spad_management+0xb2>
		Status = VL53L0X_WrByte(Dev,
 80091a4:	2200      	movs	r2, #0
 80091a6:	214f      	movs	r1, #79	; 0x4f
 80091a8:	68f8      	ldr	r0, [r7, #12]
 80091aa:	f003 f941 	bl	800c430 <VL53L0X_WrByte>
 80091ae:	4603      	mov	r3, r0
 80091b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80091b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091b8:	b25b      	sxtb	r3, r3
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d107      	bne.n	80091ce <VL53L0X_perform_ref_spad_management+0xcc>
		Status = VL53L0X_WrByte(Dev,
 80091be:	222c      	movs	r2, #44	; 0x2c
 80091c0:	214e      	movs	r1, #78	; 0x4e
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	f003 f934 	bl	800c430 <VL53L0X_WrByte>
 80091c8:	4603      	mov	r3, r0
 80091ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80091ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091d2:	b25b      	sxtb	r3, r3
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d107      	bne.n	80091e8 <VL53L0X_perform_ref_spad_management+0xe6>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80091d8:	2200      	movs	r2, #0
 80091da:	21ff      	movs	r1, #255	; 0xff
 80091dc:	68f8      	ldr	r0, [r7, #12]
 80091de:	f003 f927 	bl	800c430 <VL53L0X_WrByte>
 80091e2:	4603      	mov	r3, r0
 80091e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Status == VL53L0X_ERROR_NONE)
 80091e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091ec:	b25b      	sxtb	r3, r3
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d109      	bne.n	8009206 <VL53L0X_perform_ref_spad_management+0x104>
		Status = VL53L0X_WrByte(Dev,
 80091f2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80091f6:	461a      	mov	r2, r3
 80091f8:	21b6      	movs	r1, #182	; 0xb6
 80091fa:	68f8      	ldr	r0, [r7, #12]
 80091fc:	f003 f918 	bl	800c430 <VL53L0X_WrByte>
 8009200:	4603      	mov	r3, r0
 8009202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8009206:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800920a:	b25b      	sxtb	r3, r3
 800920c:	2b00      	cmp	r3, #0
 800920e:	d107      	bne.n	8009220 <VL53L0X_perform_ref_spad_management+0x11e>
		Status = VL53L0X_WrByte(Dev,
 8009210:	2200      	movs	r2, #0
 8009212:	2180      	movs	r1, #128	; 0x80
 8009214:	68f8      	ldr	r0, [r7, #12]
 8009216:	f003 f90b 	bl	800c430 <VL53L0X_WrByte>
 800921a:	4603      	mov	r3, r0
 800921c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8009220:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009224:	b25b      	sxtb	r3, r3
 8009226:	2b00      	cmp	r3, #0
 8009228:	d10a      	bne.n	8009240 <VL53L0X_perform_ref_spad_management+0x13e>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800922a:	f107 0214 	add.w	r2, r7, #20
 800922e:	f107 0115 	add.w	r1, r7, #21
 8009232:	2300      	movs	r3, #0
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	f000 fbd3 	bl	80099e0 <VL53L0X_perform_ref_calibration>
 800923a:	4603      	mov	r3, r0
 800923c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8009240:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009244:	b25b      	sxtb	r3, r3
 8009246:	2b00      	cmp	r3, #0
 8009248:	d121      	bne.n	800928e <VL53L0X_perform_ref_spad_management+0x18c>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800924a:	2300      	movs	r3, #0
 800924c:	657b      	str	r3, [r7, #84]	; 0x54
		lastSpadIndex = currentSpadIndex;
 800924e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009250:	61fb      	str	r3, [r7, #28]
		needAptSpads = 0;
 8009252:	2300      	movs	r3, #0
 8009254:	653b      	str	r3, [r7, #80]	; 0x50
		Status = enable_ref_spads(Dev,
 8009256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009258:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f503 70ab 	add.w	r0, r3, #342	; 0x156
					Dev->Data.SpadData.RefSpadEnables,
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f503 74a8 	add.w	r4, r3, #336	; 0x150
		Status = enable_ref_spads(Dev,
 8009266:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800926a:	f107 021c 	add.w	r2, r7, #28
 800926e:	9204      	str	r2, [sp, #16]
 8009270:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009272:	9203      	str	r2, [sp, #12]
 8009274:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009276:	9202      	str	r2, [sp, #8]
 8009278:	9301      	str	r3, [sp, #4]
 800927a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800927c:	9300      	str	r3, [sp, #0]
 800927e:	4623      	mov	r3, r4
 8009280:	4602      	mov	r2, r0
 8009282:	68f8      	ldr	r0, [r7, #12]
 8009284:	f7ff fe4c 	bl	8008f20 <enable_ref_spads>
 8009288:	4603      	mov	r3, r0
 800928a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800928e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009292:	b25b      	sxtb	r3, r3
 8009294:	2b00      	cmp	r3, #0
 8009296:	d177      	bne.n	8009388 <VL53L0X_perform_ref_spad_management+0x286>
		currentSpadIndex = lastSpadIndex;
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	657b      	str	r3, [r7, #84]	; 0x54

		Status = perform_ref_signal_measurement(Dev,
 800929c:	f107 0316 	add.w	r3, r7, #22
 80092a0:	4619      	mov	r1, r3
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	f7ff febb 	bl	800901e <perform_ref_signal_measurement>
 80092a8:	4603      	mov	r3, r0
 80092aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 80092ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092b2:	b25b      	sxtb	r3, r3
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d163      	bne.n	8009380 <VL53L0X_perform_ref_spad_management+0x27e>
			(peakSignalRateRef > targetRefRate)) {
 80092b8:	8afb      	ldrh	r3, [r7, #22]
		if ((Status == VL53L0X_ERROR_NONE) &&
 80092ba:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80092bc:	429a      	cmp	r2, r3
 80092be:	d25f      	bcs.n	8009380 <VL53L0X_perform_ref_spad_management+0x27e>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs
			 */

			for (index = 0; index < spadArraySize; index++)
 80092c0:	2300      	movs	r3, #0
 80092c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092c4:	e009      	b.n	80092da <VL53L0X_perform_ref_spad_management+0x1d8>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80092c6:	68fa      	ldr	r2, [r7, #12]
 80092c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092ca:	4413      	add	r3, r2
 80092cc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80092d0:	2200      	movs	r2, #0
 80092d2:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 80092d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092d6:	3301      	adds	r3, #1
 80092d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80092dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092de:	429a      	cmp	r2, r3
 80092e0:	d3f1      	bcc.n	80092c6 <VL53L0X_perform_ref_spad_management+0x1c4>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 80092e2:	e002      	b.n	80092ea <VL53L0X_perform_ref_spad_management+0x1e8>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 80092e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092e6:	3301      	adds	r3, #1
 80092e8:	657b      	str	r3, [r7, #84]	; 0x54
			while ((is_aperture(startSelect + currentSpadIndex)
 80092ea:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80092ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092f0:	4413      	add	r3, r2
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7ff fd9c 	bl	8008e30 <is_aperture>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d103      	bne.n	8009306 <VL53L0X_perform_ref_spad_management+0x204>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80092fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009302:	429a      	cmp	r2, r3
 8009304:	d3ee      	bcc.n	80092e4 <VL53L0X_perform_ref_spad_management+0x1e2>
			}

			needAptSpads = 1;
 8009306:	2301      	movs	r3, #1
 8009308:	653b      	str	r3, [r7, #80]	; 0x50

			Status = enable_ref_spads(Dev,
 800930a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800930c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f503 70ab 	add.w	r0, r3, #342	; 0x156
					Dev->Data.SpadData.RefSpadEnables,
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f503 74a8 	add.w	r4, r3, #336	; 0x150
			Status = enable_ref_spads(Dev,
 800931a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800931e:	f107 021c 	add.w	r2, r7, #28
 8009322:	9204      	str	r2, [sp, #16]
 8009324:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009326:	9203      	str	r2, [sp, #12]
 8009328:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800932a:	9202      	str	r2, [sp, #8]
 800932c:	9301      	str	r3, [sp, #4]
 800932e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009330:	9300      	str	r3, [sp, #0]
 8009332:	4623      	mov	r3, r4
 8009334:	4602      	mov	r2, r0
 8009336:	68f8      	ldr	r0, [r7, #12]
 8009338:	f7ff fdf2 	bl	8008f20 <enable_ref_spads>
 800933c:	4603      	mov	r3, r0
 800933e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8009342:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009346:	b25b      	sxtb	r3, r3
 8009348:	2b00      	cmp	r3, #0
 800934a:	d11c      	bne.n	8009386 <VL53L0X_perform_ref_spad_management+0x284>
				currentSpadIndex = lastSpadIndex;
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	657b      	str	r3, [r7, #84]	; 0x54
				Status = perform_ref_signal_measurement(Dev,
 8009350:	f107 0316 	add.w	r3, r7, #22
 8009354:	4619      	mov	r1, r3
 8009356:	68f8      	ldr	r0, [r7, #12]
 8009358:	f7ff fe61 	bl	800901e <perform_ref_signal_measurement>
 800935c:	4603      	mov	r3, r0
 800935e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8009362:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009366:	b25b      	sxtb	r3, r3
 8009368:	2b00      	cmp	r3, #0
 800936a:	d10c      	bne.n	8009386 <VL53L0X_perform_ref_spad_management+0x284>
					(peakSignalRateRef > targetRefRate)) {
 800936c:	8afb      	ldrh	r3, [r7, #22]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800936e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8009370:	429a      	cmp	r2, r3
 8009372:	d208      	bcs.n	8009386 <VL53L0X_perform_ref_spad_management+0x284>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8009374:	2301      	movs	r3, #1
 8009376:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					refSpadCount_int = minimumSpadCount;
 800937a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937c:	643b      	str	r3, [r7, #64]	; 0x40
			if (Status == VL53L0X_ERROR_NONE) {
 800937e:	e002      	b.n	8009386 <VL53L0X_perform_ref_spad_management+0x284>
				}
			}
		} else {
			needAptSpads = 0;
 8009380:	2300      	movs	r3, #0
 8009382:	653b      	str	r3, [r7, #80]	; 0x50
 8009384:	e000      	b.n	8009388 <VL53L0X_perform_ref_spad_management+0x286>
			if (Status == VL53L0X_ERROR_NONE) {
 8009386:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8009388:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800938c:	b25b      	sxtb	r3, r3
 800938e:	2b00      	cmp	r3, #0
 8009390:	f040 80b2 	bne.w	80094f8 <VL53L0X_perform_ref_spad_management+0x3f6>
		(peakSignalRateRef < targetRefRate)) {
 8009394:	8afb      	ldrh	r3, [r7, #22]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8009396:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8009398:	429a      	cmp	r2, r3
 800939a:	f240 80ad 	bls.w	80094f8 <VL53L0X_perform_ref_spad_management+0x3f6>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800939e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		refSpadCount_int	= minimumSpadCount;
 80093a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a6:	643b      	str	r3, [r7, #64]	; 0x40

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f503 71a8 	add.w	r1, r3, #336	; 0x150
 80093ae:	f107 0320 	add.w	r3, r7, #32
 80093b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093b4:	4618      	mov	r0, r3
 80093b6:	f006 fd19 	bl	800fdec <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 80093ba:	8afb      	ldrh	r3, [r7, #22]
 80093bc:	461a      	mov	r2, r3
 80093be:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80093c0:	1ad3      	subs	r3, r2, r3
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	bfb8      	it	lt
 80093c6:	425b      	neglt	r3, r3
 80093c8:	64bb      	str	r3, [r7, #72]	; 0x48
			targetRefRate);
		complete = 0;
 80093ca:	2300      	movs	r3, #0
 80093cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

		while (!complete) {
 80093d0:	e089      	b.n	80094e6 <VL53L0X_perform_ref_spad_management+0x3e4>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f503 70ab 	add.w	r0, r3, #342	; 0x156
			get_next_good_spad(
 80093d8:	f107 0318 	add.w	r3, r7, #24
 80093dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80093de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80093e0:	f7ff fcc8 	bl	8008d74 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 80093e4:	69bb      	ldr	r3, [r7, #24]
 80093e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ea:	d103      	bne.n	80093f4 <VL53L0X_perform_ref_spad_management+0x2f2>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 80093ec:	23ce      	movs	r3, #206	; 0xce
 80093ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 80093f2:	e081      	b.n	80094f8 <VL53L0X_perform_ref_spad_management+0x3f6>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80093f4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80093f8:	69ba      	ldr	r2, [r7, #24]
 80093fa:	4413      	add	r3, r2
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7ff fd17 	bl	8008e30 <is_aperture>
 8009402:	4603      	mov	r3, r0
 8009404:	461a      	mov	r2, r3
 8009406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009408:	4293      	cmp	r3, r2
 800940a:	d003      	beq.n	8009414 <VL53L0X_perform_ref_spad_management+0x312>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800940c:	2301      	movs	r3, #1
 800940e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8009412:	e071      	b.n	80094f8 <VL53L0X_perform_ref_spad_management+0x3f6>
			}

			(refSpadCount_int)++;
 8009414:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009416:	3301      	adds	r3, #1
 8009418:	643b      	str	r3, [r7, #64]	; 0x40

			currentSpadIndex = nextGoodSpad;
 800941a:	69bb      	ldr	r3, [r7, #24]
 800941c:	657b      	str	r3, [r7, #84]	; 0x54
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f503 73a8 	add.w	r3, r3, #336	; 0x150
			Status = enable_spad_bit(
 8009424:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009426:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009428:	4618      	mov	r0, r3
 800942a:	f7ff fd1b 	bl	8008e64 <enable_spad_bit>
 800942e:	4603      	mov	r3, r0
 8009430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8009434:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009438:	b25b      	sxtb	r3, r3
 800943a:	2b00      	cmp	r3, #0
 800943c:	d10c      	bne.n	8009458 <VL53L0X_perform_ref_spad_management+0x356>
				currentSpadIndex++;
 800943e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009440:	3301      	adds	r3, #1
 8009442:	657b      	str	r3, [r7, #84]	; 0x54
				/* Proceed to apply the additional spad and
				 * perform measurement.
				 */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f503 73a8 	add.w	r3, r3, #336	; 0x150
				Status = set_ref_spad_map(Dev,
 800944a:	4619      	mov	r1, r3
 800944c:	68f8      	ldr	r0, [r7, #12]
 800944e:	f7ff fd41 	bl	8008ed4 <set_ref_spad_map>
 8009452:	4603      	mov	r3, r0
 8009454:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}

			if (Status != VL53L0X_ERROR_NONE)
 8009458:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800945c:	b25b      	sxtb	r3, r3
 800945e:	2b00      	cmp	r3, #0
 8009460:	d147      	bne.n	80094f2 <VL53L0X_perform_ref_spad_management+0x3f0>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8009462:	f107 0316 	add.w	r3, r7, #22
 8009466:	4619      	mov	r1, r3
 8009468:	68f8      	ldr	r0, [r7, #12]
 800946a:	f7ff fdd8 	bl	800901e <perform_ref_signal_measurement>
 800946e:	4603      	mov	r3, r0
 8009470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8009474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009478:	b25b      	sxtb	r3, r3
 800947a:	2b00      	cmp	r3, #0
 800947c:	d13b      	bne.n	80094f6 <VL53L0X_perform_ref_spad_management+0x3f4>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800947e:	8afb      	ldrh	r3, [r7, #22]
 8009480:	461a      	mov	r2, r3
 8009482:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009484:	1ad3      	subs	r3, r2, r3
 8009486:	2b00      	cmp	r3, #0
 8009488:	bfb8      	it	lt
 800948a:	425b      	neglt	r3, r3
 800948c:	62bb      	str	r3, [r7, #40]	; 0x28

			if (peakSignalRateRef > targetRefRate) {
 800948e:	8afb      	ldrh	r3, [r7, #22]
 8009490:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8009492:	429a      	cmp	r2, r3
 8009494:	d21c      	bcs.n	80094d0 <VL53L0X_perform_ref_spad_management+0x3ce>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8009496:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800949a:	429a      	cmp	r2, r3
 800949c:	d914      	bls.n	80094c8 <VL53L0X_perform_ref_spad_management+0x3c6>
					/* Previous spad map produced a closer
					 * measurement, so choose this.
					 */
					Status = set_ref_spad_map(Dev,
 800949e:	f107 0320 	add.w	r3, r7, #32
 80094a2:	4619      	mov	r1, r3
 80094a4:	68f8      	ldr	r0, [r7, #12]
 80094a6:	f7ff fd15 	bl	8008ed4 <set_ref_spad_map>
 80094aa:	4603      	mov	r3, r0
 80094ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
					memcpy(
 80094b6:	f107 0120 	add.w	r1, r7, #32
 80094ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094bc:	4618      	mov	r0, r3
 80094be:	f006 fc95 	bl	800fdec <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 80094c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094c4:	3b01      	subs	r3, #1
 80094c6:	643b      	str	r3, [r7, #64]	; 0x40
				}
				complete = 1;
 80094c8:	2301      	movs	r3, #1
 80094ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80094ce:	e00a      	b.n	80094e6 <VL53L0X_perform_ref_spad_management+0x3e4>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 80094d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d2:	64bb      	str	r3, [r7, #72]	; 0x48
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f503 71a8 	add.w	r1, r3, #336	; 0x150
				memcpy(lastSpadArray,
 80094da:	f107 0320 	add.w	r3, r7, #32
 80094de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094e0:	4618      	mov	r0, r3
 80094e2:	f006 fc83 	bl	800fdec <memcpy>
		while (!complete) {
 80094e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	f43f af71 	beq.w	80093d2 <VL53L0X_perform_ref_spad_management+0x2d0>
 80094f0:	e002      	b.n	80094f8 <VL53L0X_perform_ref_spad_management+0x3f6>
				break;
 80094f2:	bf00      	nop
 80094f4:	e000      	b.n	80094f8 <VL53L0X_perform_ref_spad_management+0x3f6>
				break;
 80094f6:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80094f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094fc:	b25b      	sxtb	r3, r3
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d115      	bne.n	800952e <VL53L0X_perform_ref_spad_management+0x42c>
		*refSpadCount = refSpadCount_int;
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009506:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800950e:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	b2da      	uxtb	r2, r3
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	781a      	ldrb	r2, [r3, #0]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800952e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009532:	b25b      	sxtb	r3, r3
}
 8009534:	4618      	mov	r0, r3
 8009536:	375c      	adds	r7, #92	; 0x5c
 8009538:	46bd      	mov	sp, r7
 800953a:	bd90      	pop	{r4, r7, pc}

0800953c <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800953c:	b590      	push	{r4, r7, lr}
 800953e:	b093      	sub	sp, #76	; 0x4c
 8009540:	af06      	add	r7, sp, #24
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	4613      	mov	r3, r2
 8009548:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800954a:	2300      	movs	r3, #0
 800954c:	76fb      	strb	r3, [r7, #27]
	uint32_t currentSpadIndex = 0;
 800954e:	2300      	movs	r3, #0
 8009550:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t startSelect = 0xB4;
 8009552:	23b4      	movs	r3, #180	; 0xb4
 8009554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t spadArraySize = 6;
 8009558:	2306      	movs	r3, #6
 800955a:	623b      	str	r3, [r7, #32]
	uint32_t maxSpadCount = 44;
 800955c:	232c      	movs	r3, #44	; 0x2c
 800955e:	61fb      	str	r3, [r7, #28]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009560:	2201      	movs	r2, #1
 8009562:	21ff      	movs	r1, #255	; 0xff
 8009564:	68f8      	ldr	r0, [r7, #12]
 8009566:	f002 ff63 	bl	800c430 <VL53L0X_WrByte>
 800956a:	4603      	mov	r3, r0
 800956c:	76fb      	strb	r3, [r7, #27]

	if (Status == VL53L0X_ERROR_NONE)
 800956e:	7efb      	ldrb	r3, [r7, #27]
 8009570:	b25b      	sxtb	r3, r3
 8009572:	2b00      	cmp	r3, #0
 8009574:	d106      	bne.n	8009584 <VL53L0X_set_reference_spads+0x48>
		Status = VL53L0X_WrByte(Dev,
 8009576:	2200      	movs	r2, #0
 8009578:	214f      	movs	r1, #79	; 0x4f
 800957a:	68f8      	ldr	r0, [r7, #12]
 800957c:	f002 ff58 	bl	800c430 <VL53L0X_WrByte>
 8009580:	4603      	mov	r3, r0
 8009582:	76fb      	strb	r3, [r7, #27]
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8009584:	7efb      	ldrb	r3, [r7, #27]
 8009586:	b25b      	sxtb	r3, r3
 8009588:	2b00      	cmp	r3, #0
 800958a:	d106      	bne.n	800959a <VL53L0X_set_reference_spads+0x5e>
		Status = VL53L0X_WrByte(Dev,
 800958c:	222c      	movs	r2, #44	; 0x2c
 800958e:	214e      	movs	r1, #78	; 0x4e
 8009590:	68f8      	ldr	r0, [r7, #12]
 8009592:	f002 ff4d 	bl	800c430 <VL53L0X_WrByte>
 8009596:	4603      	mov	r3, r0
 8009598:	76fb      	strb	r3, [r7, #27]
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800959a:	7efb      	ldrb	r3, [r7, #27]
 800959c:	b25b      	sxtb	r3, r3
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d106      	bne.n	80095b0 <VL53L0X_set_reference_spads+0x74>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80095a2:	2200      	movs	r2, #0
 80095a4:	21ff      	movs	r1, #255	; 0xff
 80095a6:	68f8      	ldr	r0, [r7, #12]
 80095a8:	f002 ff42 	bl	800c430 <VL53L0X_WrByte>
 80095ac:	4603      	mov	r3, r0
 80095ae:	76fb      	strb	r3, [r7, #27]

	if (Status == VL53L0X_ERROR_NONE)
 80095b0:	7efb      	ldrb	r3, [r7, #27]
 80095b2:	b25b      	sxtb	r3, r3
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d108      	bne.n	80095ca <VL53L0X_set_reference_spads+0x8e>
		Status = VL53L0X_WrByte(Dev,
 80095b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095bc:	461a      	mov	r2, r3
 80095be:	21b6      	movs	r1, #182	; 0xb6
 80095c0:	68f8      	ldr	r0, [r7, #12]
 80095c2:	f002 ff35 	bl	800c430 <VL53L0X_WrByte>
 80095c6:	4603      	mov	r3, r0
 80095c8:	76fb      	strb	r3, [r7, #27]
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 80095ca:	2300      	movs	r3, #0
 80095cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80095ce:	e009      	b.n	80095e4 <VL53L0X_set_reference_spads+0xa8>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80095d0:	68fa      	ldr	r2, [r7, #12]
 80095d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d4:	4413      	add	r3, r2
 80095d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80095da:	2200      	movs	r2, #0
 80095dc:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80095de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e0:	3301      	adds	r3, #1
 80095e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80095e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095e6:	6a3b      	ldr	r3, [r7, #32]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d3f1      	bcc.n	80095d0 <VL53L0X_set_reference_spads+0x94>

	if (isApertureSpads) {
 80095ec:	79fb      	ldrb	r3, [r7, #7]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d011      	beq.n	8009616 <VL53L0X_set_reference_spads+0xda>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80095f2:	e002      	b.n	80095fa <VL53L0X_set_reference_spads+0xbe>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 80095f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095f6:	3301      	adds	r3, #1
 80095f8:	62fb      	str	r3, [r7, #44]	; 0x2c
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80095fa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80095fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009600:	4413      	add	r3, r2
 8009602:	4618      	mov	r0, r3
 8009604:	f7ff fc14 	bl	8008e30 <is_aperture>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d103      	bne.n	8009616 <VL53L0X_set_reference_spads+0xda>
 800960e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009610:	69fb      	ldr	r3, [r7, #28]
 8009612:	429a      	cmp	r2, r3
 8009614:	d3ee      	bcc.n	80095f4 <VL53L0X_set_reference_spads+0xb8>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f503 70ab 	add.w	r0, r3, #342	; 0x156
				Dev->Data.SpadData.RefSpadEnables,
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f503 74a8 	add.w	r4, r3, #336	; 0x150
	Status = enable_ref_spads(Dev,
 8009622:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009626:	79f9      	ldrb	r1, [r7, #7]
 8009628:	f107 0214 	add.w	r2, r7, #20
 800962c:	9204      	str	r2, [sp, #16]
 800962e:	68ba      	ldr	r2, [r7, #8]
 8009630:	9203      	str	r2, [sp, #12]
 8009632:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009634:	9202      	str	r2, [sp, #8]
 8009636:	9301      	str	r3, [sp, #4]
 8009638:	6a3b      	ldr	r3, [r7, #32]
 800963a:	9300      	str	r3, [sp, #0]
 800963c:	4623      	mov	r3, r4
 800963e:	4602      	mov	r2, r0
 8009640:	68f8      	ldr	r0, [r7, #12]
 8009642:	f7ff fc6d 	bl	8008f20 <enable_ref_spads>
 8009646:	4603      	mov	r3, r0
 8009648:	76fb      	strb	r3, [r7, #27]
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800964a:	7efb      	ldrb	r3, [r7, #27]
 800964c:	b25b      	sxtb	r3, r3
 800964e:	2b00      	cmp	r3, #0
 8009650:	d10c      	bne.n	800966c <VL53L0X_set_reference_spads+0x130>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2201      	movs	r2, #1
 8009656:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	b2da      	uxtb	r2, r3
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	79fa      	ldrb	r2, [r7, #7]
 8009668:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800966c:	7efb      	ldrb	r3, [r7, #27]
 800966e:	b25b      	sxtb	r3, r3
}
 8009670:	4618      	mov	r0, r3
 8009672:	3734      	adds	r7, #52	; 0x34
 8009674:	46bd      	mov	sp, r7
 8009676:	bd90      	pop	{r4, r7, pc}

08009678 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	460b      	mov	r3, r1
 8009682:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009684:	2300      	movs	r3, #0
 8009686:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009688:	7bfb      	ldrb	r3, [r7, #15]
 800968a:	b25b      	sxtb	r3, r3
 800968c:	2b00      	cmp	r3, #0
 800968e:	d10a      	bne.n	80096a6 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8009690:	78fb      	ldrb	r3, [r7, #3]
 8009692:	f043 0301 	orr.w	r3, r3, #1
 8009696:	b2db      	uxtb	r3, r3
 8009698:	461a      	mov	r2, r3
 800969a:	2100      	movs	r1, #0
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f002 fec7 	bl	800c430 <VL53L0X_WrByte>
 80096a2:	4603      	mov	r3, r0
 80096a4:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 80096a6:	7bfb      	ldrb	r3, [r7, #15]
 80096a8:	b25b      	sxtb	r3, r3
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d104      	bne.n	80096b8 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 f9d3 	bl	8009a5a <VL53L0X_measurement_poll_for_completion>
 80096b4:	4603      	mov	r3, r0
 80096b6:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80096b8:	7bfb      	ldrb	r3, [r7, #15]
 80096ba:	b25b      	sxtb	r3, r3
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d105      	bne.n	80096cc <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80096c0:	2100      	movs	r1, #0
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f7ff fa9c 	bl	8008c00 <VL53L0X_ClearInterruptMask>
 80096c8:	4603      	mov	r3, r0
 80096ca:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80096cc:	7bfb      	ldrb	r3, [r7, #15]
 80096ce:	b25b      	sxtb	r3, r3
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d106      	bne.n	80096e2 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80096d4:	2200      	movs	r2, #0
 80096d6:	2100      	movs	r1, #0
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f002 fea9 	bl	800c430 <VL53L0X_WrByte>
 80096de:	4603      	mov	r3, r0
 80096e0:	73fb      	strb	r3, [r7, #15]

	return Status;
 80096e2:	7bfb      	ldrb	r3, [r7, #15]
 80096e4:	b25b      	sxtb	r3, r3
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3710      	adds	r7, #16
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <VL53L0X_ref_calibration_io>:
VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev,
	uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b084      	sub	sp, #16
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
 80096f6:	4608      	mov	r0, r1
 80096f8:	4611      	mov	r1, r2
 80096fa:	461a      	mov	r2, r3
 80096fc:	4603      	mov	r3, r0
 80096fe:	70fb      	strb	r3, [r7, #3]
 8009700:	460b      	mov	r3, r1
 8009702:	70bb      	strb	r3, [r7, #2]
 8009704:	4613      	mov	r3, r2
 8009706:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009708:	2300      	movs	r3, #0
 800970a:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800970c:	2300      	movs	r3, #0
 800970e:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009710:	2201      	movs	r2, #1
 8009712:	21ff      	movs	r1, #255	; 0xff
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f002 fe8b 	bl	800c430 <VL53L0X_WrByte>
 800971a:	4603      	mov	r3, r0
 800971c:	461a      	mov	r2, r3
 800971e:	7bfb      	ldrb	r3, [r7, #15]
 8009720:	b25b      	sxtb	r3, r3
 8009722:	4313      	orrs	r3, r2
 8009724:	b25b      	sxtb	r3, r3
 8009726:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009728:	2200      	movs	r2, #0
 800972a:	2100      	movs	r1, #0
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f002 fe7f 	bl	800c430 <VL53L0X_WrByte>
 8009732:	4603      	mov	r3, r0
 8009734:	461a      	mov	r2, r3
 8009736:	7bfb      	ldrb	r3, [r7, #15]
 8009738:	b25b      	sxtb	r3, r3
 800973a:	4313      	orrs	r3, r2
 800973c:	b25b      	sxtb	r3, r3
 800973e:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009740:	2200      	movs	r2, #0
 8009742:	21ff      	movs	r1, #255	; 0xff
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f002 fe73 	bl	800c430 <VL53L0X_WrByte>
 800974a:	4603      	mov	r3, r0
 800974c:	461a      	mov	r2, r3
 800974e:	7bfb      	ldrb	r3, [r7, #15]
 8009750:	b25b      	sxtb	r3, r3
 8009752:	4313      	orrs	r3, r2
 8009754:	b25b      	sxtb	r3, r3
 8009756:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8009758:	78fb      	ldrb	r3, [r7, #3]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d022      	beq.n	80097a4 <VL53L0X_ref_calibration_io+0xb6>
		if (vhv_enable)
 800975e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d00b      	beq.n	800977e <VL53L0X_ref_calibration_io+0x90>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8009766:	69ba      	ldr	r2, [r7, #24]
 8009768:	21cb      	movs	r1, #203	; 0xcb
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f002 fd65 	bl	800c23a <VL53L0X_RdByte>
 8009770:	4603      	mov	r3, r0
 8009772:	461a      	mov	r2, r3
 8009774:	7bfb      	ldrb	r3, [r7, #15]
 8009776:	b25b      	sxtb	r3, r3
 8009778:	4313      	orrs	r3, r2
 800977a:	b25b      	sxtb	r3, r3
 800977c:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800977e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009782:	2b00      	cmp	r3, #0
 8009784:	d030      	beq.n	80097e8 <VL53L0X_ref_calibration_io+0xfa>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8009786:	f107 030e 	add.w	r3, r7, #14
 800978a:	461a      	mov	r2, r3
 800978c:	21ee      	movs	r1, #238	; 0xee
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f002 fd53 	bl	800c23a <VL53L0X_RdByte>
 8009794:	4603      	mov	r3, r0
 8009796:	461a      	mov	r2, r3
 8009798:	7bfb      	ldrb	r3, [r7, #15]
 800979a:	b25b      	sxtb	r3, r3
 800979c:	4313      	orrs	r3, r2
 800979e:	b25b      	sxtb	r3, r3
 80097a0:	73fb      	strb	r3, [r7, #15]
 80097a2:	e021      	b.n	80097e8 <VL53L0X_ref_calibration_io+0xfa>
	} else {
		if (vhv_enable)
 80097a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d00c      	beq.n	80097c6 <VL53L0X_ref_calibration_io+0xd8>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 80097ac:	78bb      	ldrb	r3, [r7, #2]
 80097ae:	461a      	mov	r2, r3
 80097b0:	21cb      	movs	r1, #203	; 0xcb
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f002 fe3c 	bl	800c430 <VL53L0X_WrByte>
 80097b8:	4603      	mov	r3, r0
 80097ba:	461a      	mov	r2, r3
 80097bc:	7bfb      	ldrb	r3, [r7, #15]
 80097be:	b25b      	sxtb	r3, r3
 80097c0:	4313      	orrs	r3, r2
 80097c2:	b25b      	sxtb	r3, r3
 80097c4:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80097c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00c      	beq.n	80097e8 <VL53L0X_ref_calibration_io+0xfa>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 80097ce:	787b      	ldrb	r3, [r7, #1]
 80097d0:	2280      	movs	r2, #128	; 0x80
 80097d2:	21ee      	movs	r1, #238	; 0xee
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f002 fe79 	bl	800c4cc <VL53L0X_UpdateByte>
 80097da:	4603      	mov	r3, r0
 80097dc:	461a      	mov	r2, r3
 80097de:	7bfb      	ldrb	r3, [r7, #15]
 80097e0:	b25b      	sxtb	r3, r3
 80097e2:	4313      	orrs	r3, r2
 80097e4:	b25b      	sxtb	r3, r3
 80097e6:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80097e8:	2201      	movs	r2, #1
 80097ea:	21ff      	movs	r1, #255	; 0xff
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f002 fe1f 	bl	800c430 <VL53L0X_WrByte>
 80097f2:	4603      	mov	r3, r0
 80097f4:	461a      	mov	r2, r3
 80097f6:	7bfb      	ldrb	r3, [r7, #15]
 80097f8:	b25b      	sxtb	r3, r3
 80097fa:	4313      	orrs	r3, r2
 80097fc:	b25b      	sxtb	r3, r3
 80097fe:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009800:	2201      	movs	r2, #1
 8009802:	2100      	movs	r1, #0
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f002 fe13 	bl	800c430 <VL53L0X_WrByte>
 800980a:	4603      	mov	r3, r0
 800980c:	461a      	mov	r2, r3
 800980e:	7bfb      	ldrb	r3, [r7, #15]
 8009810:	b25b      	sxtb	r3, r3
 8009812:	4313      	orrs	r3, r2
 8009814:	b25b      	sxtb	r3, r3
 8009816:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009818:	2200      	movs	r2, #0
 800981a:	21ff      	movs	r1, #255	; 0xff
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f002 fe07 	bl	800c430 <VL53L0X_WrByte>
 8009822:	4603      	mov	r3, r0
 8009824:	461a      	mov	r2, r3
 8009826:	7bfb      	ldrb	r3, [r7, #15]
 8009828:	b25b      	sxtb	r3, r3
 800982a:	4313      	orrs	r3, r2
 800982c:	b25b      	sxtb	r3, r3
 800982e:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8009830:	7bbb      	ldrb	r3, [r7, #14]
 8009832:	f023 0310 	bic.w	r3, r3, #16
 8009836:	b2da      	uxtb	r2, r3
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	701a      	strb	r2, [r3, #0]

	return Status;
 800983c:	7bfb      	ldrb	r3, [r7, #15]
 800983e:	b25b      	sxtb	r3, r3
}
 8009840:	4618      	mov	r0, r3
 8009842:	3710      	adds	r7, #16
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b08a      	sub	sp, #40	; 0x28
 800984c:	af04      	add	r7, sp, #16
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	60b9      	str	r1, [r7, #8]
 8009852:	4611      	mov	r1, r2
 8009854:	461a      	mov	r2, r3
 8009856:	460b      	mov	r3, r1
 8009858:	71fb      	strb	r3, [r7, #7]
 800985a:	4613      	mov	r3, r2
 800985c:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800985e:	2300      	movs	r3, #0
 8009860:	753b      	strb	r3, [r7, #20]
	uint8_t SequenceConfig = 0;
 8009862:	2300      	movs	r3, #0
 8009864:	75fb      	strb	r3, [r7, #23]
	uint8_t VhvSettings = 0;
 8009866:	2300      	movs	r3, #0
 8009868:	75bb      	strb	r3, [r7, #22]
	uint8_t PhaseCal = 0;
 800986a:	2300      	movs	r3, #0
 800986c:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCalInt = 0;
 800986e:	2300      	movs	r3, #0
 8009870:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8009872:	79bb      	ldrb	r3, [r7, #6]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d003      	beq.n	8009880 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800987e:	75fb      	strb	r3, [r7, #23]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8009880:	2201      	movs	r2, #1
 8009882:	2101      	movs	r1, #1
 8009884:	68f8      	ldr	r0, [r7, #12]
 8009886:	f002 fdd3 	bl	800c430 <VL53L0X_WrByte>
 800988a:	4603      	mov	r3, r0
 800988c:	753b      	strb	r3, [r7, #20]

	if (Status == VL53L0X_ERROR_NONE)
 800988e:	7d3b      	ldrb	r3, [r7, #20]
 8009890:	b25b      	sxtb	r3, r3
 8009892:	2b00      	cmp	r3, #0
 8009894:	d105      	bne.n	80098a2 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8009896:	2140      	movs	r1, #64	; 0x40
 8009898:	68f8      	ldr	r0, [r7, #12]
 800989a:	f7ff feed 	bl	8009678 <VL53L0X_perform_single_ref_calibration>
 800989e:	4603      	mov	r3, r0
 80098a0:	753b      	strb	r3, [r7, #20]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80098a2:	7d3b      	ldrb	r3, [r7, #20]
 80098a4:	b25b      	sxtb	r3, r3
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d115      	bne.n	80098d6 <VL53L0X_perform_vhv_calibration+0x8e>
 80098aa:	79fb      	ldrb	r3, [r7, #7]
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d112      	bne.n	80098d6 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80098b0:	7d79      	ldrb	r1, [r7, #21]
 80098b2:	7dba      	ldrb	r2, [r7, #22]
 80098b4:	2300      	movs	r3, #0
 80098b6:	9303      	str	r3, [sp, #12]
 80098b8:	2301      	movs	r3, #1
 80098ba:	9302      	str	r3, [sp, #8]
 80098bc:	f107 0313 	add.w	r3, r7, #19
 80098c0:	9301      	str	r3, [sp, #4]
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	9300      	str	r3, [sp, #0]
 80098c6:	460b      	mov	r3, r1
 80098c8:	2101      	movs	r1, #1
 80098ca:	68f8      	ldr	r0, [r7, #12]
 80098cc:	f7ff ff0f 	bl	80096ee <VL53L0X_ref_calibration_io>
 80098d0:	4603      	mov	r3, r0
 80098d2:	753b      	strb	r3, [r7, #20]
 80098d4:	e002      	b.n	80098dc <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	2200      	movs	r2, #0
 80098da:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80098dc:	7d3b      	ldrb	r3, [r7, #20]
 80098de:	b25b      	sxtb	r3, r3
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d112      	bne.n	800990a <VL53L0X_perform_vhv_calibration+0xc2>
 80098e4:	79bb      	ldrb	r3, [r7, #6]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00f      	beq.n	800990a <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80098ea:	7dfb      	ldrb	r3, [r7, #23]
 80098ec:	461a      	mov	r2, r3
 80098ee:	2101      	movs	r1, #1
 80098f0:	68f8      	ldr	r0, [r7, #12]
 80098f2:	f002 fd9d 	bl	800c430 <VL53L0X_WrByte>
 80098f6:	4603      	mov	r3, r0
 80098f8:	753b      	strb	r3, [r7, #20]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80098fa:	7d3b      	ldrb	r3, [r7, #20]
 80098fc:	b25b      	sxtb	r3, r3
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d103      	bne.n	800990a <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	7dfa      	ldrb	r2, [r7, #23]
 8009906:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 800990a:	7d3b      	ldrb	r3, [r7, #20]
 800990c:	b25b      	sxtb	r3, r3
}
 800990e:	4618      	mov	r0, r3
 8009910:	3718      	adds	r7, #24
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b08a      	sub	sp, #40	; 0x28
 800991a:	af04      	add	r7, sp, #16
 800991c:	60f8      	str	r0, [r7, #12]
 800991e:	60b9      	str	r1, [r7, #8]
 8009920:	4611      	mov	r1, r2
 8009922:	461a      	mov	r2, r3
 8009924:	460b      	mov	r3, r1
 8009926:	71fb      	strb	r3, [r7, #7]
 8009928:	4613      	mov	r3, r2
 800992a:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800992c:	2300      	movs	r3, #0
 800992e:	753b      	strb	r3, [r7, #20]
	uint8_t SequenceConfig = 0;
 8009930:	2300      	movs	r3, #0
 8009932:	75fb      	strb	r3, [r7, #23]
	uint8_t VhvSettings = 0;
 8009934:	2300      	movs	r3, #0
 8009936:	75bb      	strb	r3, [r7, #22]
	uint8_t PhaseCal = 0;
 8009938:	2300      	movs	r3, #0
 800993a:	757b      	strb	r3, [r7, #21]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800993c:	79bb      	ldrb	r3, [r7, #6]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d003      	beq.n	800994a <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8009948:	75fb      	strb	r3, [r7, #23]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800994a:	2202      	movs	r2, #2
 800994c:	2101      	movs	r1, #1
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	f002 fd6e 	bl	800c430 <VL53L0X_WrByte>
 8009954:	4603      	mov	r3, r0
 8009956:	753b      	strb	r3, [r7, #20]

	if (Status == VL53L0X_ERROR_NONE)
 8009958:	7d3b      	ldrb	r3, [r7, #20]
 800995a:	b25b      	sxtb	r3, r3
 800995c:	2b00      	cmp	r3, #0
 800995e:	d105      	bne.n	800996c <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8009960:	2100      	movs	r1, #0
 8009962:	68f8      	ldr	r0, [r7, #12]
 8009964:	f7ff fe88 	bl	8009678 <VL53L0X_perform_single_ref_calibration>
 8009968:	4603      	mov	r3, r0
 800996a:	753b      	strb	r3, [r7, #20]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800996c:	7d3b      	ldrb	r3, [r7, #20]
 800996e:	b25b      	sxtb	r3, r3
 8009970:	2b00      	cmp	r3, #0
 8009972:	d115      	bne.n	80099a0 <VL53L0X_perform_phase_calibration+0x8a>
 8009974:	79fb      	ldrb	r3, [r7, #7]
 8009976:	2b01      	cmp	r3, #1
 8009978:	d112      	bne.n	80099a0 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800997a:	7d79      	ldrb	r1, [r7, #21]
 800997c:	7dba      	ldrb	r2, [r7, #22]
 800997e:	2301      	movs	r3, #1
 8009980:	9303      	str	r3, [sp, #12]
 8009982:	2300      	movs	r3, #0
 8009984:	9302      	str	r3, [sp, #8]
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	9301      	str	r3, [sp, #4]
 800998a:	f107 0313 	add.w	r3, r7, #19
 800998e:	9300      	str	r3, [sp, #0]
 8009990:	460b      	mov	r3, r1
 8009992:	2101      	movs	r1, #1
 8009994:	68f8      	ldr	r0, [r7, #12]
 8009996:	f7ff feaa 	bl	80096ee <VL53L0X_ref_calibration_io>
 800999a:	4603      	mov	r3, r0
 800999c:	753b      	strb	r3, [r7, #20]
 800999e:	e002      	b.n	80099a6 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	2200      	movs	r2, #0
 80099a4:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80099a6:	7d3b      	ldrb	r3, [r7, #20]
 80099a8:	b25b      	sxtb	r3, r3
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d112      	bne.n	80099d4 <VL53L0X_perform_phase_calibration+0xbe>
 80099ae:	79bb      	ldrb	r3, [r7, #6]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d00f      	beq.n	80099d4 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80099b4:	7dfb      	ldrb	r3, [r7, #23]
 80099b6:	461a      	mov	r2, r3
 80099b8:	2101      	movs	r1, #1
 80099ba:	68f8      	ldr	r0, [r7, #12]
 80099bc:	f002 fd38 	bl	800c430 <VL53L0X_WrByte>
 80099c0:	4603      	mov	r3, r0
 80099c2:	753b      	strb	r3, [r7, #20]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80099c4:	7d3b      	ldrb	r3, [r7, #20]
 80099c6:	b25b      	sxtb	r3, r3
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d103      	bne.n	80099d4 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	7dfa      	ldrb	r2, [r7, #23]
 80099d0:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 80099d4:	7d3b      	ldrb	r3, [r7, #20]
 80099d6:	b25b      	sxtb	r3, r3
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3718      	adds	r7, #24
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b086      	sub	sp, #24
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
 80099ec:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80099ee:	2300      	movs	r3, #0
 80099f0:	75bb      	strb	r3, [r7, #22]
	uint8_t SequenceConfig = 0;
 80099f2:	2300      	movs	r3, #0
 80099f4:	75fb      	strb	r3, [r7, #23]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 80099fc:	75fb      	strb	r3, [r7, #23]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once.
	 */
	Status = VL53L0X_perform_vhv_calibration(
 80099fe:	78fa      	ldrb	r2, [r7, #3]
 8009a00:	2300      	movs	r3, #0
 8009a02:	68b9      	ldr	r1, [r7, #8]
 8009a04:	68f8      	ldr	r0, [r7, #12]
 8009a06:	f7ff ff1f 	bl	8009848 <VL53L0X_perform_vhv_calibration>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	75bb      	strb	r3, [r7, #22]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8009a0e:	7dbb      	ldrb	r3, [r7, #22]
 8009a10:	b25b      	sxtb	r3, r3
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d107      	bne.n	8009a26 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8009a16:	78fa      	ldrb	r2, [r7, #3]
 8009a18:	2300      	movs	r3, #0
 8009a1a:	6879      	ldr	r1, [r7, #4]
 8009a1c:	68f8      	ldr	r0, [r7, #12]
 8009a1e:	f7ff ff7a 	bl	8009916 <VL53L0X_perform_phase_calibration>
 8009a22:	4603      	mov	r3, r0
 8009a24:	75bb      	strb	r3, [r7, #22]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8009a26:	7dbb      	ldrb	r3, [r7, #22]
 8009a28:	b25b      	sxtb	r3, r3
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d10f      	bne.n	8009a4e <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009a2e:	7dfb      	ldrb	r3, [r7, #23]
 8009a30:	461a      	mov	r2, r3
 8009a32:	2101      	movs	r1, #1
 8009a34:	68f8      	ldr	r0, [r7, #12]
 8009a36:	f002 fcfb 	bl	800c430 <VL53L0X_WrByte>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	75bb      	strb	r3, [r7, #22]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8009a3e:	7dbb      	ldrb	r3, [r7, #22]
 8009a40:	b25b      	sxtb	r3, r3
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d103      	bne.n	8009a4e <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	7dfa      	ldrb	r2, [r7, #23]
 8009a4a:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 8009a4e:	7dbb      	ldrb	r3, [r7, #22]
 8009a50:	b25b      	sxtb	r3, r3
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3718      	adds	r7, #24
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}

08009a5a <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8009a5a:	b580      	push	{r7, lr}
 8009a5c:	b084      	sub	sp, #16
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a62:	2300      	movs	r3, #0
 8009a64:	72fb      	strb	r3, [r7, #11]
	uint8_t NewDataReady = 0;
 8009a66:	2300      	movs	r3, #0
 8009a68:	72bb      	strb	r3, [r7, #10]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	60fb      	str	r3, [r7, #12]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8009a6e:	f107 030a 	add.w	r3, r7, #10
 8009a72:	4619      	mov	r1, r3
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f7fe fdb6 	bl	80085e6 <VL53L0X_GetMeasurementDataReady>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	72fb      	strb	r3, [r7, #11]
		if (Status != 0)
 8009a7e:	7afb      	ldrb	r3, [r7, #11]
 8009a80:	b25b      	sxtb	r3, r3
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d110      	bne.n	8009aa8 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8009a86:	7abb      	ldrb	r3, [r7, #10]
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d00f      	beq.n	8009aac <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	3301      	adds	r3, #1
 8009a90:	60fb      	str	r3, [r7, #12]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009a98:	d302      	bcc.n	8009aa0 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8009a9a:	23f9      	movs	r3, #249	; 0xf9
 8009a9c:	72fb      	strb	r3, [r7, #11]
			break;
 8009a9e:	e006      	b.n	8009aae <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f002 fd47 	bl	800c534 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8009aa6:	e7e2      	b.n	8009a6e <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8009aa8:	bf00      	nop
 8009aaa:	e000      	b.n	8009aae <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8009aac:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8009aae:	7afb      	ldrb	r3, [r7, #11]
 8009ab0:	b25b      	sxtb	r3, r3
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8009aba:	b480      	push	{r7}
 8009abc:	b085      	sub	sp, #20
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8009ac8:	79fb      	ldrb	r3, [r7, #7]
 8009aca:	3301      	adds	r3, #1
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	005b      	lsls	r3, r3, #1
 8009ad0:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8009ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3714      	adds	r7, #20
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b085      	sub	sp, #20
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8009aea:	2300      	movs	r3, #0
 8009aec:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8009aee:	79fb      	ldrb	r3, [r7, #7]
 8009af0:	085b      	lsrs	r3, r3, #1
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	3b01      	subs	r3, #1
 8009af6:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8009af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3714      	adds	r7, #20
 8009afe:	46bd      	mov	sp, r7
 8009b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b04:	4770      	bx	lr

08009b06 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8009b06:	b480      	push	{r7}
 8009b08:	b085      	sub	sp, #20
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8009b12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009b16:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits
	 */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8009b18:	e002      	b.n	8009b20 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	089b      	lsrs	r3, r3, #2
 8009b1e:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8009b20:	68ba      	ldr	r2, [r7, #8]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d8f8      	bhi.n	8009b1a <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8009b28:	e017      	b.n	8009b5a <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8009b2a:	68fa      	ldr	r2, [r7, #12]
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	4413      	add	r3, r2
 8009b30:	687a      	ldr	r2, [r7, #4]
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d30b      	bcc.n	8009b4e <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8009b36:	68fa      	ldr	r2, [r7, #12]
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	4413      	add	r3, r2
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	1ad3      	subs	r3, r2, r3
 8009b40:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	085b      	lsrs	r3, r3, #1
 8009b46:	68ba      	ldr	r2, [r7, #8]
 8009b48:	4413      	add	r3, r2
 8009b4a:	60fb      	str	r3, [r7, #12]
 8009b4c:	e002      	b.n	8009b54 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	085b      	lsrs	r3, r3, #1
 8009b52:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	089b      	lsrs	r3, r3, #2
 8009b58:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d1e4      	bne.n	8009b2a <VL53L0X_isqrt+0x24>
	}

	return res;
 8009b60:	68fb      	ldr	r3, [r7, #12]
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3714      	adds	r7, #20
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr

08009b6e <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b084      	sub	sp, #16
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b76:	2300      	movs	r3, #0
 8009b78:	72fb      	strb	r3, [r7, #11]
	uint8_t strobe;
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	2183      	movs	r1, #131	; 0x83
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f002 fc56 	bl	800c430 <VL53L0X_WrByte>
 8009b84:	4603      	mov	r3, r0
 8009b86:	461a      	mov	r2, r3
 8009b88:	7afb      	ldrb	r3, [r7, #11]
 8009b8a:	b25b      	sxtb	r3, r3
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	b25b      	sxtb	r3, r3
 8009b90:	72fb      	strb	r3, [r7, #11]

	/* polling
	 * use timeout to avoid deadlock
	 */
	if (Status == VL53L0X_ERROR_NONE) {
 8009b92:	7afb      	ldrb	r3, [r7, #11]
 8009b94:	b25b      	sxtb	r3, r3
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d11e      	bne.n	8009bd8 <VL53L0X_device_read_strobe+0x6a>
		LoopNb = 0;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	60fb      	str	r3, [r7, #12]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8009b9e:	f107 030a 	add.w	r3, r7, #10
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	2183      	movs	r1, #131	; 0x83
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f002 fb47 	bl	800c23a <VL53L0X_RdByte>
 8009bac:	4603      	mov	r3, r0
 8009bae:	72fb      	strb	r3, [r7, #11]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8009bb0:	7abb      	ldrb	r3, [r7, #10]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d10a      	bne.n	8009bcc <VL53L0X_device_read_strobe+0x5e>
 8009bb6:	7afb      	ldrb	r3, [r7, #11]
 8009bb8:	b25b      	sxtb	r3, r3
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d106      	bne.n	8009bcc <VL53L0X_device_read_strobe+0x5e>
				break;

			LoopNb = LoopNb + 1;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	60fb      	str	r3, [r7, #12]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009bca:	d3e8      	bcc.n	8009b9e <VL53L0X_device_read_strobe+0x30>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009bd2:	d301      	bcc.n	8009bd8 <VL53L0X_device_read_strobe+0x6a>
			Status = VL53L0X_ERROR_TIME_OUT;
 8009bd4:	23f9      	movs	r3, #249	; 0xf9
 8009bd6:	72fb      	strb	r3, [r7, #11]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8009bd8:	2201      	movs	r2, #1
 8009bda:	2183      	movs	r1, #131	; 0x83
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f002 fc27 	bl	800c430 <VL53L0X_WrByte>
 8009be2:	4603      	mov	r3, r0
 8009be4:	461a      	mov	r2, r3
 8009be6:	7afb      	ldrb	r3, [r7, #11]
 8009be8:	b25b      	sxtb	r3, r3
 8009bea:	4313      	orrs	r3, r2
 8009bec:	b25b      	sxtb	r3, r3
 8009bee:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_END(Status);
	return Status;
 8009bf0:	7afb      	ldrb	r3, [r7, #11]
 8009bf2:	b25b      	sxtb	r3, r3

}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3710      	adds	r7, #16
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b098      	sub	sp, #96	; 0x60
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	460b      	mov	r3, r1
 8009c06:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t ReferenceSpadType = 0;
 8009c14:	2300      	movs	r3, #0
 8009c16:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint32_t PartUIDUpper = 0;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PartUIDLower = 0;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t OffsetFixed1104_mm = 0;
 8009c22:	2300      	movs	r3, #0
 8009c24:	64fb      	str	r3, [r7, #76]	; 0x4c
	int16_t OffsetMicroMeters = 0;
 8009c26:	2300      	movs	r3, #0
 8009c28:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8009c2c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8009c30:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t DistMeasFixed1104_400_mm = 0;
 8009c32:	2300      	movs	r3, #0
 8009c34:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8009c36:	2300      	movs	r3, #0
 8009c38:	657b      	str	r3, [r7, #84]	; 0x54
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	647b      	str	r3, [r7, #68]	; 0x44
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8009c44:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done
	 */
	if (ReadDataFromDeviceDone != 7) {
 8009c48:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009c4c:	2b07      	cmp	r3, #7
 8009c4e:	f000 848a 	beq.w	800a566 <VL53L0X_get_info_from_device+0x96a>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009c52:	2201      	movs	r2, #1
 8009c54:	2180      	movs	r1, #128	; 0x80
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f002 fbea 	bl	800c430 <VL53L0X_WrByte>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	461a      	mov	r2, r3
 8009c60:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009c64:	b25b      	sxtb	r3, r3
 8009c66:	4313      	orrs	r3, r2
 8009c68:	b25b      	sxtb	r3, r3
 8009c6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009c6e:	2201      	movs	r2, #1
 8009c70:	21ff      	movs	r1, #255	; 0xff
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f002 fbdc 	bl	800c430 <VL53L0X_WrByte>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009c80:	b25b      	sxtb	r3, r3
 8009c82:	4313      	orrs	r3, r2
 8009c84:	b25b      	sxtb	r3, r3
 8009c86:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	2100      	movs	r1, #0
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f002 fbce 	bl	800c430 <VL53L0X_WrByte>
 8009c94:	4603      	mov	r3, r0
 8009c96:	461a      	mov	r2, r3
 8009c98:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009c9c:	b25b      	sxtb	r3, r3
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	b25b      	sxtb	r3, r3
 8009ca2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8009ca6:	2206      	movs	r2, #6
 8009ca8:	21ff      	movs	r1, #255	; 0xff
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f002 fbc0 	bl	800c430 <VL53L0X_WrByte>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009cb8:	b25b      	sxtb	r3, r3
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	b25b      	sxtb	r3, r3
 8009cbe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8009cc2:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	2183      	movs	r1, #131	; 0x83
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f002 fab5 	bl	800c23a <VL53L0X_RdByte>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009cd8:	b25b      	sxtb	r3, r3
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	b25b      	sxtb	r3, r3
 8009cde:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8009ce2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009ce6:	f043 0304 	orr.w	r3, r3, #4
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	461a      	mov	r2, r3
 8009cee:	2183      	movs	r1, #131	; 0x83
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f002 fb9d 	bl	800c430 <VL53L0X_WrByte>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009cfe:	b25b      	sxtb	r3, r3
 8009d00:	4313      	orrs	r3, r2
 8009d02:	b25b      	sxtb	r3, r3
 8009d04:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8009d08:	2207      	movs	r2, #7
 8009d0a:	21ff      	movs	r1, #255	; 0xff
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f002 fb8f 	bl	800c430 <VL53L0X_WrByte>
 8009d12:	4603      	mov	r3, r0
 8009d14:	461a      	mov	r2, r3
 8009d16:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009d1a:	b25b      	sxtb	r3, r3
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	b25b      	sxtb	r3, r3
 8009d20:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8009d24:	2201      	movs	r2, #1
 8009d26:	2181      	movs	r1, #129	; 0x81
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f002 fb81 	bl	800c430 <VL53L0X_WrByte>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	461a      	mov	r2, r3
 8009d32:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009d36:	b25b      	sxtb	r3, r3
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	b25b      	sxtb	r3, r3
 8009d3c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

		Status |= VL53L0X_PollingDelay(Dev);
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f002 fbf7 	bl	800c534 <VL53L0X_PollingDelay>
 8009d46:	4603      	mov	r3, r0
 8009d48:	461a      	mov	r2, r3
 8009d4a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009d4e:	b25b      	sxtb	r3, r3
 8009d50:	4313      	orrs	r3, r2
 8009d52:	b25b      	sxtb	r3, r3
 8009d54:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009d58:	2201      	movs	r2, #1
 8009d5a:	2180      	movs	r1, #128	; 0x80
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f002 fb67 	bl	800c430 <VL53L0X_WrByte>
 8009d62:	4603      	mov	r3, r0
 8009d64:	461a      	mov	r2, r3
 8009d66:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009d6a:	b25b      	sxtb	r3, r3
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	b25b      	sxtb	r3, r3
 8009d70:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

		if (((option & 1) == 1) &&
 8009d74:	78fb      	ldrb	r3, [r7, #3]
 8009d76:	f003 0301 	and.w	r3, r3, #1
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	f000 80aa 	beq.w	8009ed4 <VL53L0X_get_info_from_device+0x2d8>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8009d80:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009d84:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	f040 80a3 	bne.w	8009ed4 <VL53L0X_get_info_from_device+0x2d8>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8009d8e:	226b      	movs	r2, #107	; 0x6b
 8009d90:	2194      	movs	r1, #148	; 0x94
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f002 fb4c 	bl	800c430 <VL53L0X_WrByte>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009da0:	b25b      	sxtb	r3, r3
 8009da2:	4313      	orrs	r3, r2
 8009da4:	b25b      	sxtb	r3, r3
 8009da6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			Status |= VL53L0X_device_read_strobe(Dev);
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f7ff fedf 	bl	8009b6e <VL53L0X_device_read_strobe>
 8009db0:	4603      	mov	r3, r0
 8009db2:	461a      	mov	r2, r3
 8009db4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009db8:	b25b      	sxtb	r3, r3
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	b25b      	sxtb	r3, r3
 8009dbe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009dc2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	2190      	movs	r1, #144	; 0x90
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f002 faf4 	bl	800c3b8 <VL53L0X_RdDWord>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009dd8:	b25b      	sxtb	r3, r3
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	b25b      	sxtb	r3, r3
 8009dde:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8009de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009de4:	0a1b      	lsrs	r3, r3, #8
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8009df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009df2:	0bdb      	lsrs	r3, r3, #15
 8009df4:	b2db      	uxtb	r3, r3
 8009df6:	f003 0301 	and.w	r3, r3, #1
 8009dfa:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8009dfe:	2224      	movs	r2, #36	; 0x24
 8009e00:	2194      	movs	r1, #148	; 0x94
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f002 fb14 	bl	800c430 <VL53L0X_WrByte>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009e10:	b25b      	sxtb	r3, r3
 8009e12:	4313      	orrs	r3, r2
 8009e14:	b25b      	sxtb	r3, r3
 8009e16:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			Status |= VL53L0X_device_read_strobe(Dev);
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f7ff fea7 	bl	8009b6e <VL53L0X_device_read_strobe>
 8009e20:	4603      	mov	r3, r0
 8009e22:	461a      	mov	r2, r3
 8009e24:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009e28:	b25b      	sxtb	r3, r3
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	b25b      	sxtb	r3, r3
 8009e2e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009e32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009e36:	461a      	mov	r2, r3
 8009e38:	2190      	movs	r1, #144	; 0x90
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f002 fabc 	bl	800c3b8 <VL53L0X_RdDWord>
 8009e40:	4603      	mov	r3, r0
 8009e42:	461a      	mov	r2, r3
 8009e44:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009e48:	b25b      	sxtb	r3, r3
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	b25b      	sxtb	r3, r3
 8009e4e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8009e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e54:	0e1b      	lsrs	r3, r3, #24
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8009e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e5c:	0c1b      	lsrs	r3, r3, #16
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	737b      	strb	r3, [r7, #13]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8009e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e64:	0a1b      	lsrs	r3, r3, #8
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	73bb      	strb	r3, [r7, #14]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8009e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	73fb      	strb	r3, [r7, #15]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8009e70:	2225      	movs	r2, #37	; 0x25
 8009e72:	2194      	movs	r1, #148	; 0x94
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f002 fadb 	bl	800c430 <VL53L0X_WrByte>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009e82:	b25b      	sxtb	r3, r3
 8009e84:	4313      	orrs	r3, r2
 8009e86:	b25b      	sxtb	r3, r3
 8009e88:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			Status |= VL53L0X_device_read_strobe(Dev);
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f7ff fe6e 	bl	8009b6e <VL53L0X_device_read_strobe>
 8009e92:	4603      	mov	r3, r0
 8009e94:	461a      	mov	r2, r3
 8009e96:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009e9a:	b25b      	sxtb	r3, r3
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	b25b      	sxtb	r3, r3
 8009ea0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009ea4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	2190      	movs	r1, #144	; 0x90
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f002 fa83 	bl	800c3b8 <VL53L0X_RdDWord>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009eba:	b25b      	sxtb	r3, r3
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	b25b      	sxtb	r3, r3
 8009ec0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8009ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ec6:	0e1b      	lsrs	r3, r3, #24
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	743b      	strb	r3, [r7, #16]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8009ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ece:	0c1b      	lsrs	r3, r3, #16
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	747b      	strb	r3, [r7, #17]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8009ed4:	78fb      	ldrb	r3, [r7, #3]
 8009ed6:	f003 0302 	and.w	r3, r3, #2
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	f000 81b1 	beq.w	800a242 <VL53L0X_get_info_from_device+0x646>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8009ee0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009ee4:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	f040 81aa 	bne.w	800a242 <VL53L0X_get_info_from_device+0x646>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8009eee:	2202      	movs	r2, #2
 8009ef0:	2194      	movs	r1, #148	; 0x94
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f002 fa9c 	bl	800c430 <VL53L0X_WrByte>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	461a      	mov	r2, r3
 8009efc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009f00:	b25b      	sxtb	r3, r3
 8009f02:	4313      	orrs	r3, r2
 8009f04:	b25b      	sxtb	r3, r3
 8009f06:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			Status |= VL53L0X_device_read_strobe(Dev);
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f7ff fe2f 	bl	8009b6e <VL53L0X_device_read_strobe>
 8009f10:	4603      	mov	r3, r0
 8009f12:	461a      	mov	r2, r3
 8009f14:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009f18:	b25b      	sxtb	r3, r3
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	b25b      	sxtb	r3, r3
 8009f1e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8009f22:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8009f26:	461a      	mov	r2, r3
 8009f28:	2190      	movs	r1, #144	; 0x90
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f002 f985 	bl	800c23a <VL53L0X_RdByte>
 8009f30:	4603      	mov	r3, r0
 8009f32:	461a      	mov	r2, r3
 8009f34:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009f38:	b25b      	sxtb	r3, r3
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	b25b      	sxtb	r3, r3
 8009f3e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8009f42:	227b      	movs	r2, #123	; 0x7b
 8009f44:	2194      	movs	r1, #148	; 0x94
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f002 fa72 	bl	800c430 <VL53L0X_WrByte>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	461a      	mov	r2, r3
 8009f50:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009f54:	b25b      	sxtb	r3, r3
 8009f56:	4313      	orrs	r3, r2
 8009f58:	b25b      	sxtb	r3, r3
 8009f5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			Status |= VL53L0X_device_read_strobe(Dev);
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f7ff fe05 	bl	8009b6e <VL53L0X_device_read_strobe>
 8009f64:	4603      	mov	r3, r0
 8009f66:	461a      	mov	r2, r3
 8009f68:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009f6c:	b25b      	sxtb	r3, r3
 8009f6e:	4313      	orrs	r3, r2
 8009f70:	b25b      	sxtb	r3, r3
 8009f72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8009f76:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	2190      	movs	r1, #144	; 0x90
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f002 f95b 	bl	800c23a <VL53L0X_RdByte>
 8009f84:	4603      	mov	r3, r0
 8009f86:	461a      	mov	r2, r3
 8009f88:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009f8c:	b25b      	sxtb	r3, r3
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	b25b      	sxtb	r3, r3
 8009f92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8009f96:	2277      	movs	r2, #119	; 0x77
 8009f98:	2194      	movs	r1, #148	; 0x94
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f002 fa48 	bl	800c430 <VL53L0X_WrByte>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009fa8:	b25b      	sxtb	r3, r3
 8009faa:	4313      	orrs	r3, r2
 8009fac:	b25b      	sxtb	r3, r3
 8009fae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			Status |= VL53L0X_device_read_strobe(Dev);
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f7ff fddb 	bl	8009b6e <VL53L0X_device_read_strobe>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	461a      	mov	r2, r3
 8009fbc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009fc0:	b25b      	sxtb	r3, r3
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	b25b      	sxtb	r3, r3
 8009fc6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009fca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009fce:	461a      	mov	r2, r3
 8009fd0:	2190      	movs	r1, #144	; 0x90
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f002 f9f0 	bl	800c3b8 <VL53L0X_RdDWord>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	461a      	mov	r2, r3
 8009fdc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009fe0:	b25b      	sxtb	r3, r3
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	b25b      	sxtb	r3, r3
 8009fe6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8009fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fec:	0e5b      	lsrs	r3, r3, #25
 8009fee:	b2db      	uxtb	r3, r3
 8009ff0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	753b      	strb	r3, [r7, #20]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8009ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ffa:	0c9b      	lsrs	r3, r3, #18
 8009ffc:	b2db      	uxtb	r3, r3
 8009ffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a002:	b2db      	uxtb	r3, r3
 800a004:	757b      	strb	r3, [r7, #21]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800a006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a008:	0adb      	lsrs	r3, r3, #11
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a010:	b2db      	uxtb	r3, r3
 800a012:	75bb      	strb	r3, [r7, #22]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800a014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a016:	091b      	lsrs	r3, r3, #4
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	75fb      	strb	r3, [r7, #23]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800a022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a024:	b2db      	uxtb	r3, r3
 800a026:	00db      	lsls	r3, r3, #3
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800a02e:	b2db      	uxtb	r3, r3
 800a030:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800a034:	2278      	movs	r2, #120	; 0x78
 800a036:	2194      	movs	r1, #148	; 0x94
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f002 f9f9 	bl	800c430 <VL53L0X_WrByte>
 800a03e:	4603      	mov	r3, r0
 800a040:	461a      	mov	r2, r3
 800a042:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a046:	b25b      	sxtb	r3, r3
 800a048:	4313      	orrs	r3, r2
 800a04a:	b25b      	sxtb	r3, r3
 800a04c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			Status |= VL53L0X_device_read_strobe(Dev);
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f7ff fd8c 	bl	8009b6e <VL53L0X_device_read_strobe>
 800a056:	4603      	mov	r3, r0
 800a058:	461a      	mov	r2, r3
 800a05a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a05e:	b25b      	sxtb	r3, r3
 800a060:	4313      	orrs	r3, r2
 800a062:	b25b      	sxtb	r3, r3
 800a064:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a068:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a06c:	461a      	mov	r2, r3
 800a06e:	2190      	movs	r1, #144	; 0x90
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f002 f9a1 	bl	800c3b8 <VL53L0X_RdDWord>
 800a076:	4603      	mov	r3, r0
 800a078:	461a      	mov	r2, r3
 800a07a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a07e:	b25b      	sxtb	r3, r3
 800a080:	4313      	orrs	r3, r2
 800a082:	b25b      	sxtb	r3, r3
 800a084:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800a088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a08a:	0f5b      	lsrs	r3, r3, #29
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a092:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800a094:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800a098:	4413      	add	r3, r2
 800a09a:	b2db      	uxtb	r3, r3
 800a09c:	763b      	strb	r3, [r7, #24]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800a09e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0a0:	0d9b      	lsrs	r3, r3, #22
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	767b      	strb	r3, [r7, #25]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800a0ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0ae:	0bdb      	lsrs	r3, r3, #15
 800a0b0:	b2db      	uxtb	r3, r3
 800a0b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	76bb      	strb	r3, [r7, #26]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800a0ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0bc:	0a1b      	lsrs	r3, r3, #8
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0c4:	b2db      	uxtb	r3, r3
 800a0c6:	76fb      	strb	r3, [r7, #27]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800a0c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0ca:	085b      	lsrs	r3, r3, #1
 800a0cc:	b2db      	uxtb	r3, r3
 800a0ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0d2:	b2db      	uxtb	r3, r3
 800a0d4:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800a0d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	019b      	lsls	r3, r3, #6
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0e2:	b2db      	uxtb	r3, r3
 800a0e4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800a0e8:	2279      	movs	r2, #121	; 0x79
 800a0ea:	2194      	movs	r1, #148	; 0x94
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f002 f99f 	bl	800c430 <VL53L0X_WrByte>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a0fa:	b25b      	sxtb	r3, r3
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	b25b      	sxtb	r3, r3
 800a100:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

			Status |= VL53L0X_device_read_strobe(Dev);
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f7ff fd32 	bl	8009b6e <VL53L0X_device_read_strobe>
 800a10a:	4603      	mov	r3, r0
 800a10c:	461a      	mov	r2, r3
 800a10e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a112:	b25b      	sxtb	r3, r3
 800a114:	4313      	orrs	r3, r2
 800a116:	b25b      	sxtb	r3, r3
 800a118:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a11c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a120:	461a      	mov	r2, r3
 800a122:	2190      	movs	r1, #144	; 0x90
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f002 f947 	bl	800c3b8 <VL53L0X_RdDWord>
 800a12a:	4603      	mov	r3, r0
 800a12c:	461a      	mov	r2, r3
 800a12e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a132:	b25b      	sxtb	r3, r3
 800a134:	4313      	orrs	r3, r2
 800a136:	b25b      	sxtb	r3, r3
 800a138:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800a13c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a13e:	0e9b      	lsrs	r3, r3, #26
 800a140:	b2db      	uxtb	r3, r3
 800a142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a146:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800a148:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800a14c:	4413      	add	r3, r2
 800a14e:	b2db      	uxtb	r3, r3
 800a150:	777b      	strb	r3, [r7, #29]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800a152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a154:	0cdb      	lsrs	r3, r3, #19
 800a156:	b2db      	uxtb	r3, r3
 800a158:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	77bb      	strb	r3, [r7, #30]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800a160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a162:	0b1b      	lsrs	r3, r3, #12
 800a164:	b2db      	uxtb	r3, r3
 800a166:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	77fb      	strb	r3, [r7, #31]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800a16e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a170:	095b      	lsrs	r3, r3, #5
 800a172:	b2db      	uxtb	r3, r3
 800a174:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a178:	b2db      	uxtb	r3, r3
 800a17a:	f887 3020 	strb.w	r3, [r7, #32]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800a17e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a180:	b2db      	uxtb	r3, r3
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	b2db      	uxtb	r3, r3
 800a186:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800a190:	227a      	movs	r2, #122	; 0x7a
 800a192:	2194      	movs	r1, #148	; 0x94
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f002 f94b 	bl	800c430 <VL53L0X_WrByte>
 800a19a:	4603      	mov	r3, r0
 800a19c:	461a      	mov	r2, r3
 800a19e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a1a2:	b25b      	sxtb	r3, r3
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	b25b      	sxtb	r3, r3
 800a1a8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

			Status |= VL53L0X_device_read_strobe(Dev);
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f7ff fcde 	bl	8009b6e <VL53L0X_device_read_strobe>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a1ba:	b25b      	sxtb	r3, r3
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	b25b      	sxtb	r3, r3
 800a1c0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a1c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	2190      	movs	r1, #144	; 0x90
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f002 f8f3 	bl	800c3b8 <VL53L0X_RdDWord>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a1da:	b25b      	sxtb	r3, r3
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	b25b      	sxtb	r3, r3
 800a1e0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800a1e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1e6:	0f9b      	lsrs	r3, r3, #30
 800a1e8:	b2db      	uxtb	r3, r3
 800a1ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1ee:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800a1f0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800a1f4:	4413      	add	r3, r2
 800a1f6:	b2db      	uxtb	r3, r3
 800a1f8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800a1fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1fe:	0ddb      	lsrs	r3, r3, #23
 800a200:	b2db      	uxtb	r3, r3
 800a202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a206:	b2db      	uxtb	r3, r3
 800a208:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800a20c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a20e:	0c1b      	lsrs	r3, r3, #16
 800a210:	b2db      	uxtb	r3, r3
 800a212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a216:	b2db      	uxtb	r3, r3
 800a218:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800a21c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a21e:	0a5b      	lsrs	r3, r3, #9
 800a220:	b2db      	uxtb	r3, r3
 800a222:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a226:	b2db      	uxtb	r3, r3
 800a228:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800a22c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a22e:	089b      	lsrs	r3, r3, #2
 800a230:	b2db      	uxtb	r3, r3
 800a232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a236:	b2db      	uxtb	r3, r3
 800a238:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			ProductId[18] = '\0';
 800a23c:	2300      	movs	r3, #0
 800a23e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

		}

		if (((option & 4) == 4) &&
 800a242:	78fb      	ldrb	r3, [r7, #3]
 800a244:	f003 0304 	and.w	r3, r3, #4
 800a248:	2b00      	cmp	r3, #0
 800a24a:	f000 8115 	beq.w	800a478 <VL53L0X_get_info_from_device+0x87c>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800a24e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a252:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800a256:	2b00      	cmp	r3, #0
 800a258:	f040 810e 	bne.w	800a478 <VL53L0X_get_info_from_device+0x87c>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800a25c:	227b      	movs	r2, #123	; 0x7b
 800a25e:	2194      	movs	r1, #148	; 0x94
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f002 f8e5 	bl	800c430 <VL53L0X_WrByte>
 800a266:	4603      	mov	r3, r0
 800a268:	461a      	mov	r2, r3
 800a26a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a26e:	b25b      	sxtb	r3, r3
 800a270:	4313      	orrs	r3, r2
 800a272:	b25b      	sxtb	r3, r3
 800a274:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			Status |= VL53L0X_device_read_strobe(Dev);
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f7ff fc78 	bl	8009b6e <VL53L0X_device_read_strobe>
 800a27e:	4603      	mov	r3, r0
 800a280:	461a      	mov	r2, r3
 800a282:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a286:	b25b      	sxtb	r3, r3
 800a288:	4313      	orrs	r3, r2
 800a28a:	b25b      	sxtb	r3, r3
 800a28c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800a290:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a294:	461a      	mov	r2, r3
 800a296:	2190      	movs	r1, #144	; 0x90
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f002 f88d 	bl	800c3b8 <VL53L0X_RdDWord>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a2a6:	b25b      	sxtb	r3, r3
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	b25b      	sxtb	r3, r3
 800a2ac:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800a2b0:	227c      	movs	r2, #124	; 0x7c
 800a2b2:	2194      	movs	r1, #148	; 0x94
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f002 f8bb 	bl	800c430 <VL53L0X_WrByte>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	461a      	mov	r2, r3
 800a2be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a2c2:	b25b      	sxtb	r3, r3
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	b25b      	sxtb	r3, r3
 800a2c8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			Status |= VL53L0X_device_read_strobe(Dev);
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f7ff fc4e 	bl	8009b6e <VL53L0X_device_read_strobe>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	461a      	mov	r2, r3
 800a2d6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a2da:	b25b      	sxtb	r3, r3
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	b25b      	sxtb	r3, r3
 800a2e0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800a2e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	2190      	movs	r1, #144	; 0x90
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f002 f863 	bl	800c3b8 <VL53L0X_RdDWord>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a2fa:	b25b      	sxtb	r3, r3
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	b25b      	sxtb	r3, r3
 800a300:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800a304:	2273      	movs	r2, #115	; 0x73
 800a306:	2194      	movs	r1, #148	; 0x94
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f002 f891 	bl	800c430 <VL53L0X_WrByte>
 800a30e:	4603      	mov	r3, r0
 800a310:	461a      	mov	r2, r3
 800a312:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a316:	b25b      	sxtb	r3, r3
 800a318:	4313      	orrs	r3, r2
 800a31a:	b25b      	sxtb	r3, r3
 800a31c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			Status |= VL53L0X_device_read_strobe(Dev);
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f7ff fc24 	bl	8009b6e <VL53L0X_device_read_strobe>
 800a326:	4603      	mov	r3, r0
 800a328:	461a      	mov	r2, r3
 800a32a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a32e:	b25b      	sxtb	r3, r3
 800a330:	4313      	orrs	r3, r2
 800a332:	b25b      	sxtb	r3, r3
 800a334:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a338:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a33c:	461a      	mov	r2, r3
 800a33e:	2190      	movs	r1, #144	; 0x90
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f002 f839 	bl	800c3b8 <VL53L0X_RdDWord>
 800a346:	4603      	mov	r3, r0
 800a348:	461a      	mov	r2, r3
 800a34a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a34e:	b25b      	sxtb	r3, r3
 800a350:	4313      	orrs	r3, r2
 800a352:	b25b      	sxtb	r3, r3
 800a354:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800a358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a35a:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800a35c:	b29b      	uxth	r3, r3
 800a35e:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800a360:	2274      	movs	r2, #116	; 0x74
 800a362:	2194      	movs	r1, #148	; 0x94
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f002 f863 	bl	800c430 <VL53L0X_WrByte>
 800a36a:	4603      	mov	r3, r0
 800a36c:	461a      	mov	r2, r3
 800a36e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a372:	b25b      	sxtb	r3, r3
 800a374:	4313      	orrs	r3, r2
 800a376:	b25b      	sxtb	r3, r3
 800a378:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			Status |= VL53L0X_device_read_strobe(Dev);
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f7ff fbf6 	bl	8009b6e <VL53L0X_device_read_strobe>
 800a382:	4603      	mov	r3, r0
 800a384:	461a      	mov	r2, r3
 800a386:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a38a:	b25b      	sxtb	r3, r3
 800a38c:	4313      	orrs	r3, r2
 800a38e:	b25b      	sxtb	r3, r3
 800a390:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a394:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a398:	461a      	mov	r2, r3
 800a39a:	2190      	movs	r1, #144	; 0x90
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f002 f80b 	bl	800c3b8 <VL53L0X_RdDWord>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	461a      	mov	r2, r3
 800a3a6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a3aa:	b25b      	sxtb	r3, r3
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	b25b      	sxtb	r3, r3
 800a3b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800a3b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3b6:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800a3b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800a3be:	2275      	movs	r2, #117	; 0x75
 800a3c0:	2194      	movs	r1, #148	; 0x94
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f002 f834 	bl	800c430 <VL53L0X_WrByte>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a3d0:	b25b      	sxtb	r3, r3
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	b25b      	sxtb	r3, r3
 800a3d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			Status |= VL53L0X_device_read_strobe(Dev);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f7ff fbc7 	bl	8009b6e <VL53L0X_device_read_strobe>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a3e8:	b25b      	sxtb	r3, r3
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	b25b      	sxtb	r3, r3
 800a3ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a3f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	2190      	movs	r1, #144	; 0x90
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f001 ffdc 	bl	800c3b8 <VL53L0X_RdDWord>
 800a400:	4603      	mov	r3, r0
 800a402:	461a      	mov	r2, r3
 800a404:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a408:	b25b      	sxtb	r3, r3
 800a40a:	4313      	orrs	r3, r2
 800a40c:	b25b      	sxtb	r3, r3
 800a40e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800a412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a414:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800a416:	b29b      	uxth	r3, r3
 800a418:	65bb      	str	r3, [r7, #88]	; 0x58

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800a41a:	2276      	movs	r2, #118	; 0x76
 800a41c:	2194      	movs	r1, #148	; 0x94
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f002 f806 	bl	800c430 <VL53L0X_WrByte>
 800a424:	4603      	mov	r3, r0
 800a426:	461a      	mov	r2, r3
 800a428:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a42c:	b25b      	sxtb	r3, r3
 800a42e:	4313      	orrs	r3, r2
 800a430:	b25b      	sxtb	r3, r3
 800a432:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			Status |= VL53L0X_device_read_strobe(Dev);
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f7ff fb99 	bl	8009b6e <VL53L0X_device_read_strobe>
 800a43c:	4603      	mov	r3, r0
 800a43e:	461a      	mov	r2, r3
 800a440:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a444:	b25b      	sxtb	r3, r3
 800a446:	4313      	orrs	r3, r2
 800a448:	b25b      	sxtb	r3, r3
 800a44a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a44e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a452:	461a      	mov	r2, r3
 800a454:	2190      	movs	r1, #144	; 0x90
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f001 ffae 	bl	800c3b8 <VL53L0X_RdDWord>
 800a45c:	4603      	mov	r3, r0
 800a45e:	461a      	mov	r2, r3
 800a460:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a464:	b25b      	sxtb	r3, r3
 800a466:	4313      	orrs	r3, r2
 800a468:	b25b      	sxtb	r3, r3
 800a46a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800a46e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a470:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800a472:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a474:	4313      	orrs	r3, r2
 800a476:	65bb      	str	r3, [r7, #88]	; 0x58
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800a478:	2200      	movs	r2, #0
 800a47a:	2181      	movs	r1, #129	; 0x81
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f001 ffd7 	bl	800c430 <VL53L0X_WrByte>
 800a482:	4603      	mov	r3, r0
 800a484:	461a      	mov	r2, r3
 800a486:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a48a:	b25b      	sxtb	r3, r3
 800a48c:	4313      	orrs	r3, r2
 800a48e:	b25b      	sxtb	r3, r3
 800a490:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800a494:	2206      	movs	r2, #6
 800a496:	21ff      	movs	r1, #255	; 0xff
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f001 ffc9 	bl	800c430 <VL53L0X_WrByte>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a4a6:	b25b      	sxtb	r3, r3
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	b25b      	sxtb	r3, r3
 800a4ac:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800a4b0:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	2183      	movs	r1, #131	; 0x83
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f001 febe 	bl	800c23a <VL53L0X_RdByte>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a4c6:	b25b      	sxtb	r3, r3
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	b25b      	sxtb	r3, r3
 800a4cc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800a4d0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800a4d4:	f023 0304 	bic.w	r3, r3, #4
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	461a      	mov	r2, r3
 800a4dc:	2183      	movs	r1, #131	; 0x83
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f001 ffa6 	bl	800c430 <VL53L0X_WrByte>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a4ec:	b25b      	sxtb	r3, r3
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	b25b      	sxtb	r3, r3
 800a4f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	21ff      	movs	r1, #255	; 0xff
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f001 ff98 	bl	800c430 <VL53L0X_WrByte>
 800a500:	4603      	mov	r3, r0
 800a502:	461a      	mov	r2, r3
 800a504:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a508:	b25b      	sxtb	r3, r3
 800a50a:	4313      	orrs	r3, r2
 800a50c:	b25b      	sxtb	r3, r3
 800a50e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a512:	2201      	movs	r2, #1
 800a514:	2100      	movs	r1, #0
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f001 ff8a 	bl	800c430 <VL53L0X_WrByte>
 800a51c:	4603      	mov	r3, r0
 800a51e:	461a      	mov	r2, r3
 800a520:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a524:	b25b      	sxtb	r3, r3
 800a526:	4313      	orrs	r3, r2
 800a528:	b25b      	sxtb	r3, r3
 800a52a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a52e:	2200      	movs	r2, #0
 800a530:	21ff      	movs	r1, #255	; 0xff
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f001 ff7c 	bl	800c430 <VL53L0X_WrByte>
 800a538:	4603      	mov	r3, r0
 800a53a:	461a      	mov	r2, r3
 800a53c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a540:	b25b      	sxtb	r3, r3
 800a542:	4313      	orrs	r3, r2
 800a544:	b25b      	sxtb	r3, r3
 800a546:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a54a:	2200      	movs	r2, #0
 800a54c:	2180      	movs	r1, #128	; 0x80
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f001 ff6e 	bl	800c430 <VL53L0X_WrByte>
 800a554:	4603      	mov	r3, r0
 800a556:	461a      	mov	r2, r3
 800a558:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a55c:	b25b      	sxtb	r3, r3
 800a55e:	4313      	orrs	r3, r2
 800a560:	b25b      	sxtb	r3, r3
 800a562:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800a566:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a56a:	b25b      	sxtb	r3, r3
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	f040 8090 	bne.w	800a692 <VL53L0X_get_info_from_device+0xa96>
 800a572:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a576:	2b07      	cmp	r3, #7
 800a578:	f000 808b 	beq.w	800a692 <VL53L0X_get_info_from_device+0xa96>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800a57c:	78fb      	ldrb	r3, [r7, #3]
 800a57e:	f003 0301 	and.w	r3, r3, #1
 800a582:	2b00      	cmp	r3, #0
 800a584:	d024      	beq.n	800a5d0 <VL53L0X_get_info_from_device+0x9d4>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800a586:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a58a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d11e      	bne.n	800a5d0 <VL53L0X_get_info_from_device+0x9d4>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800a598:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800a5a2:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	653b      	str	r3, [r7, #80]	; 0x50
 800a5aa:	e00e      	b.n	800a5ca <VL53L0X_get_info_from_device+0x9ce>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800a5ac:	f107 020c 	add.w	r2, r7, #12
 800a5b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5b2:	4413      	add	r3, r2
 800a5b4:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5ba:	4413      	add	r3, r2
 800a5bc:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 800a5c0:	460a      	mov	r2, r1
 800a5c2:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800a5c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	653b      	str	r3, [r7, #80]	; 0x50
 800a5ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5cc:	2b05      	cmp	r3, #5
 800a5ce:	dded      	ble.n	800a5ac <VL53L0X_get_info_from_device+0x9b0>
			}
		}

		if (((option & 2) == 2) &&
 800a5d0:	78fb      	ldrb	r3, [r7, #3]
 800a5d2:	f003 0302 	and.w	r3, r3, #2
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d019      	beq.n	800a60e <VL53L0X_get_info_from_device+0xa12>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800a5da:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a5de:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d113      	bne.n	800a60e <VL53L0X_get_info_from_device+0xa12>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a5e6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a5f0:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f203 131f 	addw	r3, r3, #287	; 0x11f
 800a600:	63fb      	str	r3, [r7, #60]	; 0x3c
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800a602:	f107 0314 	add.w	r3, r7, #20
 800a606:	4619      	mov	r1, r3
 800a608:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a60a:	f005 fc9b 	bl	800ff44 <strcpy>

		}

		if (((option & 4) == 4) &&
 800a60e:	78fb      	ldrb	r3, [r7, #3]
 800a610:	f003 0304 	and.w	r3, r3, #4
 800a614:	2b00      	cmp	r3, #0
 800a616:	d030      	beq.n	800a67a <VL53L0X_get_info_from_device+0xa7e>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800a618:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a61c:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800a620:	2b00      	cmp	r3, #0
 800a622:	d12a      	bne.n	800a67a <VL53L0X_get_info_from_device+0xa7e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a62c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800a634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a636:	025b      	lsls	r3, r3, #9
 800a638:	647b      	str	r3, [r7, #68]	; 0x44
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a63e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800a642:	2300      	movs	r3, #0
 800a644:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
			if (DistMeasFixed1104_400_mm != 0) {
 800a648:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d011      	beq.n	800a672 <VL53L0X_get_info_from_device+0xa76>
				OffsetFixed1104_mm =
 800a64e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a652:	1ad3      	subs	r3, r2, r3
 800a654:	64fb      	str	r3, [r7, #76]	; 0x4c
					DistMeasFixed1104_400_mm -
					DistMeasTgtFixed1104_mm;
				OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800a656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a658:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a65c:	fb02 f303 	mul.w	r3, r2, r3
 800a660:	091b      	lsrs	r3, r3, #4
				OffsetMicroMeters = (OffsetFixed1104_mm
 800a662:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
				OffsetMicroMeters *= -1;
 800a666:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800a66a:	425b      	negs	r3, r3
 800a66c:	b29b      	uxth	r3, r3
 800a66e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
			}

			PALDevDataSet(Dev,
 800a672:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	; 0x5c
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	605a      	str	r2, [r3, #4]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800a67a:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800a67e:	78fb      	ldrb	r3, [r7, #3]
 800a680:	4313      	orrs	r3, r2
 800a682:	b2db      	uxtb	r3, r3
 800a684:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800a688:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a692:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a696:	b25b      	sxtb	r3, r3
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3760      	adds	r7, #96	; 0x60
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev,
				      uint8_t vcsel_period_pclks)
{
 800a6a0:	b490      	push	{r4, r7}
 800a6a2:	b086      	sub	sp, #24
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	 *  therefore set fixed value
	 */
	PLL_period_ps = 1655;
 800a6ac:	f240 6377 	movw	r3, #1655	; 0x677
 800a6b0:	f04f 0400 	mov.w	r4, #0
 800a6b4:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 800a6b8:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800a6bc:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800a6be:	78fb      	ldrb	r3, [r7, #3]
 800a6c0:	68fa      	ldr	r2, [r7, #12]
 800a6c2:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800a6c6:	693a      	ldr	r2, [r7, #16]
 800a6c8:	fb02 f303 	mul.w	r3, r2, r3
 800a6cc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800a6ce:	68bb      	ldr	r3, [r7, #8]
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3718      	adds	r7, #24
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bc90      	pop	{r4, r7}
 800a6d8:	4770      	bx	lr

0800a6da <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800a6da:	b480      	push	{r7}
 800a6dc:	b087      	sub	sp, #28
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d017      	beq.n	800a724 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	3b01      	subs	r3, #1
 800a6f8:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800a6fa:	e005      	b.n	800a708 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	085b      	lsrs	r3, r3, #1
 800a700:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800a702:	89fb      	ldrh	r3, [r7, #14]
 800a704:	3301      	adds	r3, #1
 800a706:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d1f4      	bne.n	800a6fc <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800a712:	89fb      	ldrh	r3, [r7, #14]
 800a714:	021b      	lsls	r3, r3, #8
 800a716:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	b29b      	uxth	r3, r3
 800a71c:	b2db      	uxtb	r3, r3
 800a71e:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800a720:	4413      	add	r3, r2
 800a722:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800a724:	8afb      	ldrh	r3, [r7, #22]

}
 800a726:	4618      	mov	r0, r3
 800a728:	371c      	adds	r7, #28
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr

0800a732 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800a732:	b480      	push	{r7}
 800a734:	b085      	sub	sp, #20
 800a736:	af00      	add	r7, sp, #0
 800a738:	4603      	mov	r3, r0
 800a73a:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800a73c:	2300      	movs	r3, #0
 800a73e:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800a740:	88fb      	ldrh	r3, [r7, #6]
 800a742:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800a744:	88fa      	ldrh	r2, [r7, #6]
 800a746:	0a12      	lsrs	r2, r2, #8
 800a748:	b292      	uxth	r2, r2
 800a74a:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800a74c:	3301      	adds	r3, #1
 800a74e:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800a750:	68fb      	ldr	r3, [r7, #12]
}
 800a752:	4618      	mov	r0, r3
 800a754:	3714      	adds	r7, #20
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr
	...

0800a760 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b088      	sub	sp, #32
 800a764:	af00      	add	r7, sp, #0
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	60b9      	str	r1, [r7, #8]
 800a76a:	4613      	mov	r3, r2
 800a76c:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800a76e:	2300      	movs	r3, #0
 800a770:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800a772:	79fb      	ldrb	r3, [r7, #7]
 800a774:	4619      	mov	r1, r3
 800a776:	68f8      	ldr	r0, [r7, #12]
 800a778:	f7ff ff92 	bl	800a6a0 <VL53L0X_calc_macro_period_ps>
 800a77c:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800a77e:	69bb      	ldr	r3, [r7, #24]
 800a780:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a784:	4a0a      	ldr	r2, [pc, #40]	; (800a7b0 <VL53L0X_calc_timeout_mclks+0x50>)
 800a786:	fba2 2303 	umull	r2, r3, r2, r3
 800a78a:	099b      	lsrs	r3, r3, #6
 800a78c:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a794:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	085b      	lsrs	r3, r3, #1
 800a79c:	441a      	add	r2, r3
	timeout_period_mclks =
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7a4:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 800a7a6:	69fb      	ldr	r3, [r7, #28]
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3720      	adds	r7, #32
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	10624dd3 	.word	0x10624dd3

0800a7b4 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b086      	sub	sp, #24
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	460b      	mov	r3, r1
 800a7be:	807b      	strh	r3, [r7, #2]
 800a7c0:	4613      	mov	r3, r2
 800a7c2:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800a7c8:	787b      	ldrb	r3, [r7, #1]
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f7ff ff67 	bl	800a6a0 <VL53L0X_calc_macro_period_ps>
 800a7d2:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a7da:	4a0a      	ldr	r2, [pc, #40]	; (800a804 <VL53L0X_calc_timeout_us+0x50>)
 800a7dc:	fba2 2303 	umull	r2, r3, r2, r3
 800a7e0:	099b      	lsrs	r3, r3, #6
 800a7e2:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800a7e4:	887b      	ldrh	r3, [r7, #2]
 800a7e6:	68fa      	ldr	r2, [r7, #12]
 800a7e8:	fb02 f303 	mul.w	r3, r2, r3
 800a7ec:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800a7f0:	4a04      	ldr	r2, [pc, #16]	; (800a804 <VL53L0X_calc_timeout_us+0x50>)
 800a7f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a7f6:	099b      	lsrs	r3, r3, #6
 800a7f8:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800a7fa:	697b      	ldr	r3, [r7, #20]
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3718      	adds	r7, #24
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}
 800a804:	10624dd3 	.word	0x10624dd3

0800a808 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b08a      	sub	sp, #40	; 0x28
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	60f8      	str	r0, [r7, #12]
 800a810:	460b      	mov	r3, r1
 800a812:	607a      	str	r2, [r7, #4]
 800a814:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a816:	2300      	movs	r3, #0
 800a818:	777b      	strb	r3, [r7, #29]
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800a81a:	2300      	movs	r3, #0
 800a81c:	76fb      	strb	r3, [r7, #27]
	uint32_t TimeoutMicroSeconds = 0;
 800a81e:	2300      	movs	r3, #0
 800a820:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t PreRangeEncodedTimeOut = 0;
 800a822:	2300      	movs	r3, #0
 800a824:	833b      	strh	r3, [r7, #24]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800a826:	2300      	movs	r3, #0
 800a828:	843b      	strh	r3, [r7, #32]
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800a82a:	7afb      	ldrb	r3, [r7, #11]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d005      	beq.n	800a83c <get_sequence_step_timeout+0x34>
 800a830:	7afb      	ldrb	r3, [r7, #11]
 800a832:	2b01      	cmp	r3, #1
 800a834:	d002      	beq.n	800a83c <get_sequence_step_timeout+0x34>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800a836:	7afb      	ldrb	r3, [r7, #11]
 800a838:	2b02      	cmp	r3, #2
 800a83a:	d124      	bne.n	800a886 <get_sequence_step_timeout+0x7e>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a83c:	f107 031c 	add.w	r3, r7, #28
 800a840:	461a      	mov	r2, r3
 800a842:	2100      	movs	r1, #0
 800a844:	68f8      	ldr	r0, [r7, #12]
 800a846:	f7fd f90b 	bl	8007a60 <VL53L0X_GetVcselPulsePeriod>
 800a84a:	4603      	mov	r3, r0
 800a84c:	777b      	strb	r3, [r7, #29]
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800a84e:	7f7b      	ldrb	r3, [r7, #29]
 800a850:	b25b      	sxtb	r3, r3
 800a852:	2b00      	cmp	r3, #0
 800a854:	d108      	bne.n	800a868 <get_sequence_step_timeout+0x60>
			Status = VL53L0X_RdByte(Dev,
 800a856:	f107 031b 	add.w	r3, r7, #27
 800a85a:	461a      	mov	r2, r3
 800a85c:	2146      	movs	r1, #70	; 0x46
 800a85e:	68f8      	ldr	r0, [r7, #12]
 800a860:	f001 fceb 	bl	800c23a <VL53L0X_RdByte>
 800a864:	4603      	mov	r3, r0
 800a866:	777b      	strb	r3, [r7, #29]
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800a868:	7efb      	ldrb	r3, [r7, #27]
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	4618      	mov	r0, r3
 800a86e:	f7ff ff60 	bl	800a732 <VL53L0X_decode_timeout>
 800a872:	4603      	mov	r3, r0
 800a874:	83fb      	strh	r3, [r7, #30]

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a876:	7f3a      	ldrb	r2, [r7, #28]
 800a878:	8bfb      	ldrh	r3, [r7, #30]
 800a87a:	4619      	mov	r1, r3
 800a87c:	68f8      	ldr	r0, [r7, #12]
 800a87e:	f7ff ff99 	bl	800a7b4 <VL53L0X_calc_timeout_us>
 800a882:	6278      	str	r0, [r7, #36]	; 0x24
 800a884:	e088      	b.n	800a998 <get_sequence_step_timeout+0x190>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800a886:	7afb      	ldrb	r3, [r7, #11]
 800a888:	2b03      	cmp	r3, #3
 800a88a:	d130      	bne.n	800a8ee <get_sequence_step_timeout+0xe6>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a88c:	f107 031c 	add.w	r3, r7, #28
 800a890:	461a      	mov	r2, r3
 800a892:	2100      	movs	r1, #0
 800a894:	68f8      	ldr	r0, [r7, #12]
 800a896:	f7fd f8e3 	bl	8007a60 <VL53L0X_GetVcselPulsePeriod>
 800a89a:	4603      	mov	r3, r0
 800a89c:	777b      	strb	r3, [r7, #29]
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800a89e:	7f7b      	ldrb	r3, [r7, #29]
 800a8a0:	b25b      	sxtb	r3, r3
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d178      	bne.n	800a998 <get_sequence_step_timeout+0x190>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a8a6:	f107 031c 	add.w	r3, r7, #28
 800a8aa:	461a      	mov	r2, r3
 800a8ac:	2100      	movs	r1, #0
 800a8ae:	68f8      	ldr	r0, [r7, #12]
 800a8b0:	f7fd f8d6 	bl	8007a60 <VL53L0X_GetVcselPulsePeriod>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	777b      	strb	r3, [r7, #29]
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800a8b8:	7f7b      	ldrb	r3, [r7, #29]
 800a8ba:	b25b      	sxtb	r3, r3
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d108      	bne.n	800a8d2 <get_sequence_step_timeout+0xca>
				Status = VL53L0X_RdWord(Dev,
 800a8c0:	f107 0318 	add.w	r3, r7, #24
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	2151      	movs	r1, #81	; 0x51
 800a8c8:	68f8      	ldr	r0, [r7, #12]
 800a8ca:	f001 fd3d 	bl	800c348 <VL53L0X_RdWord>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	777b      	strb	r3, [r7, #29]
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a8d2:	8b3b      	ldrh	r3, [r7, #24]
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7ff ff2c 	bl	800a732 <VL53L0X_decode_timeout>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	847b      	strh	r3, [r7, #34]	; 0x22
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a8de:	7f3a      	ldrb	r2, [r7, #28]
 800a8e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	68f8      	ldr	r0, [r7, #12]
 800a8e6:	f7ff ff65 	bl	800a7b4 <VL53L0X_calc_timeout_us>
 800a8ea:	6278      	str	r0, [r7, #36]	; 0x24
 800a8ec:	e054      	b.n	800a998 <get_sequence_step_timeout+0x190>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800a8ee:	7afb      	ldrb	r3, [r7, #11]
 800a8f0:	2b04      	cmp	r3, #4
 800a8f2:	d151      	bne.n	800a998 <get_sequence_step_timeout+0x190>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a8f4:	f107 0310 	add.w	r3, r7, #16
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	68f8      	ldr	r0, [r7, #12]
 800a8fc:	f7fd f9bc 	bl	8007c78 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800a900:	2300      	movs	r3, #0
 800a902:	847b      	strh	r3, [r7, #34]	; 0x22

		if (SchedulerSequenceSteps.PreRangeOn) {
 800a904:	7cfb      	ldrb	r3, [r7, #19]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d01b      	beq.n	800a942 <get_sequence_step_timeout+0x13a>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a90a:	f107 031c 	add.w	r3, r7, #28
 800a90e:	461a      	mov	r2, r3
 800a910:	2100      	movs	r1, #0
 800a912:	68f8      	ldr	r0, [r7, #12]
 800a914:	f7fd f8a4 	bl	8007a60 <VL53L0X_GetVcselPulsePeriod>
 800a918:	4603      	mov	r3, r0
 800a91a:	777b      	strb	r3, [r7, #29]
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS)
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800a91c:	7f7b      	ldrb	r3, [r7, #29]
 800a91e:	b25b      	sxtb	r3, r3
 800a920:	2b00      	cmp	r3, #0
 800a922:	d10e      	bne.n	800a942 <get_sequence_step_timeout+0x13a>
				Status = VL53L0X_RdWord(Dev,
 800a924:	f107 0318 	add.w	r3, r7, #24
 800a928:	461a      	mov	r2, r3
 800a92a:	2151      	movs	r1, #81	; 0x51
 800a92c:	68f8      	ldr	r0, [r7, #12]
 800a92e:	f001 fd0b 	bl	800c348 <VL53L0X_RdWord>
 800a932:	4603      	mov	r3, r0
 800a934:	777b      	strb	r3, [r7, #29]
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a936:	8b3b      	ldrh	r3, [r7, #24]
 800a938:	4618      	mov	r0, r3
 800a93a:	f7ff fefa 	bl	800a732 <VL53L0X_decode_timeout>
 800a93e:	4603      	mov	r3, r0
 800a940:	847b      	strh	r3, [r7, #34]	; 0x22
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800a942:	7f7b      	ldrb	r3, [r7, #29]
 800a944:	b25b      	sxtb	r3, r3
 800a946:	2b00      	cmp	r3, #0
 800a948:	d108      	bne.n	800a95c <get_sequence_step_timeout+0x154>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a94a:	f107 031c 	add.w	r3, r7, #28
 800a94e:	461a      	mov	r2, r3
 800a950:	2101      	movs	r1, #1
 800a952:	68f8      	ldr	r0, [r7, #12]
 800a954:	f7fd f884 	bl	8007a60 <VL53L0X_GetVcselPulsePeriod>
 800a958:	4603      	mov	r3, r0
 800a95a:	777b      	strb	r3, [r7, #29]
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800a95c:	7f7b      	ldrb	r3, [r7, #29]
 800a95e:	b25b      	sxtb	r3, r3
 800a960:	2b00      	cmp	r3, #0
 800a962:	d10e      	bne.n	800a982 <get_sequence_step_timeout+0x17a>
			Status = VL53L0X_RdWord(Dev,
 800a964:	f107 0316 	add.w	r3, r7, #22
 800a968:	461a      	mov	r2, r3
 800a96a:	2171      	movs	r1, #113	; 0x71
 800a96c:	68f8      	ldr	r0, [r7, #12]
 800a96e:	f001 fceb 	bl	800c348 <VL53L0X_RdWord>
 800a972:	4603      	mov	r3, r0
 800a974:	777b      	strb	r3, [r7, #29]
			    VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
			    &FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a976:	8afb      	ldrh	r3, [r7, #22]
 800a978:	4618      	mov	r0, r3
 800a97a:	f7ff feda 	bl	800a732 <VL53L0X_decode_timeout>
 800a97e:	4603      	mov	r3, r0
 800a980:	843b      	strh	r3, [r7, #32]
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800a982:	8c3a      	ldrh	r2, [r7, #32]
 800a984:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a986:	1ad3      	subs	r3, r2, r3
 800a988:	843b      	strh	r3, [r7, #32]
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a98a:	7f3a      	ldrb	r2, [r7, #28]
 800a98c:	8c3b      	ldrh	r3, [r7, #32]
 800a98e:	4619      	mov	r1, r3
 800a990:	68f8      	ldr	r0, [r7, #12]
 800a992:	f7ff ff0f 	bl	800a7b4 <VL53L0X_calc_timeout_us>
 800a996:	6278      	str	r0, [r7, #36]	; 0x24
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a99c:	601a      	str	r2, [r3, #0]

	return Status;
 800a99e:	7f7b      	ldrb	r3, [r7, #29]
 800a9a0:	b25b      	sxtb	r3, r3
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3728      	adds	r7, #40	; 0x28
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b08a      	sub	sp, #40	; 0x28
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	60f8      	str	r0, [r7, #12]
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	607a      	str	r2, [r7, #4]
 800a9b6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	76fb      	strb	r3, [r7, #27]
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800a9bc:	7afb      	ldrb	r3, [r7, #11]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d005      	beq.n	800a9ce <set_sequence_step_timeout+0x24>
 800a9c2:	7afb      	ldrb	r3, [r7, #11]
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d002      	beq.n	800a9ce <set_sequence_step_timeout+0x24>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800a9c8:	7afb      	ldrb	r3, [r7, #11]
 800a9ca:	2b02      	cmp	r3, #2
 800a9cc:	d136      	bne.n	800aa3c <set_sequence_step_timeout+0x92>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a9ce:	f107 031a 	add.w	r3, r7, #26
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	2100      	movs	r1, #0
 800a9d6:	68f8      	ldr	r0, [r7, #12]
 800a9d8:	f7fd f842 	bl	8007a60 <VL53L0X_GetVcselPulsePeriod>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	76fb      	strb	r3, [r7, #27]
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800a9e0:	7efb      	ldrb	r3, [r7, #27]
 800a9e2:	b25b      	sxtb	r3, r3
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d11a      	bne.n	800aa1e <set_sequence_step_timeout+0x74>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800a9e8:	7ebb      	ldrb	r3, [r7, #26]
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	6879      	ldr	r1, [r7, #4]
 800a9ee:	68f8      	ldr	r0, [r7, #12]
 800a9f0:	f7ff feb6 	bl	800a760 <VL53L0X_calc_timeout_mclks>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800a9f8:	8bbb      	ldrh	r3, [r7, #28]
 800a9fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9fe:	d903      	bls.n	800aa08 <set_sequence_step_timeout+0x5e>
				MsrcEncodedTimeOut = 255;
 800aa00:	23ff      	movs	r3, #255	; 0xff
 800aa02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aa06:	e004      	b.n	800aa12 <set_sequence_step_timeout+0x68>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800aa08:	8bbb      	ldrh	r3, [r7, #28]
 800aa0a:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800aa0c:	3b01      	subs	r3, #1
 800aa0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800aa12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa16:	b29a      	uxth	r2, r3
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800aa1e:	7efb      	ldrb	r3, [r7, #27]
 800aa20:	b25b      	sxtb	r3, r3
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	f040 80a3 	bne.w	800ab6e <set_sequence_step_timeout+0x1c4>
			Status = VL53L0X_WrByte(Dev,
 800aa28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	2146      	movs	r1, #70	; 0x46
 800aa30:	68f8      	ldr	r0, [r7, #12]
 800aa32:	f001 fcfd 	bl	800c430 <VL53L0X_WrByte>
 800aa36:	4603      	mov	r3, r0
 800aa38:	76fb      	strb	r3, [r7, #27]
		if (Status == VL53L0X_ERROR_NONE) {
 800aa3a:	e098      	b.n	800ab6e <set_sequence_step_timeout+0x1c4>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800aa3c:	7afb      	ldrb	r3, [r7, #11]
 800aa3e:	2b03      	cmp	r3, #3
 800aa40:	d133      	bne.n	800aaaa <set_sequence_step_timeout+0x100>

			if (Status == VL53L0X_ERROR_NONE) {
 800aa42:	7efb      	ldrb	r3, [r7, #27]
 800aa44:	b25b      	sxtb	r3, r3
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d11a      	bne.n	800aa80 <set_sequence_step_timeout+0xd6>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800aa4a:	f107 031a 	add.w	r3, r7, #26
 800aa4e:	461a      	mov	r2, r3
 800aa50:	2100      	movs	r1, #0
 800aa52:	68f8      	ldr	r0, [r7, #12]
 800aa54:	f7fd f804 	bl	8007a60 <VL53L0X_GetVcselPulsePeriod>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	76fb      	strb	r3, [r7, #27]
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800aa5c:	7ebb      	ldrb	r3, [r7, #26]
 800aa5e:	461a      	mov	r2, r3
 800aa60:	6879      	ldr	r1, [r7, #4]
 800aa62:	68f8      	ldr	r0, [r7, #12]
 800aa64:	f7ff fe7c 	bl	800a760 <VL53L0X_calc_timeout_mclks>
 800aa68:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800aa6a:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800aa6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7ff fe33 	bl	800a6da <VL53L0X_encode_timeout>
 800aa74:	4603      	mov	r3, r0
 800aa76:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800aa78:	8b3a      	ldrh	r2, [r7, #24]
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800aa80:	7efb      	ldrb	r3, [r7, #27]
 800aa82:	b25b      	sxtb	r3, r3
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d107      	bne.n	800aa98 <set_sequence_step_timeout+0xee>
				Status = VL53L0X_WrWord(Dev,
 800aa88:	8b3b      	ldrh	r3, [r7, #24]
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	2151      	movs	r1, #81	; 0x51
 800aa8e:	68f8      	ldr	r0, [r7, #12]
 800aa90:	f001 fcf2 	bl	800c478 <VL53L0X_WrWord>
 800aa94:	4603      	mov	r3, r0
 800aa96:	76fb      	strb	r3, [r7, #27]
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800aa98:	7efb      	ldrb	r3, [r7, #27]
 800aa9a:	b25b      	sxtb	r3, r3
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d166      	bne.n	800ab6e <set_sequence_step_timeout+0x1c4>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	687a      	ldr	r2, [r7, #4]
 800aaa4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 800aaa8:	e061      	b.n	800ab6e <set_sequence_step_timeout+0x1c4>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800aaaa:	7afb      	ldrb	r3, [r7, #11]
 800aaac:	2b04      	cmp	r3, #4
 800aaae:	d15c      	bne.n	800ab6a <set_sequence_step_timeout+0x1c0>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800aab0:	f107 0310 	add.w	r3, r7, #16
 800aab4:	4619      	mov	r1, r3
 800aab6:	68f8      	ldr	r0, [r7, #12]
 800aab8:	f7fd f8de 	bl	8007c78 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800aabc:	2300      	movs	r3, #0
 800aabe:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800aac0:	7cfb      	ldrb	r3, [r7, #19]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d01b      	beq.n	800aafe <set_sequence_step_timeout+0x154>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800aac6:	f107 031a 	add.w	r3, r7, #26
 800aaca:	461a      	mov	r2, r3
 800aacc:	2100      	movs	r1, #0
 800aace:	68f8      	ldr	r0, [r7, #12]
 800aad0:	f7fc ffc6 	bl	8007a60 <VL53L0X_GetVcselPulsePeriod>
 800aad4:	4603      	mov	r3, r0
 800aad6:	76fb      	strb	r3, [r7, #27]
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS)
				 */
				if (Status == VL53L0X_ERROR_NONE) {
 800aad8:	7efb      	ldrb	r3, [r7, #27]
 800aada:	b25b      	sxtb	r3, r3
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d10e      	bne.n	800aafe <set_sequence_step_timeout+0x154>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800aae0:	f107 0318 	add.w	r3, r7, #24
 800aae4:	461a      	mov	r2, r3
 800aae6:	2151      	movs	r1, #81	; 0x51
 800aae8:	68f8      	ldr	r0, [r7, #12]
 800aaea:	f001 fc2d 	bl	800c348 <VL53L0X_RdWord>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	76fb      	strb	r3, [r7, #27]
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800aaf2:	8b3b      	ldrh	r3, [r7, #24]
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f7ff fe1c 	bl	800a732 <VL53L0X_decode_timeout>
 800aafa:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800aafc:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800aafe:	7efb      	ldrb	r3, [r7, #27]
 800ab00:	b25b      	sxtb	r3, r3
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d108      	bne.n	800ab18 <set_sequence_step_timeout+0x16e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ab06:	f107 031a 	add.w	r3, r7, #26
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	2101      	movs	r1, #1
 800ab0e:	68f8      	ldr	r0, [r7, #12]
 800ab10:	f7fc ffa6 	bl	8007a60 <VL53L0X_GetVcselPulsePeriod>
 800ab14:	4603      	mov	r3, r0
 800ab16:	76fb      	strb	r3, [r7, #27]
					    VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					    &CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800ab18:	7efb      	ldrb	r3, [r7, #27]
 800ab1a:	b25b      	sxtb	r3, r3
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d126      	bne.n	800ab6e <set_sequence_step_timeout+0x1c4>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800ab20:	7ebb      	ldrb	r3, [r7, #26]
				FinalRangeTimeOutMClks =
 800ab22:	461a      	mov	r2, r3
 800ab24:	6879      	ldr	r1, [r7, #4]
 800ab26:	68f8      	ldr	r0, [r7, #12]
 800ab28:	f7ff fe1a 	bl	800a760 <VL53L0X_calc_timeout_mclks>
 800ab2c:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800ab2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ab30:	6a3a      	ldr	r2, [r7, #32]
 800ab32:	4413      	add	r3, r2
 800ab34:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
 800ab36:	6a38      	ldr	r0, [r7, #32]
 800ab38:	f7ff fdcf 	bl	800a6da <VL53L0X_encode_timeout>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	83fb      	strh	r3, [r7, #30]
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);

				if (Status == VL53L0X_ERROR_NONE) {
 800ab40:	7efb      	ldrb	r3, [r7, #27]
 800ab42:	b25b      	sxtb	r3, r3
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d107      	bne.n	800ab58 <set_sequence_step_timeout+0x1ae>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800ab48:	8bfb      	ldrh	r3, [r7, #30]
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	2171      	movs	r1, #113	; 0x71
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	f001 fc92 	bl	800c478 <VL53L0X_WrWord>
 800ab54:	4603      	mov	r3, r0
 800ab56:	76fb      	strb	r3, [r7, #27]
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800ab58:	7efb      	ldrb	r3, [r7, #27]
 800ab5a:	b25b      	sxtb	r3, r3
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d106      	bne.n	800ab6e <set_sequence_step_timeout+0x1c4>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 800ab68:	e001      	b.n	800ab6e <set_sequence_step_timeout+0x1c4>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ab6a:	23fc      	movs	r3, #252	; 0xfc
 800ab6c:	76fb      	strb	r3, [r7, #27]

	}
	return Status;
 800ab6e:	7efb      	ldrb	r3, [r7, #27]
 800ab70:	b25b      	sxtb	r3, r3
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3728      	adds	r7, #40	; 0x28
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800ab7a:	b580      	push	{r7, lr}
 800ab7c:	b08a      	sub	sp, #40	; 0x28
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
 800ab82:	460b      	mov	r3, r1
 800ab84:	70fb      	strb	r3, [r7, #3]
 800ab86:	4613      	mov	r3, r2
 800ab88:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	76fb      	strb	r3, [r7, #27]
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800ab8e:	230c      	movs	r3, #12
 800ab90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800ab94:	2312      	movs	r3, #18
 800ab96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800ab9a:	2308      	movs	r3, #8
 800ab9c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800aba0:	230e      	movs	r3, #14
 800aba2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800aba6:	2300      	movs	r3, #0
 800aba8:	72fb      	strb	r3, [r7, #11]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800abaa:	78bb      	ldrb	r3, [r7, #2]
 800abac:	f003 0301 	and.w	r3, r3, #1
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d002      	beq.n	800abbc <VL53L0X_set_vcsel_pulse_period+0x42>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800abb6:	23fc      	movs	r3, #252	; 0xfc
 800abb8:	76fb      	strb	r3, [r7, #27]
 800abba:	e01e      	b.n	800abfa <VL53L0X_set_vcsel_pulse_period+0x80>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800abbc:	78fb      	ldrb	r3, [r7, #3]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d10c      	bne.n	800abdc <VL53L0X_set_vcsel_pulse_period+0x62>
 800abc2:	78ba      	ldrb	r2, [r7, #2]
 800abc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abc8:	429a      	cmp	r2, r3
 800abca:	d304      	bcc.n	800abd6 <VL53L0X_set_vcsel_pulse_period+0x5c>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800abcc:	78ba      	ldrb	r2, [r7, #2]
 800abce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d902      	bls.n	800abdc <VL53L0X_set_vcsel_pulse_period+0x62>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800abd6:	23fc      	movs	r3, #252	; 0xfc
 800abd8:	76fb      	strb	r3, [r7, #27]
 800abda:	e00e      	b.n	800abfa <VL53L0X_set_vcsel_pulse_period+0x80>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800abdc:	78fb      	ldrb	r3, [r7, #3]
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d10b      	bne.n	800abfa <VL53L0X_set_vcsel_pulse_period+0x80>
 800abe2:	78ba      	ldrb	r2, [r7, #2]
 800abe4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800abe8:	429a      	cmp	r2, r3
 800abea:	d304      	bcc.n	800abf6 <VL53L0X_set_vcsel_pulse_period+0x7c>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800abec:	78ba      	ldrb	r2, [r7, #2]
 800abee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d901      	bls.n	800abfa <VL53L0X_set_vcsel_pulse_period+0x80>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800abf6:	23fc      	movs	r3, #252	; 0xfc
 800abf8:	76fb      	strb	r3, [r7, #27]
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800abfa:	7efb      	ldrb	r3, [r7, #27]
 800abfc:	b25b      	sxtb	r3, r3
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d002      	beq.n	800ac08 <VL53L0X_set_vcsel_pulse_period+0x8e>
		return Status;
 800ac02:	7efb      	ldrb	r3, [r7, #27]
 800ac04:	b25b      	sxtb	r3, r3
 800ac06:	e21e      	b.n	800b046 <VL53L0X_set_vcsel_pulse_period+0x4cc>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800ac08:	78fb      	ldrb	r3, [r7, #3]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d148      	bne.n	800aca0 <VL53L0X_set_vcsel_pulse_period+0x126>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800ac0e:	78bb      	ldrb	r3, [r7, #2]
 800ac10:	2b0c      	cmp	r3, #12
 800ac12:	d10e      	bne.n	800ac32 <VL53L0X_set_vcsel_pulse_period+0xb8>

			Status = VL53L0X_WrByte(Dev,
 800ac14:	2218      	movs	r2, #24
 800ac16:	2157      	movs	r1, #87	; 0x57
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f001 fc09 	bl	800c430 <VL53L0X_WrByte>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	76fb      	strb	r3, [r7, #27]
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800ac22:	2208      	movs	r2, #8
 800ac24:	2156      	movs	r1, #86	; 0x56
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f001 fc02 	bl	800c430 <VL53L0X_WrByte>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	76fb      	strb	r3, [r7, #27]
 800ac30:	e171      	b.n	800af16 <VL53L0X_set_vcsel_pulse_period+0x39c>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800ac32:	78bb      	ldrb	r3, [r7, #2]
 800ac34:	2b0e      	cmp	r3, #14
 800ac36:	d10e      	bne.n	800ac56 <VL53L0X_set_vcsel_pulse_period+0xdc>

			Status = VL53L0X_WrByte(Dev,
 800ac38:	2230      	movs	r2, #48	; 0x30
 800ac3a:	2157      	movs	r1, #87	; 0x57
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f001 fbf7 	bl	800c430 <VL53L0X_WrByte>
 800ac42:	4603      	mov	r3, r0
 800ac44:	76fb      	strb	r3, [r7, #27]
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800ac46:	2208      	movs	r2, #8
 800ac48:	2156      	movs	r1, #86	; 0x56
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f001 fbf0 	bl	800c430 <VL53L0X_WrByte>
 800ac50:	4603      	mov	r3, r0
 800ac52:	76fb      	strb	r3, [r7, #27]
 800ac54:	e15f      	b.n	800af16 <VL53L0X_set_vcsel_pulse_period+0x39c>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800ac56:	78bb      	ldrb	r3, [r7, #2]
 800ac58:	2b10      	cmp	r3, #16
 800ac5a:	d10e      	bne.n	800ac7a <VL53L0X_set_vcsel_pulse_period+0x100>

			Status = VL53L0X_WrByte(Dev,
 800ac5c:	2240      	movs	r2, #64	; 0x40
 800ac5e:	2157      	movs	r1, #87	; 0x57
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f001 fbe5 	bl	800c430 <VL53L0X_WrByte>
 800ac66:	4603      	mov	r3, r0
 800ac68:	76fb      	strb	r3, [r7, #27]
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800ac6a:	2208      	movs	r2, #8
 800ac6c:	2156      	movs	r1, #86	; 0x56
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f001 fbde 	bl	800c430 <VL53L0X_WrByte>
 800ac74:	4603      	mov	r3, r0
 800ac76:	76fb      	strb	r3, [r7, #27]
 800ac78:	e14d      	b.n	800af16 <VL53L0X_set_vcsel_pulse_period+0x39c>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800ac7a:	78bb      	ldrb	r3, [r7, #2]
 800ac7c:	2b12      	cmp	r3, #18
 800ac7e:	f040 814a 	bne.w	800af16 <VL53L0X_set_vcsel_pulse_period+0x39c>

			Status = VL53L0X_WrByte(Dev,
 800ac82:	2250      	movs	r2, #80	; 0x50
 800ac84:	2157      	movs	r1, #87	; 0x57
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f001 fbd2 	bl	800c430 <VL53L0X_WrByte>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	76fb      	strb	r3, [r7, #27]
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800ac90:	2208      	movs	r2, #8
 800ac92:	2156      	movs	r1, #86	; 0x56
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f001 fbcb 	bl	800c430 <VL53L0X_WrByte>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	76fb      	strb	r3, [r7, #27]
 800ac9e:	e13a      	b.n	800af16 <VL53L0X_set_vcsel_pulse_period+0x39c>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800aca0:	78fb      	ldrb	r3, [r7, #3]
 800aca2:	2b01      	cmp	r3, #1
 800aca4:	f040 8137 	bne.w	800af16 <VL53L0X_set_vcsel_pulse_period+0x39c>

		if (VCSELPulsePeriodPCLK == 8) {
 800aca8:	78bb      	ldrb	r3, [r7, #2]
 800acaa:	2b08      	cmp	r3, #8
 800acac:	d14a      	bne.n	800ad44 <VL53L0X_set_vcsel_pulse_period+0x1ca>

			Status = VL53L0X_WrByte(Dev,
 800acae:	2210      	movs	r2, #16
 800acb0:	2148      	movs	r1, #72	; 0x48
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f001 fbbc 	bl	800c430 <VL53L0X_WrByte>
 800acb8:	4603      	mov	r3, r0
 800acba:	76fb      	strb	r3, [r7, #27]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800acbc:	2208      	movs	r2, #8
 800acbe:	2147      	movs	r1, #71	; 0x47
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f001 fbb5 	bl	800c430 <VL53L0X_WrByte>
 800acc6:	4603      	mov	r3, r0
 800acc8:	76fb      	strb	r3, [r7, #27]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800acca:	2202      	movs	r2, #2
 800accc:	2132      	movs	r1, #50	; 0x32
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f001 fbae 	bl	800c430 <VL53L0X_WrByte>
 800acd4:	4603      	mov	r3, r0
 800acd6:	461a      	mov	r2, r3
 800acd8:	7efb      	ldrb	r3, [r7, #27]
 800acda:	b25b      	sxtb	r3, r3
 800acdc:	4313      	orrs	r3, r2
 800acde:	b25b      	sxtb	r3, r3
 800ace0:	76fb      	strb	r3, [r7, #27]
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800ace2:	220c      	movs	r2, #12
 800ace4:	2130      	movs	r1, #48	; 0x30
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f001 fba2 	bl	800c430 <VL53L0X_WrByte>
 800acec:	4603      	mov	r3, r0
 800acee:	461a      	mov	r2, r3
 800acf0:	7efb      	ldrb	r3, [r7, #27]
 800acf2:	b25b      	sxtb	r3, r3
 800acf4:	4313      	orrs	r3, r2
 800acf6:	b25b      	sxtb	r3, r3
 800acf8:	76fb      	strb	r3, [r7, #27]
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800acfa:	2201      	movs	r2, #1
 800acfc:	21ff      	movs	r1, #255	; 0xff
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f001 fb96 	bl	800c430 <VL53L0X_WrByte>
 800ad04:	4603      	mov	r3, r0
 800ad06:	461a      	mov	r2, r3
 800ad08:	7efb      	ldrb	r3, [r7, #27]
 800ad0a:	b25b      	sxtb	r3, r3
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	b25b      	sxtb	r3, r3
 800ad10:	76fb      	strb	r3, [r7, #27]
			Status |= VL53L0X_WrByte(Dev,
 800ad12:	2230      	movs	r2, #48	; 0x30
 800ad14:	2130      	movs	r1, #48	; 0x30
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f001 fb8a 	bl	800c430 <VL53L0X_WrByte>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	461a      	mov	r2, r3
 800ad20:	7efb      	ldrb	r3, [r7, #27]
 800ad22:	b25b      	sxtb	r3, r3
 800ad24:	4313      	orrs	r3, r2
 800ad26:	b25b      	sxtb	r3, r3
 800ad28:	76fb      	strb	r3, [r7, #27]
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	21ff      	movs	r1, #255	; 0xff
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f001 fb7e 	bl	800c430 <VL53L0X_WrByte>
 800ad34:	4603      	mov	r3, r0
 800ad36:	461a      	mov	r2, r3
 800ad38:	7efb      	ldrb	r3, [r7, #27]
 800ad3a:	b25b      	sxtb	r3, r3
 800ad3c:	4313      	orrs	r3, r2
 800ad3e:	b25b      	sxtb	r3, r3
 800ad40:	76fb      	strb	r3, [r7, #27]
 800ad42:	e0e8      	b.n	800af16 <VL53L0X_set_vcsel_pulse_period+0x39c>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800ad44:	78bb      	ldrb	r3, [r7, #2]
 800ad46:	2b0a      	cmp	r3, #10
 800ad48:	d14a      	bne.n	800ade0 <VL53L0X_set_vcsel_pulse_period+0x266>

			Status = VL53L0X_WrByte(Dev,
 800ad4a:	2228      	movs	r2, #40	; 0x28
 800ad4c:	2148      	movs	r1, #72	; 0x48
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f001 fb6e 	bl	800c430 <VL53L0X_WrByte>
 800ad54:	4603      	mov	r3, r0
 800ad56:	76fb      	strb	r3, [r7, #27]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800ad58:	2208      	movs	r2, #8
 800ad5a:	2147      	movs	r1, #71	; 0x47
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f001 fb67 	bl	800c430 <VL53L0X_WrByte>
 800ad62:	4603      	mov	r3, r0
 800ad64:	76fb      	strb	r3, [r7, #27]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800ad66:	2203      	movs	r2, #3
 800ad68:	2132      	movs	r1, #50	; 0x32
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f001 fb60 	bl	800c430 <VL53L0X_WrByte>
 800ad70:	4603      	mov	r3, r0
 800ad72:	461a      	mov	r2, r3
 800ad74:	7efb      	ldrb	r3, [r7, #27]
 800ad76:	b25b      	sxtb	r3, r3
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	b25b      	sxtb	r3, r3
 800ad7c:	76fb      	strb	r3, [r7, #27]
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800ad7e:	2209      	movs	r2, #9
 800ad80:	2130      	movs	r1, #48	; 0x30
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f001 fb54 	bl	800c430 <VL53L0X_WrByte>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	7efb      	ldrb	r3, [r7, #27]
 800ad8e:	b25b      	sxtb	r3, r3
 800ad90:	4313      	orrs	r3, r2
 800ad92:	b25b      	sxtb	r3, r3
 800ad94:	76fb      	strb	r3, [r7, #27]
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800ad96:	2201      	movs	r2, #1
 800ad98:	21ff      	movs	r1, #255	; 0xff
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f001 fb48 	bl	800c430 <VL53L0X_WrByte>
 800ada0:	4603      	mov	r3, r0
 800ada2:	461a      	mov	r2, r3
 800ada4:	7efb      	ldrb	r3, [r7, #27]
 800ada6:	b25b      	sxtb	r3, r3
 800ada8:	4313      	orrs	r3, r2
 800adaa:	b25b      	sxtb	r3, r3
 800adac:	76fb      	strb	r3, [r7, #27]
			Status |= VL53L0X_WrByte(Dev,
 800adae:	2220      	movs	r2, #32
 800adb0:	2130      	movs	r1, #48	; 0x30
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f001 fb3c 	bl	800c430 <VL53L0X_WrByte>
 800adb8:	4603      	mov	r3, r0
 800adba:	461a      	mov	r2, r3
 800adbc:	7efb      	ldrb	r3, [r7, #27]
 800adbe:	b25b      	sxtb	r3, r3
 800adc0:	4313      	orrs	r3, r2
 800adc2:	b25b      	sxtb	r3, r3
 800adc4:	76fb      	strb	r3, [r7, #27]
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800adc6:	2200      	movs	r2, #0
 800adc8:	21ff      	movs	r1, #255	; 0xff
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f001 fb30 	bl	800c430 <VL53L0X_WrByte>
 800add0:	4603      	mov	r3, r0
 800add2:	461a      	mov	r2, r3
 800add4:	7efb      	ldrb	r3, [r7, #27]
 800add6:	b25b      	sxtb	r3, r3
 800add8:	4313      	orrs	r3, r2
 800adda:	b25b      	sxtb	r3, r3
 800addc:	76fb      	strb	r3, [r7, #27]
 800adde:	e09a      	b.n	800af16 <VL53L0X_set_vcsel_pulse_period+0x39c>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800ade0:	78bb      	ldrb	r3, [r7, #2]
 800ade2:	2b0c      	cmp	r3, #12
 800ade4:	d14a      	bne.n	800ae7c <VL53L0X_set_vcsel_pulse_period+0x302>

			Status = VL53L0X_WrByte(Dev,
 800ade6:	2238      	movs	r2, #56	; 0x38
 800ade8:	2148      	movs	r1, #72	; 0x48
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f001 fb20 	bl	800c430 <VL53L0X_WrByte>
 800adf0:	4603      	mov	r3, r0
 800adf2:	76fb      	strb	r3, [r7, #27]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800adf4:	2208      	movs	r2, #8
 800adf6:	2147      	movs	r1, #71	; 0x47
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f001 fb19 	bl	800c430 <VL53L0X_WrByte>
 800adfe:	4603      	mov	r3, r0
 800ae00:	76fb      	strb	r3, [r7, #27]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800ae02:	2203      	movs	r2, #3
 800ae04:	2132      	movs	r1, #50	; 0x32
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f001 fb12 	bl	800c430 <VL53L0X_WrByte>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	461a      	mov	r2, r3
 800ae10:	7efb      	ldrb	r3, [r7, #27]
 800ae12:	b25b      	sxtb	r3, r3
 800ae14:	4313      	orrs	r3, r2
 800ae16:	b25b      	sxtb	r3, r3
 800ae18:	76fb      	strb	r3, [r7, #27]
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800ae1a:	2208      	movs	r2, #8
 800ae1c:	2130      	movs	r1, #48	; 0x30
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f001 fb06 	bl	800c430 <VL53L0X_WrByte>
 800ae24:	4603      	mov	r3, r0
 800ae26:	461a      	mov	r2, r3
 800ae28:	7efb      	ldrb	r3, [r7, #27]
 800ae2a:	b25b      	sxtb	r3, r3
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	b25b      	sxtb	r3, r3
 800ae30:	76fb      	strb	r3, [r7, #27]
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800ae32:	2201      	movs	r2, #1
 800ae34:	21ff      	movs	r1, #255	; 0xff
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f001 fafa 	bl	800c430 <VL53L0X_WrByte>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	461a      	mov	r2, r3
 800ae40:	7efb      	ldrb	r3, [r7, #27]
 800ae42:	b25b      	sxtb	r3, r3
 800ae44:	4313      	orrs	r3, r2
 800ae46:	b25b      	sxtb	r3, r3
 800ae48:	76fb      	strb	r3, [r7, #27]
			Status |= VL53L0X_WrByte(Dev,
 800ae4a:	2220      	movs	r2, #32
 800ae4c:	2130      	movs	r1, #48	; 0x30
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f001 faee 	bl	800c430 <VL53L0X_WrByte>
 800ae54:	4603      	mov	r3, r0
 800ae56:	461a      	mov	r2, r3
 800ae58:	7efb      	ldrb	r3, [r7, #27]
 800ae5a:	b25b      	sxtb	r3, r3
 800ae5c:	4313      	orrs	r3, r2
 800ae5e:	b25b      	sxtb	r3, r3
 800ae60:	76fb      	strb	r3, [r7, #27]
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800ae62:	2200      	movs	r2, #0
 800ae64:	21ff      	movs	r1, #255	; 0xff
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f001 fae2 	bl	800c430 <VL53L0X_WrByte>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	461a      	mov	r2, r3
 800ae70:	7efb      	ldrb	r3, [r7, #27]
 800ae72:	b25b      	sxtb	r3, r3
 800ae74:	4313      	orrs	r3, r2
 800ae76:	b25b      	sxtb	r3, r3
 800ae78:	76fb      	strb	r3, [r7, #27]
 800ae7a:	e04c      	b.n	800af16 <VL53L0X_set_vcsel_pulse_period+0x39c>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800ae7c:	78bb      	ldrb	r3, [r7, #2]
 800ae7e:	2b0e      	cmp	r3, #14
 800ae80:	d149      	bne.n	800af16 <VL53L0X_set_vcsel_pulse_period+0x39c>

			Status = VL53L0X_WrByte(Dev,
 800ae82:	2248      	movs	r2, #72	; 0x48
 800ae84:	2148      	movs	r1, #72	; 0x48
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f001 fad2 	bl	800c430 <VL53L0X_WrByte>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	76fb      	strb	r3, [r7, #27]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800ae90:	2208      	movs	r2, #8
 800ae92:	2147      	movs	r1, #71	; 0x47
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f001 facb 	bl	800c430 <VL53L0X_WrByte>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	76fb      	strb	r3, [r7, #27]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800ae9e:	2203      	movs	r2, #3
 800aea0:	2132      	movs	r1, #50	; 0x32
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f001 fac4 	bl	800c430 <VL53L0X_WrByte>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	461a      	mov	r2, r3
 800aeac:	7efb      	ldrb	r3, [r7, #27]
 800aeae:	b25b      	sxtb	r3, r3
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	b25b      	sxtb	r3, r3
 800aeb4:	76fb      	strb	r3, [r7, #27]
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800aeb6:	2207      	movs	r2, #7
 800aeb8:	2130      	movs	r1, #48	; 0x30
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f001 fab8 	bl	800c430 <VL53L0X_WrByte>
 800aec0:	4603      	mov	r3, r0
 800aec2:	461a      	mov	r2, r3
 800aec4:	7efb      	ldrb	r3, [r7, #27]
 800aec6:	b25b      	sxtb	r3, r3
 800aec8:	4313      	orrs	r3, r2
 800aeca:	b25b      	sxtb	r3, r3
 800aecc:	76fb      	strb	r3, [r7, #27]
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800aece:	2201      	movs	r2, #1
 800aed0:	21ff      	movs	r1, #255	; 0xff
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f001 faac 	bl	800c430 <VL53L0X_WrByte>
 800aed8:	4603      	mov	r3, r0
 800aeda:	461a      	mov	r2, r3
 800aedc:	7efb      	ldrb	r3, [r7, #27]
 800aede:	b25b      	sxtb	r3, r3
 800aee0:	4313      	orrs	r3, r2
 800aee2:	b25b      	sxtb	r3, r3
 800aee4:	76fb      	strb	r3, [r7, #27]
			Status |= VL53L0X_WrByte(Dev,
 800aee6:	2220      	movs	r2, #32
 800aee8:	2130      	movs	r1, #48	; 0x30
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f001 faa0 	bl	800c430 <VL53L0X_WrByte>
 800aef0:	4603      	mov	r3, r0
 800aef2:	461a      	mov	r2, r3
 800aef4:	7efb      	ldrb	r3, [r7, #27]
 800aef6:	b25b      	sxtb	r3, r3
 800aef8:	4313      	orrs	r3, r2
 800aefa:	b25b      	sxtb	r3, r3
 800aefc:	76fb      	strb	r3, [r7, #27]
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800aefe:	2200      	movs	r2, #0
 800af00:	21ff      	movs	r1, #255	; 0xff
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f001 fa94 	bl	800c430 <VL53L0X_WrByte>
 800af08:	4603      	mov	r3, r0
 800af0a:	461a      	mov	r2, r3
 800af0c:	7efb      	ldrb	r3, [r7, #27]
 800af0e:	b25b      	sxtb	r3, r3
 800af10:	4313      	orrs	r3, r2
 800af12:	b25b      	sxtb	r3, r3
 800af14:	76fb      	strb	r3, [r7, #27]
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800af16:	7efb      	ldrb	r3, [r7, #27]
 800af18:	b25b      	sxtb	r3, r3
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d176      	bne.n	800b00c <VL53L0X_set_vcsel_pulse_period+0x492>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800af1e:	78bb      	ldrb	r3, [r7, #2]
 800af20:	4618      	mov	r0, r3
 800af22:	f7fe fddd 	bl	8009ae0 <VL53L0X_encode_vcsel_period>
 800af26:	4603      	mov	r3, r0
 800af28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800af2c:	78fb      	ldrb	r3, [r7, #3]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d002      	beq.n	800af38 <VL53L0X_set_vcsel_pulse_period+0x3be>
 800af32:	2b01      	cmp	r3, #1
 800af34:	d040      	beq.n	800afb8 <VL53L0X_set_vcsel_pulse_period+0x43e>
 800af36:	e066      	b.n	800b006 <VL53L0X_set_vcsel_pulse_period+0x48c>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800af38:	f107 0310 	add.w	r3, r7, #16
 800af3c:	461a      	mov	r2, r3
 800af3e:	2103      	movs	r1, #3
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f7ff fc61 	bl	800a808 <get_sequence_step_timeout>
 800af46:	4603      	mov	r3, r0
 800af48:	76fb      	strb	r3, [r7, #27]
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800af4a:	7efb      	ldrb	r3, [r7, #27]
 800af4c:	b25b      	sxtb	r3, r3
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d108      	bne.n	800af64 <VL53L0X_set_vcsel_pulse_period+0x3ea>
				Status = get_sequence_step_timeout(Dev,
 800af52:	f107 030c 	add.w	r3, r7, #12
 800af56:	461a      	mov	r2, r3
 800af58:	2102      	movs	r1, #2
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f7ff fc54 	bl	800a808 <get_sequence_step_timeout>
 800af60:	4603      	mov	r3, r0
 800af62:	76fb      	strb	r3, [r7, #27]
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800af64:	7efb      	ldrb	r3, [r7, #27]
 800af66:	b25b      	sxtb	r3, r3
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d108      	bne.n	800af7e <VL53L0X_set_vcsel_pulse_period+0x404>
				Status = VL53L0X_WrByte(Dev,
 800af6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800af70:	461a      	mov	r2, r3
 800af72:	2150      	movs	r1, #80	; 0x50
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f001 fa5b 	bl	800c430 <VL53L0X_WrByte>
 800af7a:	4603      	mov	r3, r0
 800af7c:	76fb      	strb	r3, [r7, #27]
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800af7e:	7efb      	ldrb	r3, [r7, #27]
 800af80:	b25b      	sxtb	r3, r3
 800af82:	2b00      	cmp	r3, #0
 800af84:	d107      	bne.n	800af96 <VL53L0X_set_vcsel_pulse_period+0x41c>
				Status = set_sequence_step_timeout(Dev,
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	461a      	mov	r2, r3
 800af8a:	2103      	movs	r1, #3
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f7ff fd0c 	bl	800a9aa <set_sequence_step_timeout>
 800af92:	4603      	mov	r3, r0
 800af94:	76fb      	strb	r3, [r7, #27]
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800af96:	7efb      	ldrb	r3, [r7, #27]
 800af98:	b25b      	sxtb	r3, r3
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d107      	bne.n	800afae <VL53L0X_set_vcsel_pulse_period+0x434>
				Status = set_sequence_step_timeout(Dev,
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	461a      	mov	r2, r3
 800afa2:	2102      	movs	r1, #2
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f7ff fd00 	bl	800a9aa <set_sequence_step_timeout>
 800afaa:	4603      	mov	r3, r0
 800afac:	76fb      	strb	r3, [r7, #27]
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	78ba      	ldrb	r2, [r7, #2]
 800afb2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800afb6:	e02a      	b.n	800b00e <VL53L0X_set_vcsel_pulse_period+0x494>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800afb8:	f107 0314 	add.w	r3, r7, #20
 800afbc:	461a      	mov	r2, r3
 800afbe:	2104      	movs	r1, #4
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f7ff fc21 	bl	800a808 <get_sequence_step_timeout>
 800afc6:	4603      	mov	r3, r0
 800afc8:	76fb      	strb	r3, [r7, #27]
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800afca:	7efb      	ldrb	r3, [r7, #27]
 800afcc:	b25b      	sxtb	r3, r3
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d108      	bne.n	800afe4 <VL53L0X_set_vcsel_pulse_period+0x46a>
				Status = VL53L0X_WrByte(Dev,
 800afd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800afd6:	461a      	mov	r2, r3
 800afd8:	2170      	movs	r1, #112	; 0x70
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f001 fa28 	bl	800c430 <VL53L0X_WrByte>
 800afe0:	4603      	mov	r3, r0
 800afe2:	76fb      	strb	r3, [r7, #27]
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800afe4:	7efb      	ldrb	r3, [r7, #27]
 800afe6:	b25b      	sxtb	r3, r3
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d107      	bne.n	800affc <VL53L0X_set_vcsel_pulse_period+0x482>
				Status = set_sequence_step_timeout(Dev,
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	461a      	mov	r2, r3
 800aff0:	2104      	movs	r1, #4
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f7ff fcd9 	bl	800a9aa <set_sequence_step_timeout>
 800aff8:	4603      	mov	r3, r0
 800affa:	76fb      	strb	r3, [r7, #27]
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	78ba      	ldrb	r2, [r7, #2]
 800b000:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800b004:	e003      	b.n	800b00e <VL53L0X_set_vcsel_pulse_period+0x494>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b006:	23fc      	movs	r3, #252	; 0xfc
 800b008:	76fb      	strb	r3, [r7, #27]
 800b00a:	e000      	b.n	800b00e <VL53L0X_set_vcsel_pulse_period+0x494>
		}
	}
 800b00c:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800b00e:	7efb      	ldrb	r3, [r7, #27]
 800b010:	b25b      	sxtb	r3, r3
 800b012:	2b00      	cmp	r3, #0
 800b014:	d108      	bne.n	800b028 <VL53L0X_set_vcsel_pulse_period+0x4ae>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	68db      	ldr	r3, [r3, #12]
 800b01a:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800b01c:	69f9      	ldr	r1, [r7, #28]
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f7fc fce0 	bl	80079e4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800b024:	4603      	mov	r3, r0
 800b026:	76fb      	strb	r3, [r7, #27]

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b028:	7efb      	ldrb	r3, [r7, #27]
 800b02a:	b25b      	sxtb	r3, r3
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d108      	bne.n	800b042 <VL53L0X_set_vcsel_pulse_period+0x4c8>
		Status = VL53L0X_perform_phase_calibration(
 800b030:	f107 010b 	add.w	r1, r7, #11
 800b034:	2301      	movs	r3, #1
 800b036:	2200      	movs	r2, #0
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f7fe fc6c 	bl	8009916 <VL53L0X_perform_phase_calibration>
 800b03e:	4603      	mov	r3, r0
 800b040:	76fb      	strb	r3, [r7, #27]
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800b042:	7efb      	ldrb	r3, [r7, #27]
 800b044:	b25b      	sxtb	r3, r3
}
 800b046:	4618      	mov	r0, r3
 800b048:	3728      	adds	r7, #40	; 0x28
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}

0800b04e <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800b04e:	b580      	push	{r7, lr}
 800b050:	b086      	sub	sp, #24
 800b052:	af00      	add	r7, sp, #0
 800b054:	60f8      	str	r0, [r7, #12]
 800b056:	460b      	mov	r3, r1
 800b058:	607a      	str	r2, [r7, #4]
 800b05a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b05c:	2300      	movs	r3, #0
 800b05e:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800b060:	7afb      	ldrb	r3, [r7, #11]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d002      	beq.n	800b06c <VL53L0X_get_vcsel_pulse_period+0x1e>
 800b066:	2b01      	cmp	r3, #1
 800b068:	d00a      	beq.n	800b080 <VL53L0X_get_vcsel_pulse_period+0x32>
 800b06a:	e013      	b.n	800b094 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800b06c:	f107 0316 	add.w	r3, r7, #22
 800b070:	461a      	mov	r2, r3
 800b072:	2150      	movs	r1, #80	; 0x50
 800b074:	68f8      	ldr	r0, [r7, #12]
 800b076:	f001 f8e0 	bl	800c23a <VL53L0X_RdByte>
 800b07a:	4603      	mov	r3, r0
 800b07c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800b07e:	e00b      	b.n	800b098 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800b080:	f107 0316 	add.w	r3, r7, #22
 800b084:	461a      	mov	r2, r3
 800b086:	2170      	movs	r1, #112	; 0x70
 800b088:	68f8      	ldr	r0, [r7, #12]
 800b08a:	f001 f8d6 	bl	800c23a <VL53L0X_RdByte>
 800b08e:	4603      	mov	r3, r0
 800b090:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800b092:	e001      	b.n	800b098 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b094:	23fc      	movs	r3, #252	; 0xfc
 800b096:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800b098:	7dfb      	ldrb	r3, [r7, #23]
 800b09a:	b25b      	sxtb	r3, r3
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d107      	bne.n	800b0b0 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800b0a0:	7dbb      	ldrb	r3, [r7, #22]
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f7fe fd09 	bl	8009aba <VL53L0X_decode_vcsel_period>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	701a      	strb	r2, [r3, #0]

	return Status;
 800b0b0:	7dfb      	ldrb	r3, [r7, #23]
 800b0b2:	b25b      	sxtb	r3, r3
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	3718      	adds	r7, #24
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}

0800b0bc <VL53L0X_set_measurement_timing_budget_micro_seconds>:


VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(
		VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b090      	sub	sp, #64	; 0x40
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	76fb      	strb	r3, [r7, #27]
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800b0ca:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b0ce:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800b0d0:	f240 7376 	movw	r3, #1910	; 0x776
 800b0d4:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800b0d6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800b0da:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800b0dc:	f44f 7325 	mov.w	r3, #660	; 0x294
 800b0e0:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800b0e2:	f240 234e 	movw	r3, #590	; 0x24e
 800b0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800b0e8:	f240 23b2 	movw	r3, #690	; 0x2b2
 800b0ec:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800b0ee:	f44f 7325 	mov.w	r3, #660	; 0x294
 800b0f2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800b0f4:	f240 2326 	movw	r3, #550	; 0x226
 800b0f8:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	60fb      	str	r3, [r7, #12]
	uint32_t SubTimeout = 0;
 800b0fe:	2300      	movs	r3, #0
 800b100:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800b102:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b106:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800b108:	683a      	ldr	r2, [r7, #0]
 800b10a:	1ad3      	subs	r3, r2, r3
 800b10c:	63fb      	str	r3, [r7, #60]	; 0x3c

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800b10e:	f107 0314 	add.w	r3, r7, #20
 800b112:	4619      	mov	r1, r3
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f7fc fdaf 	bl	8007c78 <VL53L0X_GetSequenceStepEnables>
 800b11a:	4603      	mov	r3, r0
 800b11c:	76fb      	strb	r3, [r7, #27]

	if (Status == VL53L0X_ERROR_NONE &&
 800b11e:	7efb      	ldrb	r3, [r7, #27]
 800b120:	b25b      	sxtb	r3, r3
 800b122:	2b00      	cmp	r3, #0
 800b124:	d157      	bne.n	800b1d6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>
		(SchedulerSequenceSteps.TccOn  ||
 800b126:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d105      	bne.n	800b138 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x7c>
		SchedulerSequenceSteps.MsrcOn ||
 800b12c:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d102      	bne.n	800b138 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x7c>
		SchedulerSequenceSteps.DssOn)) {
 800b132:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800b134:	2b00      	cmp	r3, #0
 800b136:	d04e      	beq.n	800b1d6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800b138:	f107 0310 	add.w	r3, r7, #16
 800b13c:	461a      	mov	r2, r3
 800b13e:	2102      	movs	r1, #2
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f7ff fb61 	bl	800a808 <get_sequence_step_timeout>
 800b146:	4603      	mov	r3, r0
 800b148:	76fb      	strb	r3, [r7, #27]

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled.
		 */

		if (Status != VL53L0X_ERROR_NONE)
 800b14a:	7efb      	ldrb	r3, [r7, #27]
 800b14c:	b25b      	sxtb	r3, r3
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d002      	beq.n	800b158 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9c>
			return Status;
 800b152:	7efb      	ldrb	r3, [r7, #27]
 800b154:	b25b      	sxtb	r3, r3
 800b156:	e077      	b.n	800b248 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x18c>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800b158:	7d3b      	ldrb	r3, [r7, #20]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d00e      	beq.n	800b17c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc0>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800b15e:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800b160:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b162:	4413      	add	r3, r2
 800b164:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800b166:	69fa      	ldr	r2, [r7, #28]
 800b168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b16a:	429a      	cmp	r2, r3
 800b16c:	d204      	bcs.n	800b178 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800b16e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b170:	69fb      	ldr	r3, [r7, #28]
 800b172:	1ad3      	subs	r3, r2, r3
 800b174:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b176:	e001      	b.n	800b17c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc0>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b178:	23fc      	movs	r3, #252	; 0xfc
 800b17a:	76fb      	strb	r3, [r7, #27]
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800b17c:	7efb      	ldrb	r3, [r7, #27]
 800b17e:	b25b      	sxtb	r3, r3
 800b180:	2b00      	cmp	r3, #0
 800b182:	d002      	beq.n	800b18a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xce>
			LOG_FUNCTION_END(Status);
			return Status;
 800b184:	7efb      	ldrb	r3, [r7, #27]
 800b186:	b25b      	sxtb	r3, r3
 800b188:	e05e      	b.n	800b248 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x18c>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800b18a:	7dbb      	ldrb	r3, [r7, #22]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d010      	beq.n	800b1b2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf6>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800b190:	693a      	ldr	r2, [r7, #16]
 800b192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b194:	4413      	add	r3, r2
 800b196:	005b      	lsls	r3, r3, #1
 800b198:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800b19a:	69fa      	ldr	r2, [r7, #28]
 800b19c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d204      	bcs.n	800b1ac <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800b1a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b1a4:	69fb      	ldr	r3, [r7, #28]
 800b1a6:	1ad3      	subs	r3, r2, r3
 800b1a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1aa:	e014      	b.n	800b1d6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b1ac:	23fc      	movs	r3, #252	; 0xfc
 800b1ae:	76fb      	strb	r3, [r7, #27]
 800b1b0:	e011      	b.n	800b1d6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800b1b2:	7d7b      	ldrb	r3, [r7, #21]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d00e      	beq.n	800b1d6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1bc:	4413      	add	r3, r2
 800b1be:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800b1c0:	69fa      	ldr	r2, [r7, #28]
 800b1c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d204      	bcs.n	800b1d2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x116>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800b1c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b1ca:	69fb      	ldr	r3, [r7, #28]
 800b1cc:	1ad3      	subs	r3, r2, r3
 800b1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1d0:	e001      	b.n	800b1d6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b1d2:	23fc      	movs	r3, #252	; 0xfc
 800b1d4:	76fb      	strb	r3, [r7, #27]
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800b1d6:	7efb      	ldrb	r3, [r7, #27]
 800b1d8:	b25b      	sxtb	r3, r3
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d002      	beq.n	800b1e4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x128>
		LOG_FUNCTION_END(Status);
		return Status;
 800b1de:	7efb      	ldrb	r3, [r7, #27]
 800b1e0:	b25b      	sxtb	r3, r3
 800b1e2:	e031      	b.n	800b248 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x18c>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800b1e4:	7dfb      	ldrb	r3, [r7, #23]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d017      	beq.n	800b21a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x15e>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800b1ea:	f107 030c 	add.w	r3, r7, #12
 800b1ee:	461a      	mov	r2, r3
 800b1f0:	2103      	movs	r1, #3
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f7ff fb08 	bl	800a808 <get_sequence_step_timeout>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	76fb      	strb	r3, [r7, #27]
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b200:	4413      	add	r3, r2
 800b202:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800b204:	69fa      	ldr	r2, [r7, #28]
 800b206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b208:	429a      	cmp	r2, r3
 800b20a:	d204      	bcs.n	800b216 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x15a>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800b20c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b20e:	69fb      	ldr	r3, [r7, #28]
 800b210:	1ad3      	subs	r3, r2, r3
 800b212:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b214:	e001      	b.n	800b21a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x15e>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b216:	23fc      	movs	r3, #252	; 0xfc
 800b218:	76fb      	strb	r3, [r7, #27]
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800b21a:	7efb      	ldrb	r3, [r7, #27]
 800b21c:	b25b      	sxtb	r3, r3
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d110      	bne.n	800b244 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		SchedulerSequenceSteps.FinalRangeOn) {
 800b222:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800b224:	2b00      	cmp	r3, #0
 800b226:	d00d      	beq.n	800b244 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		FinalRangeTimingBudgetMicroSeconds -=
 800b228:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b22a:	6a3b      	ldr	r3, [r7, #32]
 800b22c:	1ad3      	subs	r3, r2, r3
 800b22e:	63fb      	str	r3, [r7, #60]	; 0x3c
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an
		 * error will be set. Otherwise the remaining time will be
		 * applied to the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800b230:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b232:	2104      	movs	r1, #4
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f7ff fbb8 	bl	800a9aa <set_sequence_step_timeout>
 800b23a:	4603      	mov	r3, r0
 800b23c:	76fb      	strb	r3, [r7, #27]
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	683a      	ldr	r2, [r7, #0]
 800b242:	60da      	str	r2, [r3, #12]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800b244:	7efb      	ldrb	r3, [r7, #27]
 800b246:	b25b      	sxtb	r3, r3
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3740      	adds	r7, #64	; 0x40
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(
		VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b08e      	sub	sp, #56	; 0x38
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b25a:	2300      	movs	r3, #0
 800b25c:	76fb      	strb	r3, [r7, #27]
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800b25e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b262:	60fb      	str	r3, [r7, #12]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800b264:	f240 7376 	movw	r3, #1910	; 0x776
 800b268:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t EndOverheadMicroSeconds		= 960;
 800b26a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800b26e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800b270:	f44f 7325 	mov.w	r3, #660	; 0x294
 800b274:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t TccOverheadMicroSeconds		= 590;
 800b276:	f240 234e 	movw	r3, #590	; 0x24e
 800b27a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t DssOverheadMicroSeconds		= 690;
 800b27c:	f240 23b2 	movw	r3, #690	; 0x2b2
 800b280:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800b282:	f44f 7325 	mov.w	r3, #660	; 0x294
 800b286:	623b      	str	r3, [r7, #32]
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800b288:	f240 2326 	movw	r3, #550	; 0x226
 800b28c:	61fb      	str	r3, [r7, #28]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800b28e:	2300      	movs	r3, #0
 800b290:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800b292:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b296:	441a      	add	r2, r3
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800b29c:	f107 0314 	add.w	r3, r7, #20
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f7fc fce8 	bl	8007c78 <VL53L0X_GetSequenceStepEnables>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	76fb      	strb	r3, [r7, #27]

	if (Status != VL53L0X_ERROR_NONE) {
 800b2ac:	7efb      	ldrb	r3, [r7, #27]
 800b2ae:	b25b      	sxtb	r3, r3
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d002      	beq.n	800b2ba <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6a>
		LOG_FUNCTION_END(Status);
		return Status;
 800b2b4:	7efb      	ldrb	r3, [r7, #27]
 800b2b6:	b25b      	sxtb	r3, r3
 800b2b8:	e072      	b.n	800b3a0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x150>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800b2ba:	7d3b      	ldrb	r3, [r7, #20]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d105      	bne.n	800b2cc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x7c>
		SchedulerSequenceSteps.MsrcOn ||
 800b2c0:	7d7b      	ldrb	r3, [r7, #21]
	if (SchedulerSequenceSteps.TccOn  ||
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d102      	bne.n	800b2cc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x7c>
		SchedulerSequenceSteps.DssOn) {
 800b2c6:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d02f      	beq.n	800b32c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xdc>

		Status = get_sequence_step_timeout(Dev,
 800b2cc:	f107 030c 	add.w	r3, r7, #12
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	2102      	movs	r1, #2
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f7ff fa97 	bl	800a808 <get_sequence_step_timeout>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	76fb      	strb	r3, [r7, #27]
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800b2de:	7efb      	ldrb	r3, [r7, #27]
 800b2e0:	b25b      	sxtb	r3, r3
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d122      	bne.n	800b32c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xdc>
			if (SchedulerSequenceSteps.TccOn) {
 800b2e6:	7d3b      	ldrb	r3, [r7, #20]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d007      	beq.n	800b2fc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xac>
				*pMeasurementTimingBudgetMicroSeconds +=
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800b2f0:	68f9      	ldr	r1, [r7, #12]
 800b2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f4:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800b2f6:	441a      	add	r2, r3
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800b2fc:	7dbb      	ldrb	r3, [r7, #22]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d009      	beq.n	800b316 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
				*pMeasurementTimingBudgetMicroSeconds +=
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800b306:	68f9      	ldr	r1, [r7, #12]
 800b308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30a:	440b      	add	r3, r1
 800b30c:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800b30e:	441a      	add	r2, r3
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	601a      	str	r2, [r3, #0]
 800b314:	e00a      	b.n	800b32c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xdc>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800b316:	7d7b      	ldrb	r3, [r7, #21]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d007      	beq.n	800b32c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xdc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800b320:	68f9      	ldr	r1, [r7, #12]
 800b322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b324:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800b326:	441a      	add	r2, r3
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b32c:	7efb      	ldrb	r3, [r7, #27]
 800b32e:	b25b      	sxtb	r3, r3
 800b330:	2b00      	cmp	r3, #0
 800b332:	d113      	bne.n	800b35c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x10c>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800b334:	7dfb      	ldrb	r3, [r7, #23]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d010      	beq.n	800b35c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x10c>
			Status = get_sequence_step_timeout(Dev,
 800b33a:	f107 0308 	add.w	r3, r7, #8
 800b33e:	461a      	mov	r2, r3
 800b340:	2103      	movs	r1, #3
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f7ff fa60 	bl	800a808 <get_sequence_step_timeout>
 800b348:	4603      	mov	r3, r0
 800b34a:	76fb      	strb	r3, [r7, #27]
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800b350:	68b9      	ldr	r1, [r7, #8]
 800b352:	6a3b      	ldr	r3, [r7, #32]
 800b354:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800b356:	441a      	add	r2, r3
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b35c:	7efb      	ldrb	r3, [r7, #27]
 800b35e:	b25b      	sxtb	r3, r3
 800b360:	2b00      	cmp	r3, #0
 800b362:	d113      	bne.n	800b38c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x13c>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800b364:	7e3b      	ldrb	r3, [r7, #24]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d010      	beq.n	800b38c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x13c>
			Status = get_sequence_step_timeout(Dev,
 800b36a:	f107 0310 	add.w	r3, r7, #16
 800b36e:	461a      	mov	r2, r3
 800b370:	2104      	movs	r1, #4
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f7ff fa48 	bl	800a808 <get_sequence_step_timeout>
 800b378:	4603      	mov	r3, r0
 800b37a:	76fb      	strb	r3, [r7, #27]
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800b380:	6939      	ldr	r1, [r7, #16]
 800b382:	69fb      	ldr	r3, [r7, #28]
 800b384:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800b386:	441a      	add	r2, r3
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b38c:	7efb      	ldrb	r3, [r7, #27]
 800b38e:	b25b      	sxtb	r3, r3
 800b390:	2b00      	cmp	r3, #0
 800b392:	d103      	bne.n	800b39c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x14c>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	681a      	ldr	r2, [r3, #0]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	60da      	str	r2, [r3, #12]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b39c:	7efb      	ldrb	r3, [r7, #27]
 800b39e:	b25b      	sxtb	r3, r3
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3738      	adds	r7, #56	; 0x38
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b088      	sub	sp, #32
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	73fb      	strb	r3, [r7, #15]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	61bb      	str	r3, [r7, #24]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800b3ba:	e0c6      	b.n	800b54a <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800b3bc:	69bb      	ldr	r3, [r7, #24]
 800b3be:	683a      	ldr	r2, [r7, #0]
 800b3c0:	4413      	add	r3, r2
 800b3c2:	781b      	ldrb	r3, [r3, #0]
 800b3c4:	75fb      	strb	r3, [r7, #23]
		Index++;
 800b3c6:	69bb      	ldr	r3, [r7, #24]
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	61bb      	str	r3, [r7, #24]
		if (NumberOfWrites == 0xFF) {
 800b3cc:	7dfb      	ldrb	r3, [r7, #23]
 800b3ce:	2bff      	cmp	r3, #255	; 0xff
 800b3d0:	f040 808d 	bne.w	800b4ee <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800b3d4:	69bb      	ldr	r3, [r7, #24]
 800b3d6:	683a      	ldr	r2, [r7, #0]
 800b3d8:	4413      	add	r3, r2
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	757b      	strb	r3, [r7, #21]
			Index++;
 800b3de:	69bb      	ldr	r3, [r7, #24]
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	61bb      	str	r3, [r7, #24]
			switch (SelectParam) {
 800b3e4:	7d7b      	ldrb	r3, [r7, #21]
 800b3e6:	2b03      	cmp	r3, #3
 800b3e8:	d87e      	bhi.n	800b4e8 <VL53L0X_load_tuning_settings+0x140>
 800b3ea:	a201      	add	r2, pc, #4	; (adr r2, 800b3f0 <VL53L0X_load_tuning_settings+0x48>)
 800b3ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f0:	0800b401 	.word	0x0800b401
 800b3f4:	0800b43b 	.word	0x0800b43b
 800b3f8:	0800b475 	.word	0x0800b475
 800b3fc:	0800b4af 	.word	0x0800b4af
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b400:	69bb      	ldr	r3, [r7, #24]
 800b402:	683a      	ldr	r2, [r7, #0]
 800b404:	4413      	add	r3, r2
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	753b      	strb	r3, [r7, #20]
				Index++;
 800b40a:	69bb      	ldr	r3, [r7, #24]
 800b40c:	3301      	adds	r3, #1
 800b40e:	61bb      	str	r3, [r7, #24]
				lsb = *(pTuningSettingBuffer + Index);
 800b410:	69bb      	ldr	r3, [r7, #24]
 800b412:	683a      	ldr	r2, [r7, #0]
 800b414:	4413      	add	r3, r2
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	74fb      	strb	r3, [r7, #19]
				Index++;
 800b41a:	69bb      	ldr	r3, [r7, #24]
 800b41c:	3301      	adds	r3, #1
 800b41e:	61bb      	str	r3, [r7, #24]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b420:	7d3b      	ldrb	r3, [r7, #20]
 800b422:	b29b      	uxth	r3, r3
 800b424:	021b      	lsls	r3, r3, #8
 800b426:	b29a      	uxth	r2, r3
 800b428:	7cfb      	ldrb	r3, [r7, #19]
 800b42a:	b29b      	uxth	r3, r3
 800b42c:	4413      	add	r3, r2
 800b42e:	823b      	strh	r3, [r7, #16]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	8a3a      	ldrh	r2, [r7, #16]
 800b434:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
				break;
 800b438:	e087      	b.n	800b54a <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b43a:	69bb      	ldr	r3, [r7, #24]
 800b43c:	683a      	ldr	r2, [r7, #0]
 800b43e:	4413      	add	r3, r2
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	753b      	strb	r3, [r7, #20]
				Index++;
 800b444:	69bb      	ldr	r3, [r7, #24]
 800b446:	3301      	adds	r3, #1
 800b448:	61bb      	str	r3, [r7, #24]
				lsb = *(pTuningSettingBuffer + Index);
 800b44a:	69bb      	ldr	r3, [r7, #24]
 800b44c:	683a      	ldr	r2, [r7, #0]
 800b44e:	4413      	add	r3, r2
 800b450:	781b      	ldrb	r3, [r3, #0]
 800b452:	74fb      	strb	r3, [r7, #19]
				Index++;
 800b454:	69bb      	ldr	r3, [r7, #24]
 800b456:	3301      	adds	r3, #1
 800b458:	61bb      	str	r3, [r7, #24]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b45a:	7d3b      	ldrb	r3, [r7, #20]
 800b45c:	b29b      	uxth	r3, r3
 800b45e:	021b      	lsls	r3, r3, #8
 800b460:	b29a      	uxth	r2, r3
 800b462:	7cfb      	ldrb	r3, [r7, #19]
 800b464:	b29b      	uxth	r3, r3
 800b466:	4413      	add	r3, r2
 800b468:	823b      	strh	r3, [r7, #16]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	8a3a      	ldrh	r2, [r7, #16]
 800b46e:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
					Temp16);
				break;
 800b472:	e06a      	b.n	800b54a <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b474:	69bb      	ldr	r3, [r7, #24]
 800b476:	683a      	ldr	r2, [r7, #0]
 800b478:	4413      	add	r3, r2
 800b47a:	781b      	ldrb	r3, [r3, #0]
 800b47c:	753b      	strb	r3, [r7, #20]
				Index++;
 800b47e:	69bb      	ldr	r3, [r7, #24]
 800b480:	3301      	adds	r3, #1
 800b482:	61bb      	str	r3, [r7, #24]
				lsb = *(pTuningSettingBuffer + Index);
 800b484:	69bb      	ldr	r3, [r7, #24]
 800b486:	683a      	ldr	r2, [r7, #0]
 800b488:	4413      	add	r3, r2
 800b48a:	781b      	ldrb	r3, [r3, #0]
 800b48c:	74fb      	strb	r3, [r7, #19]
				Index++;
 800b48e:	69bb      	ldr	r3, [r7, #24]
 800b490:	3301      	adds	r3, #1
 800b492:	61bb      	str	r3, [r7, #24]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b494:	7d3b      	ldrb	r3, [r7, #20]
 800b496:	b29b      	uxth	r3, r3
 800b498:	021b      	lsls	r3, r3, #8
 800b49a:	b29a      	uxth	r2, r3
 800b49c:	7cfb      	ldrb	r3, [r7, #19]
 800b49e:	b29b      	uxth	r3, r3
 800b4a0:	4413      	add	r3, r2
 800b4a2:	823b      	strh	r3, [r7, #16]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	8a3a      	ldrh	r2, [r7, #16]
 800b4a8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
				break;
 800b4ac:	e04d      	b.n	800b54a <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b4ae:	69bb      	ldr	r3, [r7, #24]
 800b4b0:	683a      	ldr	r2, [r7, #0]
 800b4b2:	4413      	add	r3, r2
 800b4b4:	781b      	ldrb	r3, [r3, #0]
 800b4b6:	753b      	strb	r3, [r7, #20]
				Index++;
 800b4b8:	69bb      	ldr	r3, [r7, #24]
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	61bb      	str	r3, [r7, #24]
				lsb = *(pTuningSettingBuffer + Index);
 800b4be:	69bb      	ldr	r3, [r7, #24]
 800b4c0:	683a      	ldr	r2, [r7, #0]
 800b4c2:	4413      	add	r3, r2
 800b4c4:	781b      	ldrb	r3, [r3, #0]
 800b4c6:	74fb      	strb	r3, [r7, #19]
				Index++;
 800b4c8:	69bb      	ldr	r3, [r7, #24]
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	61bb      	str	r3, [r7, #24]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b4ce:	7d3b      	ldrb	r3, [r7, #20]
 800b4d0:	b29b      	uxth	r3, r3
 800b4d2:	021b      	lsls	r3, r3, #8
 800b4d4:	b29a      	uxth	r2, r3
 800b4d6:	7cfb      	ldrb	r3, [r7, #19]
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	4413      	add	r3, r2
 800b4dc:	823b      	strh	r3, [r7, #16]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	8a3a      	ldrh	r2, [r7, #16]
 800b4e2:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
				break;
 800b4e6:	e030      	b.n	800b54a <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b4e8:	23fc      	movs	r3, #252	; 0xfc
 800b4ea:	73fb      	strb	r3, [r7, #15]
 800b4ec:	e02d      	b.n	800b54a <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800b4ee:	7dfb      	ldrb	r3, [r7, #23]
 800b4f0:	2b04      	cmp	r3, #4
 800b4f2:	d828      	bhi.n	800b546 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800b4f4:	69bb      	ldr	r3, [r7, #24]
 800b4f6:	683a      	ldr	r2, [r7, #0]
 800b4f8:	4413      	add	r3, r2
 800b4fa:	781b      	ldrb	r3, [r3, #0]
 800b4fc:	75bb      	strb	r3, [r7, #22]
			Index++;
 800b4fe:	69bb      	ldr	r3, [r7, #24]
 800b500:	3301      	adds	r3, #1
 800b502:	61bb      	str	r3, [r7, #24]

			for (i = 0; i < NumberOfWrites; i++) {
 800b504:	2300      	movs	r3, #0
 800b506:	61fb      	str	r3, [r7, #28]
 800b508:	e00f      	b.n	800b52a <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800b50a:	69bb      	ldr	r3, [r7, #24]
 800b50c:	683a      	ldr	r2, [r7, #0]
 800b50e:	4413      	add	r3, r2
 800b510:	7819      	ldrb	r1, [r3, #0]
 800b512:	f107 0208 	add.w	r2, r7, #8
 800b516:	69fb      	ldr	r3, [r7, #28]
 800b518:	4413      	add	r3, r2
 800b51a:	460a      	mov	r2, r1
 800b51c:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800b51e:	69bb      	ldr	r3, [r7, #24]
 800b520:	3301      	adds	r3, #1
 800b522:	61bb      	str	r3, [r7, #24]
			for (i = 0; i < NumberOfWrites; i++) {
 800b524:	69fb      	ldr	r3, [r7, #28]
 800b526:	3301      	adds	r3, #1
 800b528:	61fb      	str	r3, [r7, #28]
 800b52a:	7dfb      	ldrb	r3, [r7, #23]
 800b52c:	69fa      	ldr	r2, [r7, #28]
 800b52e:	429a      	cmp	r2, r3
 800b530:	dbeb      	blt.n	800b50a <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800b532:	7dfb      	ldrb	r3, [r7, #23]
 800b534:	f107 0208 	add.w	r2, r7, #8
 800b538:	7db9      	ldrb	r1, [r7, #22]
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f000 fea8 	bl	800c290 <VL53L0X_WriteMulti>
 800b540:	4603      	mov	r3, r0
 800b542:	73fb      	strb	r3, [r7, #15]
 800b544:	e001      	b.n	800b54a <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b546:	23fc      	movs	r3, #252	; 0xfc
 800b548:	73fb      	strb	r3, [r7, #15]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800b54a:	69bb      	ldr	r3, [r7, #24]
 800b54c:	683a      	ldr	r2, [r7, #0]
 800b54e:	4413      	add	r3, r2
 800b550:	781b      	ldrb	r3, [r3, #0]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d004      	beq.n	800b560 <VL53L0X_load_tuning_settings+0x1b8>
			(Status == VL53L0X_ERROR_NONE)) {
 800b556:	7bfb      	ldrb	r3, [r7, #15]
 800b558:	b25b      	sxtb	r3, r3
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	f43f af2e 	beq.w	800b3bc <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b560:	7bfb      	ldrb	r3, [r7, #15]
 800b562:	b25b      	sxtb	r3, r3
}
 800b564:	4618      	mov	r0, r3
 800b566:	3720      	adds	r7, #32
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}

0800b56c <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b088      	sub	sp, #32
 800b570:	af00      	add	r7, sp, #0
 800b572:	60f8      	str	r0, [r7, #12]
 800b574:	60b9      	str	r1, [r7, #8]
 800b576:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b578:	2300      	movs	r3, #0
 800b57a:	75fb      	strb	r3, [r7, #23]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2200      	movs	r2, #0
 800b580:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800b582:	f107 0316 	add.w	r3, r7, #22
 800b586:	4619      	mov	r1, r3
 800b588:	68f8      	ldr	r0, [r7, #12]
 800b58a:	f7fc fc01 	bl	8007d90 <VL53L0X_GetXTalkCompensationEnable>
 800b58e:	4603      	mov	r3, r0
 800b590:	75fb      	strb	r3, [r7, #23]
	if (Status == VL53L0X_ERROR_NONE) {
 800b592:	7dfb      	ldrb	r3, [r7, #23]
 800b594:	b25b      	sxtb	r3, r3
 800b596:	2b00      	cmp	r3, #0
 800b598:	d111      	bne.n	800b5be <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800b59a:	7dbb      	ldrb	r3, [r7, #22]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d00e      	beq.n	800b5be <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	699b      	ldr	r3, [r3, #24]
 800b5a4:	61fb      	str	r3, [r7, #28]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	8a9b      	ldrh	r3, [r3, #20]
 800b5aa:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800b5ac:	69fb      	ldr	r3, [r7, #28]
 800b5ae:	fb02 f303 	mul.w	r3, r2, r3
 800b5b2:	61bb      	str	r3, [r7, #24]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800b5b4:	69bb      	ldr	r3, [r7, #24]
 800b5b6:	3380      	adds	r3, #128	; 0x80
 800b5b8:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800b5be:	7dfb      	ldrb	r3, [r7, #23]
 800b5c0:	b25b      	sxtb	r3, r3
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3720      	adds	r7, #32
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}

0800b5ca <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800b5ca:	b580      	push	{r7, lr}
 800b5cc:	b086      	sub	sp, #24
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	60f8      	str	r0, [r7, #12]
 800b5d2:	60b9      	str	r1, [r7, #8]
 800b5d4:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800b5e2:	f107 0310 	add.w	r3, r7, #16
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	68b9      	ldr	r1, [r7, #8]
 800b5ea:	68f8      	ldr	r0, [r7, #12]
 800b5ec:	f7ff ffbe 	bl	800b56c <VL53L0X_get_total_xtalk_rate>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800b5f4:	7dfb      	ldrb	r3, [r7, #23]
 800b5f6:	b25b      	sxtb	r3, r3
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d105      	bne.n	800b608 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681a      	ldr	r2, [r3, #0]
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	441a      	add	r2, r3
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	601a      	str	r2, [r3, #0]

	return Status;
 800b608:	7dfb      	ldrb	r3, [r7, #23]
 800b60a:	b25b      	sxtb	r3, r3
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3718      	adds	r7, #24
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}

0800b614 <get_dmax_lut_points>:

VL53L0X_Error get_dmax_lut_points(VL53L0X_DMaxLUT_t data, uint32_t lut_size,
	FixPoint1616_t input, int32_t *index0,	int32_t *index1){
 800b614:	b084      	sub	sp, #16
 800b616:	b480      	push	{r7}
 800b618:	b085      	sub	sp, #20
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	f107 0c18 	add.w	ip, r7, #24
 800b620:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b624:	2300      	movs	r3, #0
 800b626:	70fb      	strb	r3, [r7, #3]
	FixPoint1616_t index0_tmp = 0;
 800b628:	2300      	movs	r3, #0
 800b62a:	60fb      	str	r3, [r7, #12]
	FixPoint1616_t index1_tmp = 0;
 800b62c:	2300      	movs	r3, #0
 800b62e:	60bb      	str	r3, [r7, #8]
	int index = 0;
 800b630:	2300      	movs	r3, #0
 800b632:	607b      	str	r3, [r7, #4]

	for (index = 0; index < lut_size; index++) {
 800b634:	2300      	movs	r3, #0
 800b636:	607b      	str	r3, [r7, #4]
 800b638:	e00d      	b.n	800b656 <get_dmax_lut_points+0x42>
		if (input <= data.ambRate_mcps[index]) {
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f107 0218 	add.w	r2, r7, #24
 800b640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b644:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b646:	429a      	cmp	r2, r3
 800b648:	d802      	bhi.n	800b650 <get_dmax_lut_points+0x3c>
			index1_tmp = index;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	60bb      	str	r3, [r7, #8]
			break;
 800b64e:	e006      	b.n	800b65e <get_dmax_lut_points+0x4a>
	for (index = 0; index < lut_size; index++) {
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	3301      	adds	r3, #1
 800b654:	607b      	str	r3, [r7, #4]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d8ed      	bhi.n	800b63a <get_dmax_lut_points+0x26>
		}
	}

	if (index == lut_size) {
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b662:	429a      	cmp	r2, r3
 800b664:	d105      	bne.n	800b672 <get_dmax_lut_points+0x5e>
		/* input is higher than last x point */
		index0_tmp = index1_tmp = lut_size - 1;
 800b666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b668:	3b01      	subs	r3, #1
 800b66a:	60bb      	str	r3, [r7, #8]
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	60fb      	str	r3, [r7, #12]
 800b670:	e008      	b.n	800b684 <get_dmax_lut_points+0x70>
	} else if (index1_tmp == 0) {
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d102      	bne.n	800b67e <get_dmax_lut_points+0x6a>
		/* input is lower than first x point */
		index0_tmp = 0;
 800b678:	2300      	movs	r3, #0
 800b67a:	60fb      	str	r3, [r7, #12]
 800b67c:	e002      	b.n	800b684 <get_dmax_lut_points+0x70>
	} else{
		/* input is in between 2 points */
		index0_tmp = index1_tmp - 1;
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	3b01      	subs	r3, #1
 800b682:	60fb      	str	r3, [r7, #12]
	}

	*index0 = index0_tmp;
 800b684:	68fa      	ldr	r2, [r7, #12]
 800b686:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b688:	601a      	str	r2, [r3, #0]
	*index1 = index1_tmp;
 800b68a:	68ba      	ldr	r2, [r7, #8]
 800b68c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b68e:	601a      	str	r2, [r3, #0]

	return Status;
 800b690:	78fb      	ldrb	r3, [r7, #3]
 800b692:	b25b      	sxtb	r3, r3
}
 800b694:	4618      	mov	r0, r3
 800b696:	3714      	adds	r7, #20
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	b004      	add	sp, #16
 800b6a0:	4770      	bx	lr

0800b6a2 <VL53L0X_calc_dmax>:

VL53L0X_Error VL53L0X_calc_dmax(
	VL53L0X_DEV Dev, FixPoint1616_t ambRateMeas, uint32_t *pdmax_mm){
 800b6a2:	b5b0      	push	{r4, r5, r7, lr}
 800b6a4:	b0ba      	sub	sp, #232	; 0xe8
 800b6a6:	af0e      	add	r7, sp, #56	; 0x38
 800b6a8:	60f8      	str	r0, [r7, #12]
 800b6aa:	60b9      	str	r1, [r7, #8]
 800b6ac:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	VL53L0X_DeviceParameters_t CurrentParameters;
	int32_t index0 = 0;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	61bb      	str	r3, [r7, #24]
	int32_t index1 = 0;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	617b      	str	r3, [r7, #20]
	FixPoint1616_t dmax_mm;
	FixPoint1616_t linearSlope;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800b6bc:	f107 031c 	add.w	r3, r7, #28
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	68f8      	ldr	r0, [r7, #12]
 800b6c4:	f7fc f85a 	bl	800777c <VL53L0X_GetDeviceParameters>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

	if (ambRateMeas <= CurrentParameters.dmax_lut.ambRate_mcps[0]) {
 800b6ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b6d0:	68ba      	ldr	r2, [r7, #8]
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d803      	bhi.n	800b6de <VL53L0X_calc_dmax+0x3c>
		dmax_mm = CurrentParameters.dmax_lut.dmax_mm[0];
 800b6d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b6d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b6dc:	e081      	b.n	800b7e2 <VL53L0X_calc_dmax+0x140>
	} else if (ambRateMeas >=
		   CurrentParameters.dmax_lut.
		   ambRate_mcps[VL53L0X_DMAX_LUT_SIZE - 1]) {
 800b6de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
	} else if (ambRateMeas >=
 800b6e0:	68ba      	ldr	r2, [r7, #8]
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	d304      	bcc.n	800b6f0 <VL53L0X_calc_dmax+0x4e>
		dmax_mm =
 800b6e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b6ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b6ee:	e078      	b.n	800b7e2 <VL53L0X_calc_dmax+0x140>
		    CurrentParameters.dmax_lut.dmax_mm[VL53L0X_DMAX_LUT_SIZE -
						       1];
	} else{
		get_dmax_lut_points(CurrentParameters.dmax_lut,
 800b6f0:	f107 0314 	add.w	r3, r7, #20
 800b6f4:	930d      	str	r3, [sp, #52]	; 0x34
 800b6f6:	f107 0318 	add.w	r3, r7, #24
 800b6fa:	930c      	str	r3, [sp, #48]	; 0x30
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800b700:	2307      	movs	r3, #7
 800b702:	930a      	str	r3, [sp, #40]	; 0x28
 800b704:	466d      	mov	r5, sp
 800b706:	f107 0468 	add.w	r4, r7, #104	; 0x68
 800b70a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b70c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b70e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b710:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b712:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b716:	e885 0003 	stmia.w	r5, {r0, r1}
 800b71a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b71e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b720:	f7ff ff78 	bl	800b614 <get_dmax_lut_points>
			VL53L0X_DMAX_LUT_SIZE, ambRateMeas, &index0, &index1);

		if (index0 == index1) {
 800b724:	69ba      	ldr	r2, [r7, #24]
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	429a      	cmp	r2, r3
 800b72a:	d10a      	bne.n	800b742 <VL53L0X_calc_dmax+0xa0>
			dmax_mm = CurrentParameters.dmax_lut.dmax_mm[index0];
 800b72c:	69bb      	ldr	r3, [r7, #24]
 800b72e:	3314      	adds	r3, #20
 800b730:	009b      	lsls	r3, r3, #2
 800b732:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800b736:	4413      	add	r3, r2
 800b738:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 800b73c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b740:	e04f      	b.n	800b7e2 <VL53L0X_calc_dmax+0x140>
		} else {
			amb0 = CurrentParameters.dmax_lut.ambRate_mcps[index0];
 800b742:	69bb      	ldr	r3, [r7, #24]
 800b744:	330e      	adds	r3, #14
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800b74c:	4413      	add	r3, r2
 800b74e:	f853 3c90 	ldr.w	r3, [r3, #-144]
 800b752:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			amb1 = CurrentParameters.dmax_lut.ambRate_mcps[index1];
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	330e      	adds	r3, #14
 800b75a:	009b      	lsls	r3, r3, #2
 800b75c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800b760:	4413      	add	r3, r2
 800b762:	f853 3c90 	ldr.w	r3, [r3, #-144]
 800b766:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			dmax0 = CurrentParameters.dmax_lut.dmax_mm[index0];
 800b76a:	69bb      	ldr	r3, [r7, #24]
 800b76c:	3314      	adds	r3, #20
 800b76e:	009b      	lsls	r3, r3, #2
 800b770:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800b774:	4413      	add	r3, r2
 800b776:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 800b77a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			dmax1 = CurrentParameters.dmax_lut.dmax_mm[index1];
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	3314      	adds	r3, #20
 800b782:	009b      	lsls	r3, r3, #2
 800b784:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800b788:	4413      	add	r3, r2
 800b78a:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 800b78e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			if ((amb1 - amb0) != 0) {
 800b792:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800b796:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d01d      	beq.n	800b7da <VL53L0X_calc_dmax+0x138>
				/* Fix16:16/Fix16:8 => Fix16:8 */
				linearSlope = (dmax0-dmax1)/((amb1-amb0) >> 8);
 800b79e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800b7a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b7a6:	1ad2      	subs	r2, r2, r3
 800b7a8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b7ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b7b0:	1acb      	subs	r3, r1, r3
 800b7b2:	0a1b      	lsrs	r3, r3, #8
 800b7b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

				/* Fix16:8 * Fix16:8 => Fix16:16 */
				dmax_mm =
				    (((amb1 -
 800b7bc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	1ad3      	subs	r3, r2, r3
				       ambRateMeas) >> 8) * linearSlope) +
 800b7c4:	0a1b      	lsrs	r3, r3, #8
 800b7c6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b7ca:	fb02 f303 	mul.w	r3, r2, r3
				dmax_mm =
 800b7ce:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800b7d2:	4413      	add	r3, r2
 800b7d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b7d8:	e003      	b.n	800b7e2 <VL53L0X_calc_dmax+0x140>
				    dmax1;
			} else{
				dmax_mm = dmax0;
 800b7da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b7de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			}
		}
	}
	*pdmax_mm = (uint32_t)(dmax_mm >> 16);
 800b7e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b7e6:	0c1a      	lsrs	r2, r3, #16
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800b7ec:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800b7f0:	b25b      	sxtb	r3, r3
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	37b0      	adds	r7, #176	; 0xb0
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b7fc <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b0b0      	sub	sp, #192	; 0xc0
 800b800:	af00      	add	r7, sp, #0
 800b802:	60f8      	str	r0, [r7, #12]
 800b804:	60b9      	str	r1, [r7, #8]
 800b806:	607a      	str	r2, [r7, #4]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800b808:	f44f 7348 	mov.w	r3, #800	; 0x320
 800b80c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800b810:	f44f 7316 	mov.w	r3, #600	; 0x258
 800b814:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs =
 800b818:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800b81c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
						0x00190000; /* 25ms */
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800b820:	f241 235c 	movw	r3, #4700	; 0x125c
 800b824:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800b828:	4b97      	ldr	r3, [pc, #604]	; (800ba88 <VL53L0X_calc_sigma_estimate+0x28c>)
 800b82a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800b82e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800b832:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800b836:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800b83a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b83e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b842:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800b846:	4b91      	ldr	r3, [pc, #580]	; (800ba8c <VL53L0X_calc_sigma_estimate+0x290>)
 800b848:	67fb      	str	r3, [r7, #124]	; 0x7c
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800b84a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b84e:	67bb      	str	r3, [r7, #120]	; 0x78
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800b850:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800b854:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t cPllPeriod_ps			= 1655;
 800b856:	f240 6377 	movw	r3, #1655	; 0x677
 800b85a:	673b      	str	r3, [r7, #112]	; 0x70
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b85c:	2300      	movs	r3, #0
 800b85e:	76fb      	strb	r3, [r7, #27]
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	699b      	ldr	r3, [r3, #24]
 800b864:	61fb      	str	r3, [r7, #28]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	691b      	ldr	r3, [r3, #16]
 800b86a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b86e:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800b872:	0c1b      	lsrs	r3, r3, #16
 800b874:	66fb      	str	r3, [r7, #108]	; 0x6c

	Status = VL53L0X_get_total_signal_rate(
 800b876:	f107 0314 	add.w	r3, r7, #20
 800b87a:	461a      	mov	r2, r3
 800b87c:	68b9      	ldr	r1, [r7, #8]
 800b87e:	68f8      	ldr	r0, [r7, #12]
 800b880:	f7ff fea3 	bl	800b5ca <VL53L0X_get_total_signal_rate>
 800b884:	4603      	mov	r3, r0
 800b886:	76fb      	strb	r3, [r7, #27]
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800b888:	f107 031c 	add.w	r3, r7, #28
 800b88c:	461a      	mov	r2, r3
 800b88e:	68b9      	ldr	r1, [r7, #8]
 800b890:	68f8      	ldr	r0, [r7, #12]
 800b892:	f7ff fe6b 	bl	800b56c <VL53L0X_get_total_xtalk_rate>
 800b896:	4603      	mov	r3, r0
 800b898:	76fb      	strb	r3, [r7, #27]


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b8a0:	fb02 f303 	mul.w	r3, r2, r3
 800b8a4:	66bb      	str	r3, [r7, #104]	; 0x68
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800b8a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b8a8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b8ac:	0c1b      	lsrs	r3, r3, #16
 800b8ae:	66bb      	str	r3, [r7, #104]	; 0x68

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800b8b0:	69fb      	ldr	r3, [r7, #28]
 800b8b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b8b6:	fb02 f303 	mul.w	r3, r2, r3
 800b8ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800b8be:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800b8c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	d902      	bls.n	800b8ce <VL53L0X_calc_sigma_estimate+0xd2>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800b8c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b8ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800b8ce:	7efb      	ldrb	r3, [r7, #27]
 800b8d0:	b25b      	sxtb	r3, r3
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d160      	bne.n	800b998 <VL53L0X_calc_sigma_estimate+0x19c>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800b8dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800b8e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b8ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800b8f4:	68f8      	ldr	r0, [r7, #12]
 800b8f6:	f7fe ff33 	bl	800a760 <VL53L0X_calc_timeout_mclks>
 800b8fa:	6638      	str	r0, [r7, #96]	; 0x60
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800b902:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800b90c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b910:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b914:	461a      	mov	r2, r3
 800b916:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800b91a:	68f8      	ldr	r0, [r7, #12]
 800b91c:	f7fe ff20 	bl	800a760 <VL53L0X_calc_timeout_mclks>
 800b920:	65b8      	str	r0, [r7, #88]	; 0x58
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800b922:	2303      	movs	r3, #3
 800b924:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		if (finalRangeVcselPCLKS == 8)
 800b928:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b92c:	2b08      	cmp	r3, #8
 800b92e:	d102      	bne.n	800b936 <VL53L0X_calc_sigma_estimate+0x13a>
			vcselWidth = 2;
 800b930:	2302      	movs	r3, #2
 800b932:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800b936:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b938:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b93a:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800b93c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800b940:	fb02 f303 	mul.w	r3, r2, r3
 800b944:	02db      	lsls	r3, r3, #11
 800b946:	657b      	str	r3, [r7, #84]	; 0x54
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b94a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b94e:	4a50      	ldr	r2, [pc, #320]	; (800ba90 <VL53L0X_calc_sigma_estimate+0x294>)
 800b950:	fba2 2303 	umull	r2, r3, r2, r3
 800b954:	099b      	lsrs	r3, r3, #6
 800b956:	657b      	str	r3, [r7, #84]	; 0x54
		peakVcselDuration_us *= cPllPeriod_ps;
 800b958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b95a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b95c:	fb02 f303 	mul.w	r3, r2, r3
 800b960:	657b      	str	r3, [r7, #84]	; 0x54
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b964:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b968:	4a49      	ldr	r2, [pc, #292]	; (800ba90 <VL53L0X_calc_sigma_estimate+0x294>)
 800b96a:	fba2 2303 	umull	r2, r3, r2, r3
 800b96e:	099b      	lsrs	r3, r3, #6
 800b970:	657b      	str	r3, [r7, #84]	; 0x54

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	3380      	adds	r3, #128	; 0x80
 800b976:	0a1b      	lsrs	r3, r3, #8
 800b978:	617b      	str	r3, [r7, #20]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800b97a:	697a      	ldr	r2, [r7, #20]
 800b97c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b97e:	fb02 f303 	mul.w	r3, r2, r3
 800b982:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800b986:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b98a:	3380      	adds	r3, #128	; 0x80
 800b98c:	0a1b      	lsrs	r3, r3, #8
 800b98e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	021b      	lsls	r3, r3, #8
 800b996:	617b      	str	r3, [r7, #20]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800b998:	7efb      	ldrb	r3, [r7, #27]
 800b99a:	b25b      	sxtb	r3, r3
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d002      	beq.n	800b9a6 <VL53L0X_calc_sigma_estimate+0x1aa>
		LOG_FUNCTION_END(Status);
		return Status;
 800b9a0:	7efb      	ldrb	r3, [r7, #27]
 800b9a2:	b25b      	sxtb	r3, r3
 800b9a4:	e152      	b.n	800bc4c <VL53L0X_calc_sigma_estimate+0x450>
	}

	if (peakSignalRate_kcps == 0) {
 800b9a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d109      	bne.n	800b9c0 <VL53L0X_calc_sigma_estimate+0x1c4>
		*pSigmaEstimate = cSigmaEstMax;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b9b2:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b9ba:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800b9be:	e143      	b.n	800bc48 <VL53L0X_calc_sigma_estimate+0x44c>
	} else {
		if (vcselTotalEventsRtn < 1)
 800b9c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d102      	bne.n	800b9ce <VL53L0X_calc_sigma_estimate+0x1d2>
			vcselTotalEventsRtn = 1;
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800b9ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b9d2:	653b      	str	r3, [r7, #80]	; 0x50

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800b9d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9d6:	041a      	lsls	r2, r3, #16
 800b9d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b9da:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800b9e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b9e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	d903      	bls.n	800b9f6 <VL53L0X_calc_sigma_estimate+0x1fa>
			/* Clip to prevent overflow. Will ensure safe
			 * max result.
			 */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800b9ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b9f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800b9f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b9fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b9fe:	fb02 f303 	mul.w	r3, r2, r3
 800ba02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800ba06:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800ba0a:	4613      	mov	r3, r2
 800ba0c:	005b      	lsls	r3, r3, #1
 800ba0e:	4413      	add	r3, r2
 800ba10:	009b      	lsls	r3, r3, #2
 800ba12:	4618      	mov	r0, r3
 800ba14:	f7fe f877 	bl	8009b06 <VL53L0X_isqrt>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	005b      	lsls	r3, r3, #1
 800ba1c:	64fb      	str	r3, [r7, #76]	; 0x4c

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	891b      	ldrh	r3, [r3, #8]
 800ba22:	461a      	mov	r2, r3
 800ba24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ba26:	fb02 f303 	mul.w	r3, r2, r3
 800ba2a:	64bb      	str	r3, [r7, #72]	; 0x48
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800ba2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba2e:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800ba30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ba34:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800ba36:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800ba38:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800ba3c:	4a14      	ldr	r2, [pc, #80]	; (800ba90 <VL53L0X_calc_sigma_estimate+0x294>)
 800ba3e:	fba2 2303 	umull	r2, r3, r2, r3
 800ba42:	099b      	lsrs	r3, r3, #6
 800ba44:	647b      	str	r3, [r7, #68]	; 0x44

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800ba46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba48:	041b      	lsls	r3, r3, #16
 800ba4a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ba4e:	4a10      	ldr	r2, [pc, #64]	; (800ba90 <VL53L0X_calc_sigma_estimate+0x294>)
 800ba50:	fba2 2303 	umull	r2, r3, r2, r3
 800ba54:	099b      	lsrs	r3, r3, #6
 800ba56:	643b      	str	r3, [r7, #64]	; 0x40

		/* Shift by 8 bits to increase resolution prior to the
		 * division
		 */
		diff1_mcps <<= 8;
 800ba58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba5a:	021b      	lsls	r3, r3, #8
 800ba5c:	647b      	str	r3, [r7, #68]	; 0x44

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800ba5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba62:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	bfb8      	it	lt
 800ba6a:	425b      	neglt	r3, r3
 800ba6c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800ba6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba70:	021b      	lsls	r3, r3, #8
 800ba72:	63fb      	str	r3, [r7, #60]	; 0x3c

		if (pRangingMeasurementData->RangeStatus != 0) {
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	7e1b      	ldrb	r3, [r3, #24]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d00b      	beq.n	800ba94 <VL53L0X_calc_sigma_estimate+0x298>
			pwMult = 1 << 16;
 800ba7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ba80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ba84:	e035      	b.n	800baf2 <VL53L0X_calc_sigma_estimate+0x2f6>
 800ba86:	bf00      	nop
 800ba88:	028f87ae 	.word	0x028f87ae
 800ba8c:	0006999a 	.word	0x0006999a
 800ba90:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			/* smaller than 1.0f */
			pwMult = deltaT_ps/cVcselPulseWidth_ps;
 800ba94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however
			 * both values are small enough such that32 bits will
			 * not be exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800baa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800baa4:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800baa8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800baac:	fb02 f303 	mul.w	r3, r2, r3
 800bab0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800bab4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bab8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800baba:	4413      	add	r3, r2
 800babc:	0c1b      	lsrs	r3, r3, #16
 800babe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800bac2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bac6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800baca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			 * At this point the value will be 1.xx, therefore if we
			 * square the value this will exceed 32 bits. To address
			 * this perform a single shift to the right before the
			 * multiplication.
			 */
			pwMult >>= 1;
 800bace:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bad2:	085b      	lsrs	r3, r3, #1
 800bad4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800bad8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800badc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bae0:	fb02 f303 	mul.w	r3, r2, r3
 800bae4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800bae8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800baec:	0b9b      	lsrs	r3, r3, #14
 800baee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800baf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800baf6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800baf8:	fb02 f303 	mul.w	r3, r2, r3
 800bafc:	63bb      	str	r3, [r7, #56]	; 0x38

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800bafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb00:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800bb04:	0c1b      	lsrs	r3, r3, #16
 800bb06:	63bb      	str	r3, [r7, #56]	; 0x38

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800bb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb0c:	fb02 f303 	mul.w	r3, r2, r3
 800bb10:	63bb      	str	r3, [r7, #56]	; 0x38

		sqr2 = sigmaEstimateP2;
 800bb12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800bb16:	637b      	str	r3, [r7, #52]	; 0x34

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800bb18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb1a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800bb1e:	0c1b      	lsrs	r3, r3, #16
 800bb20:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800bb22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb26:	fb02 f303 	mul.w	r3, r2, r3
 800bb2a:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800bb2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb30:	4413      	add	r3, r2
 800bb32:	633b      	str	r3, [r7, #48]	; 0x30

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800bb34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb36:	f7fd ffe6 	bl	8009b06 <VL53L0X_isqrt>
 800bb3a:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800bb3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb3e:	041b      	lsls	r3, r3, #16
 800bb40:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800bb42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb44:	3332      	adds	r3, #50	; 0x32
 800bb46:	4a43      	ldr	r2, [pc, #268]	; (800bc54 <VL53L0X_calc_sigma_estimate+0x458>)
 800bb48:	fba2 2303 	umull	r2, r3, r2, r3
 800bb4c:	095a      	lsrs	r2, r3, #5
 800bb4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb50:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800bb58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bb5c:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800bb60:	fb02 f303 	mul.w	r3, r2, r3
 800bb64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800bb68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bb6c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800bb70:	3308      	adds	r3, #8
 800bb72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800bb76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bb7a:	4a37      	ldr	r2, [pc, #220]	; (800bc58 <VL53L0X_calc_sigma_estimate+0x45c>)
 800bb7c:	fba2 2303 	umull	r2, r3, r2, r3
 800bb80:	0b5b      	lsrs	r3, r3, #13
 800bb82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800bb86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bb8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bb8e:	429a      	cmp	r2, r3
 800bb90:	d903      	bls.n	800bb9a <VL53L0X_calc_sigma_estimate+0x39e>
			/* Clip to prevent overflow. Will ensure safe
			 * max result.
			 */
			sigmaEstRtn = cSigmaEstRtnMax;
 800bb92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bb96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
		    (finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs +
 800bb9a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bb9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bba2:	4413      	add	r3, r2
 800bba4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800bba8:	4a2c      	ldr	r2, [pc, #176]	; (800bc5c <VL53L0X_calc_sigma_estimate+0x460>)
 800bbaa:	fba2 2303 	umull	r2, r3, r2, r3
 800bbae:	099b      	lsrs	r3, r3, #6
 800bbb0:	62bb      	str	r3, [r7, #40]	; 0x28
		 * (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800bbb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb4:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800bbb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bbba:	441a      	add	r2, r3
 800bbbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbbe:	fbb2 f3f3 	udiv	r3, r2, r3
		sigmaEstRef =
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7fd ff9f 	bl	8009b06 <VL53L0X_isqrt>
 800bbc8:	6278      	str	r0, [r7, #36]	; 0x24
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800bbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbcc:	021b      	lsls	r3, r3, #8
 800bbce:	627b      	str	r3, [r7, #36]	; 0x24
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800bbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bbd6:	4a21      	ldr	r2, [pc, #132]	; (800bc5c <VL53L0X_calc_sigma_estimate+0x460>)
 800bbd8:	fba2 2303 	umull	r2, r3, r2, r3
 800bbdc:	099b      	lsrs	r3, r3, #6
 800bbde:	627b      	str	r3, [r7, #36]	; 0x24

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800bbe0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bbe4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bbe8:	fb02 f303 	mul.w	r3, r2, r3
 800bbec:	63bb      	str	r3, [r7, #56]	; 0x38
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800bbee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbf2:	fb02 f303 	mul.w	r3, r2, r3
 800bbf6:	637b      	str	r3, [r7, #52]	; 0x34

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800bbf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbfc:	4413      	add	r3, r2
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f7fd ff81 	bl	8009b06 <VL53L0X_isqrt>
 800bc04:	6238      	str	r0, [r7, #32]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800bc06:	6a3b      	ldr	r3, [r7, #32]
 800bc08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bc0c:	fb02 f303 	mul.w	r3, r2, r3
 800bc10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800bc14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d009      	beq.n	800bc2e <VL53L0X_calc_sigma_estimate+0x432>
 800bc1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d005      	beq.n	800bc2e <VL53L0X_calc_sigma_estimate+0x432>
 800bc22:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800bc26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d903      	bls.n	800bc36 <VL53L0X_calc_sigma_estimate+0x43a>
				(sigmaEstimate > cSigmaEstMax)) {
			sigmaEstimate = cSigmaEstMax;
 800bc2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bc32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800bc3c:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681a      	ldr	r2, [r3, #0]
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bc48:	7efb      	ldrb	r3, [r7, #27]
 800bc4a:	b25b      	sxtb	r3, r3
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	37c0      	adds	r7, #192	; 0xc0
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}
 800bc54:	51eb851f 	.word	0x51eb851f
 800bc58:	d1b71759 	.word	0xd1b71759
 800bc5c:	10624dd3 	.word	0x10624dd3

0800bc60 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b090      	sub	sp, #64	; 0x40
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	60f8      	str	r0, [r7, #12]
 800bc68:	607a      	str	r2, [r7, #4]
 800bc6a:	461a      	mov	r2, r3
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	72fb      	strb	r3, [r7, #11]
 800bc70:	4613      	mov	r3, r2
 800bc72:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc74:	2300      	movs	r3, #0
 800bc76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	uint8_t SignalRefClipflag = 0;
 800bc80:	2300      	movs	r3, #0
 800bc82:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t RangeIgnoreThresholdflag = 0;
 800bc86:	2300      	movs	r3, #0
 800bc88:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t SigmaLimitCheckEnable = 0;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800bc92:	2300      	movs	r3, #0
 800bc94:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800bca4:	2300      	movs	r3, #0
 800bca6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint16_t tmpWord = 0;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800bcb2:	7afb      	ldrb	r3, [r7, #11]
 800bcb4:	10db      	asrs	r3, r3, #3
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	f003 030f 	and.w	r3, r3, #15
 800bcbc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	if (DeviceRangeStatusInternal == 0 ||
 800bcc0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d017      	beq.n	800bcf8 <VL53L0X_get_pal_range_status+0x98>
 800bcc8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bccc:	2b05      	cmp	r3, #5
 800bcce:	d013      	beq.n	800bcf8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800bcd0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bcd4:	2b07      	cmp	r3, #7
 800bcd6:	d00f      	beq.n	800bcf8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800bcd8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bcdc:	2b0c      	cmp	r3, #12
 800bcde:	d00b      	beq.n	800bcf8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800bce0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bce4:	2b0d      	cmp	r3, #13
 800bce6:	d007      	beq.n	800bcf8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800bce8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bcec:	2b0e      	cmp	r3, #14
 800bcee:	d003      	beq.n	800bcf8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800bcf0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bcf4:	2b0f      	cmp	r3, #15
 800bcf6:	d103      	bne.n	800bd00 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800bcfe:	e002      	b.n	800bd06 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800bd00:	2300      	movs	r3, #0
 800bd02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800bd06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd0a:	b25b      	sxtb	r3, r3
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d109      	bne.n	800bd24 <VL53L0X_get_pal_range_status+0xc4>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800bd10:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800bd14:	461a      	mov	r2, r3
 800bd16:	2100      	movs	r1, #0
 800bd18:	68f8      	ldr	r0, [r7, #12]
 800bd1a:	f7fc f90d 	bl	8007f38 <VL53L0X_GetLimitCheckEnable>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800bd24:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d040      	beq.n	800bdae <VL53L0X_get_pal_range_status+0x14e>
 800bd2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd30:	b25b      	sxtb	r3, r3
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d13b      	bne.n	800bdae <VL53L0X_get_pal_range_status+0x14e>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800bd36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd3a:	461a      	mov	r2, r3
 800bd3c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bd3e:	68f8      	ldr	r0, [r7, #12]
 800bd40:	f7ff fd5c 	bl	800b7fc <VL53L0X_calc_sigma_estimate>
 800bd44:	4603      	mov	r3, r0
 800bd46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate);
		if (Status == VL53L0X_ERROR_NONE)
 800bd4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd4e:	b25b      	sxtb	r3, r3
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d10a      	bne.n	800bd6a <VL53L0X_get_pal_range_status+0x10a>
			Status = VL53L0X_calc_dmax(
 800bd54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd56:	691b      	ldr	r3, [r3, #16]
 800bd58:	f107 0210 	add.w	r2, r7, #16
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	68f8      	ldr	r0, [r7, #12]
 800bd60:	f7ff fc9f 	bl	800b6a2 <VL53L0X_calc_dmax>
 800bd64:	4603      	mov	r3, r0
 800bd66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				pRangingMeasurementData->AmbientRateRtnMegaCps,
				&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800bd6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd6e:	b25b      	sxtb	r3, r3
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d103      	bne.n	800bd7c <VL53L0X_get_pal_range_status+0x11c>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	b29a      	uxth	r2, r3
 800bd78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd7a:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800bd7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd80:	b25b      	sxtb	r3, r3
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d113      	bne.n	800bdae <VL53L0X_get_pal_range_status+0x14e>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800bd86:	f107 0320 	add.w	r3, r7, #32
 800bd8a:	461a      	mov	r2, r3
 800bd8c:	2100      	movs	r1, #0
 800bd8e:	68f8      	ldr	r0, [r7, #12]
 800bd90:	f7fc f958 	bl	8008044 <VL53L0X_GetLimitCheckValue>
 800bd94:	4603      	mov	r3, r0
 800bd96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800bd9a:	6a3b      	ldr	r3, [r7, #32]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d006      	beq.n	800bdae <VL53L0X_get_pal_range_status+0x14e>
				(SigmaEstimate > SigmaLimitValue))
 800bda0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bda2:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d902      	bls.n	800bdae <VL53L0X_get_pal_range_status+0x14e>
					/* Limit Fail */
				SigmaLimitflag = 1;
 800bda8:	2301      	movs	r3, #1
 800bdaa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800bdae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bdb2:	b25b      	sxtb	r3, r3
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d109      	bne.n	800bdcc <VL53L0X_get_pal_range_status+0x16c>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800bdb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	2102      	movs	r1, #2
 800bdc0:	68f8      	ldr	r0, [r7, #12]
 800bdc2:	f7fc f8b9 	bl	8007f38 <VL53L0X_GetLimitCheckEnable>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800bdcc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d048      	beq.n	800be66 <VL53L0X_get_pal_range_status+0x206>
			(Status == VL53L0X_ERROR_NONE)) {
 800bdd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bdd8:	b25b      	sxtb	r3, r3
	if ((SignalRefClipLimitCheckEnable != 0) &&
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d143      	bne.n	800be66 <VL53L0X_get_pal_range_status+0x206>

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800bdde:	f107 031c 	add.w	r3, r7, #28
 800bde2:	461a      	mov	r2, r3
 800bde4:	2102      	movs	r1, #2
 800bde6:	68f8      	ldr	r0, [r7, #12]
 800bde8:	f7fc f92c 	bl	8008044 <VL53L0X_GetLimitCheckValue>
 800bdec:	4603      	mov	r3, r0
 800bdee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800bdf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bdf6:	b25b      	sxtb	r3, r3
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d107      	bne.n	800be0c <VL53L0X_get_pal_range_status+0x1ac>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800bdfc:	2201      	movs	r2, #1
 800bdfe:	21ff      	movs	r1, #255	; 0xff
 800be00:	68f8      	ldr	r0, [r7, #12]
 800be02:	f000 fb15 	bl	800c430 <VL53L0X_WrByte>
 800be06:	4603      	mov	r3, r0
 800be08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		if (Status == VL53L0X_ERROR_NONE)
 800be0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be10:	b25b      	sxtb	r3, r3
 800be12:	2b00      	cmp	r3, #0
 800be14:	d109      	bne.n	800be2a <VL53L0X_get_pal_range_status+0x1ca>
			Status = VL53L0X_RdWord(Dev,
 800be16:	f107 0316 	add.w	r3, r7, #22
 800be1a:	461a      	mov	r2, r3
 800be1c:	21b6      	movs	r1, #182	; 0xb6
 800be1e:	68f8      	ldr	r0, [r7, #12]
 800be20:	f000 fa92 	bl	800c348 <VL53L0X_RdWord>
 800be24:	4603      	mov	r3, r0
 800be26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800be2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be2e:	b25b      	sxtb	r3, r3
 800be30:	2b00      	cmp	r3, #0
 800be32:	d107      	bne.n	800be44 <VL53L0X_get_pal_range_status+0x1e4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800be34:	2200      	movs	r2, #0
 800be36:	21ff      	movs	r1, #255	; 0xff
 800be38:	68f8      	ldr	r0, [r7, #12]
 800be3a:	f000 faf9 	bl	800c430 <VL53L0X_WrByte>
 800be3e:	4603      	mov	r3, r0
 800be40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800be44:	8afb      	ldrh	r3, [r7, #22]
 800be46:	025b      	lsls	r3, r3, #9
 800be48:	633b      	str	r3, [r7, #48]	; 0x30
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be4e:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

		if ((SignalRefClipValue > 0) &&
 800be52:	69fb      	ldr	r3, [r7, #28]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d006      	beq.n	800be66 <VL53L0X_get_pal_range_status+0x206>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800be58:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800be5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d902      	bls.n	800be66 <VL53L0X_get_pal_range_status+0x206>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800be60:	2301      	movs	r3, #1
 800be62:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800be66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be6a:	b25b      	sxtb	r3, r3
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d109      	bne.n	800be84 <VL53L0X_get_pal_range_status+0x224>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800be70:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800be74:	461a      	mov	r2, r3
 800be76:	2103      	movs	r1, #3
 800be78:	68f8      	ldr	r0, [r7, #12]
 800be7a:	f7fc f85d 	bl	8007f38 <VL53L0X_GetLimitCheckEnable>
 800be7e:	4603      	mov	r3, r0
 800be80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800be84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d024      	beq.n	800bed6 <VL53L0X_get_pal_range_status+0x276>
			(Status == VL53L0X_ERROR_NONE)) {
 800be8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800be90:	b25b      	sxtb	r3, r3
	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800be92:	2b00      	cmp	r3, #0
 800be94:	d11f      	bne.n	800bed6 <VL53L0X_get_pal_range_status+0x276>

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800be96:	893b      	ldrh	r3, [r7, #8]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d102      	bne.n	800bea2 <VL53L0X_get_pal_range_status+0x242>
			SignalRatePerSpad = 0;
 800be9c:	2300      	movs	r3, #0
 800be9e:	63bb      	str	r3, [r7, #56]	; 0x38
 800bea0:	e005      	b.n	800beae <VL53L0X_get_pal_range_status+0x24e>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	021a      	lsls	r2, r3, #8
 800bea6:	893b      	ldrh	r3, [r7, #8]
 800bea8:	fbb2 f3f3 	udiv	r3, r2, r3
 800beac:	63bb      	str	r3, [r7, #56]	; 0x38
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800beae:	f107 0318 	add.w	r3, r7, #24
 800beb2:	461a      	mov	r2, r3
 800beb4:	2103      	movs	r1, #3
 800beb6:	68f8      	ldr	r0, [r7, #12]
 800beb8:	f7fc f8c4 	bl	8008044 <VL53L0X_GetLimitCheckValue>
 800bebc:	4603      	mov	r3, r0
 800bebe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800bec2:	69bb      	ldr	r3, [r7, #24]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d006      	beq.n	800bed6 <VL53L0X_get_pal_range_status+0x276>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800bec8:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800beca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800becc:	429a      	cmp	r2, r3
 800bece:	d202      	bcs.n	800bed6 <VL53L0X_get_pal_range_status+0x276>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800bed0:	2301      	movs	r3, #1
 800bed2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bed6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800beda:	b25b      	sxtb	r3, r3
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d14a      	bne.n	800bf76 <VL53L0X_get_pal_range_status+0x316>
		if (NoneFlag == 1) {
 800bee0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bee4:	2b01      	cmp	r3, #1
 800bee6:	d103      	bne.n	800bef0 <VL53L0X_get_pal_range_status+0x290>
			*pPalRangeStatus = 255;	 /* NONE */
 800bee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800beea:	22ff      	movs	r2, #255	; 0xff
 800beec:	701a      	strb	r2, [r3, #0]
 800beee:	e042      	b.n	800bf76 <VL53L0X_get_pal_range_status+0x316>
		} else if (DeviceRangeStatusInternal == 1 ||
 800bef0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bef4:	2b01      	cmp	r3, #1
 800bef6:	d007      	beq.n	800bf08 <VL53L0X_get_pal_range_status+0x2a8>
 800bef8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800befc:	2b02      	cmp	r3, #2
 800befe:	d003      	beq.n	800bf08 <VL53L0X_get_pal_range_status+0x2a8>
					DeviceRangeStatusInternal == 2 ||
 800bf00:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bf04:	2b03      	cmp	r3, #3
 800bf06:	d103      	bne.n	800bf10 <VL53L0X_get_pal_range_status+0x2b0>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800bf08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf0a:	2205      	movs	r2, #5
 800bf0c:	701a      	strb	r2, [r3, #0]
 800bf0e:	e032      	b.n	800bf76 <VL53L0X_get_pal_range_status+0x316>
		} else if (DeviceRangeStatusInternal == 6 ||
 800bf10:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bf14:	2b06      	cmp	r3, #6
 800bf16:	d003      	beq.n	800bf20 <VL53L0X_get_pal_range_status+0x2c0>
 800bf18:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bf1c:	2b09      	cmp	r3, #9
 800bf1e:	d103      	bne.n	800bf28 <VL53L0X_get_pal_range_status+0x2c8>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800bf20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf22:	2204      	movs	r2, #4
 800bf24:	701a      	strb	r2, [r3, #0]
 800bf26:	e026      	b.n	800bf76 <VL53L0X_get_pal_range_status+0x316>
		} else if (DeviceRangeStatusInternal == 8 ||
 800bf28:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bf2c:	2b08      	cmp	r3, #8
 800bf2e:	d007      	beq.n	800bf40 <VL53L0X_get_pal_range_status+0x2e0>
 800bf30:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bf34:	2b0a      	cmp	r3, #10
 800bf36:	d003      	beq.n	800bf40 <VL53L0X_get_pal_range_status+0x2e0>
					DeviceRangeStatusInternal == 10 ||
 800bf38:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	d103      	bne.n	800bf48 <VL53L0X_get_pal_range_status+0x2e8>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800bf40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf42:	2203      	movs	r2, #3
 800bf44:	701a      	strb	r2, [r3, #0]
 800bf46:	e016      	b.n	800bf76 <VL53L0X_get_pal_range_status+0x316>
		} else if (DeviceRangeStatusInternal == 4 ||
 800bf48:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bf4c:	2b04      	cmp	r3, #4
 800bf4e:	d003      	beq.n	800bf58 <VL53L0X_get_pal_range_status+0x2f8>
 800bf50:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bf54:	2b01      	cmp	r3, #1
 800bf56:	d103      	bne.n	800bf60 <VL53L0X_get_pal_range_status+0x300>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800bf58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf5a:	2202      	movs	r2, #2
 800bf5c:	701a      	strb	r2, [r3, #0]
 800bf5e:	e00a      	b.n	800bf76 <VL53L0X_get_pal_range_status+0x316>
		} else if (SigmaLimitflag == 1) {
 800bf60:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800bf64:	2b01      	cmp	r3, #1
 800bf66:	d103      	bne.n	800bf70 <VL53L0X_get_pal_range_status+0x310>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800bf68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	701a      	strb	r2, [r3, #0]
 800bf6e:	e002      	b.n	800bf76 <VL53L0X_get_pal_range_status+0x316>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800bf70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf72:	2200      	movs	r2, #0
 800bf74:	701a      	strb	r2, [r3, #0]
		}
	}

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800bf76:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800bf7a:	461a      	mov	r2, r3
 800bf7c:	2101      	movs	r1, #1
 800bf7e:	68f8      	ldr	r0, [r7, #12]
 800bf80:	f7fb ffda 	bl	8007f38 <VL53L0X_GetLimitCheckEnable>
 800bf84:	4603      	mov	r3, r0
 800bf86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800bf8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bf8e:	b25b      	sxtb	r3, r3
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d14f      	bne.n	800c034 <VL53L0X_get_pal_range_status+0x3d4>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800bf94:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d003      	beq.n	800bfa4 <VL53L0X_get_pal_range_status+0x344>
 800bf9c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800bfa0:	2b01      	cmp	r3, #1
 800bfa2:	d103      	bne.n	800bfac <VL53L0X_get_pal_range_status+0x34c>
			Temp8 = 1;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bfaa:	e002      	b.n	800bfb2 <VL53L0X_get_pal_range_status+0x352>
		else
			Temp8 = 0;
 800bfac:	2300      	movs	r3, #0
 800bfae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800bfb8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800bfbc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bfc0:	2b04      	cmp	r3, #4
 800bfc2:	d003      	beq.n	800bfcc <VL53L0X_get_pal_range_status+0x36c>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800bfc4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
		if ((DeviceRangeStatusInternal == 4) ||
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d103      	bne.n	800bfd4 <VL53L0X_get_pal_range_status+0x374>
			Temp8 = 1;
 800bfcc:	2301      	movs	r3, #1
 800bfce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bfd2:	e002      	b.n	800bfda <VL53L0X_get_pal_range_status+0x37a>
		else
			Temp8 = 0;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800bfe0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800bfe4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d003      	beq.n	800bff4 <VL53L0X_get_pal_range_status+0x394>
 800bfec:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800bff0:	2b01      	cmp	r3, #1
 800bff2:	d103      	bne.n	800bffc <VL53L0X_get_pal_range_status+0x39c>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800bff4:	2301      	movs	r3, #1
 800bff6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800bffa:	e002      	b.n	800c002 <VL53L0X_get_pal_range_status+0x3a2>
		else
			Temp8 = 0;
 800bffc:	2300      	movs	r3, #0
 800bffe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800c008:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800c00c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c010:	2b00      	cmp	r3, #0
 800c012:	d003      	beq.n	800c01c <VL53L0X_get_pal_range_status+0x3bc>
 800c014:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c018:	2b01      	cmp	r3, #1
 800c01a:	d103      	bne.n	800c024 <VL53L0X_get_pal_range_status+0x3c4>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800c01c:	2301      	movs	r3, #1
 800c01e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c022:	e002      	b.n	800c02a <VL53L0X_get_pal_range_status+0x3ca>
		else
			Temp8 = 0;
 800c024:	2300      	movs	r3, #0
 800c026:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800c030:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c034:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c038:	b25b      	sxtb	r3, r3

}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3740      	adds	r7, #64	; 0x40
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}

0800c042 <VL53L0X_check_part_used>:


VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev,
		uint8_t *Revision,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 800c042:	b580      	push	{r7, lr}
 800c044:	b088      	sub	sp, #32
 800c046:	af00      	add	r7, sp, #0
 800c048:	60f8      	str	r0, [r7, #12]
 800c04a:	60b9      	str	r1, [r7, #8]
 800c04c:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c04e:	2300      	movs	r3, #0
 800c050:	75fb      	strb	r3, [r7, #23]
	uint8_t ModuleIdInt;
	char *ProductId_tmp;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 2);
 800c052:	2102      	movs	r1, #2
 800c054:	68f8      	ldr	r0, [r7, #12]
 800c056:	f7fd fdd1 	bl	8009bfc <VL53L0X_get_info_from_device>
 800c05a:	4603      	mov	r3, r0
 800c05c:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE) {
 800c05e:	7dfb      	ldrb	r3, [r7, #23]
 800c060:	b25b      	sxtb	r3, r3
 800c062:	2b00      	cmp	r3, #0
 800c064:	d11d      	bne.n	800c0a2 <VL53L0X_check_part_used+0x60>
		ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800c06c:	77fb      	strb	r3, [r7, #31]

	if (ModuleIdInt == 0) {
 800c06e:	7ffb      	ldrb	r3, [r7, #31]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d107      	bne.n	800c084 <VL53L0X_check_part_used+0x42>
		*Revision = 0;
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	2200      	movs	r2, #0
 800c078:	701a      	strb	r2, [r3, #0]
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	3340      	adds	r3, #64	; 0x40
 800c07e:	2200      	movs	r2, #0
 800c080:	701a      	strb	r2, [r3, #0]
 800c082:	e00e      	b.n	800c0a2 <VL53L0X_check_part_used+0x60>
	} else {
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	701a      	strb	r2, [r3, #0]
		ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	f203 131f 	addw	r3, r3, #287	; 0x11f
 800c094:	61bb      	str	r3, [r7, #24]
			ProductId);
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId,
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	3340      	adds	r3, #64	; 0x40
 800c09a:	69b9      	ldr	r1, [r7, #24]
 800c09c:	4618      	mov	r0, r3
 800c09e:	f003 ff51 	bl	800ff44 <strcpy>
				   ProductId_tmp);
	}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c0a2:	7dfb      	ldrb	r3, [r7, #23]
 800c0a4:	b25b      	sxtb	r3, r3
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3720      	adds	r7, #32
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}
	...

0800c0b0 <VL53L0X_get_device_info>:


VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
				VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 800c0b0:	b5b0      	push	{r4, r5, r7, lr}
 800c0b2:	b084      	sub	sp, #16
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	73fb      	strb	r3, [r7, #15]
	uint8_t revision_id;
	uint8_t Revision;

	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 800c0be:	f107 030d 	add.w	r3, r7, #13
 800c0c2:	683a      	ldr	r2, [r7, #0]
 800c0c4:	4619      	mov	r1, r3
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f7ff ffbb 	bl	800c042 <VL53L0X_check_part_used>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE) {
 800c0d0:	7bfb      	ldrb	r3, [r7, #15]
 800c0d2:	b25b      	sxtb	r3, r3
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d13b      	bne.n	800c150 <VL53L0X_get_device_info+0xa0>
		if (Revision == 0) {
 800c0d8:	7b7b      	ldrb	r3, [r7, #13]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d108      	bne.n	800c0f0 <VL53L0X_get_device_info+0x40>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	4a30      	ldr	r2, [pc, #192]	; (800c1a4 <VL53L0X_get_device_info+0xf4>)
 800c0e2:	461c      	mov	r4, r3
 800c0e4:	4613      	mov	r3, r2
 800c0e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c0e8:	6020      	str	r0, [r4, #0]
 800c0ea:	6061      	str	r1, [r4, #4]
 800c0ec:	60a2      	str	r2, [r4, #8]
 800c0ee:	e027      	b.n	800c140 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS0);
		} else if ((Revision <= 34) && (Revision != 32)) {
 800c0f0:	7b7b      	ldrb	r3, [r7, #13]
 800c0f2:	2b22      	cmp	r3, #34	; 0x22
 800c0f4:	d80b      	bhi.n	800c10e <VL53L0X_get_device_info+0x5e>
 800c0f6:	7b7b      	ldrb	r3, [r7, #13]
 800c0f8:	2b20      	cmp	r3, #32
 800c0fa:	d008      	beq.n	800c10e <VL53L0X_get_device_info+0x5e>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	4a2a      	ldr	r2, [pc, #168]	; (800c1a8 <VL53L0X_get_device_info+0xf8>)
 800c100:	461c      	mov	r4, r3
 800c102:	4613      	mov	r3, r2
 800c104:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c106:	6020      	str	r0, [r4, #0]
 800c108:	6061      	str	r1, [r4, #4]
 800c10a:	60a2      	str	r2, [r4, #8]
 800c10c:	e018      	b.n	800c140 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
		} else if (Revision < 39) {
 800c10e:	7b7b      	ldrb	r3, [r7, #13]
 800c110:	2b26      	cmp	r3, #38	; 0x26
 800c112:	d808      	bhi.n	800c126 <VL53L0X_get_device_info+0x76>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	4a25      	ldr	r2, [pc, #148]	; (800c1ac <VL53L0X_get_device_info+0xfc>)
 800c118:	461c      	mov	r4, r3
 800c11a:	4613      	mov	r3, r2
 800c11c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c11e:	6020      	str	r0, [r4, #0]
 800c120:	6061      	str	r1, [r4, #4]
 800c122:	60a2      	str	r2, [r4, #8]
 800c124:	e00c      	b.n	800c140 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
		} else {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	4a21      	ldr	r2, [pc, #132]	; (800c1b0 <VL53L0X_get_device_info+0x100>)
 800c12a:	461d      	mov	r5, r3
 800c12c:	4614      	mov	r4, r2
 800c12e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c130:	6028      	str	r0, [r5, #0]
 800c132:	6069      	str	r1, [r5, #4]
 800c134:	60aa      	str	r2, [r5, #8]
 800c136:	60eb      	str	r3, [r5, #12]
 800c138:	6820      	ldr	r0, [r4, #0]
 800c13a:	6128      	str	r0, [r5, #16]
 800c13c:	7923      	ldrb	r3, [r4, #4]
 800c13e:	752b      	strb	r3, [r5, #20]
					VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
		}

		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	3320      	adds	r3, #32
 800c144:	491b      	ldr	r1, [pc, #108]	; (800c1b4 <VL53L0X_get_device_info+0x104>)
 800c146:	461a      	mov	r2, r3
 800c148:	460b      	mov	r3, r1
 800c14a:	cb03      	ldmia	r3!, {r0, r1}
 800c14c:	6010      	str	r0, [r2, #0]
 800c14e:	6051      	str	r1, [r2, #4]
				VL53L0X_STRING_DEVICE_INFO_TYPE);

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c150:	7bfb      	ldrb	r3, [r7, #15]
 800c152:	b25b      	sxtb	r3, r3
 800c154:	2b00      	cmp	r3, #0
 800c156:	d108      	bne.n	800c16a <VL53L0X_get_device_info+0xba>
		Status = VL53L0X_RdByte(Dev,
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	3360      	adds	r3, #96	; 0x60
 800c15c:	461a      	mov	r2, r3
 800c15e:	21c0      	movs	r1, #192	; 0xc0
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f000 f86a 	bl	800c23a <VL53L0X_RdByte>
 800c166:	4603      	mov	r3, r0
 800c168:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_IDENTIFICATION_MODEL_ID,
				&pVL53L0X_DeviceInfo->ProductType);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c16a:	7bfb      	ldrb	r3, [r7, #15]
 800c16c:	b25b      	sxtb	r3, r3
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d112      	bne.n	800c198 <VL53L0X_get_device_info+0xe8>
		Status = VL53L0X_RdByte(Dev,
 800c172:	f107 030e 	add.w	r3, r7, #14
 800c176:	461a      	mov	r2, r3
 800c178:	21c2      	movs	r1, #194	; 0xc2
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 f85d 	bl	800c23a <VL53L0X_RdByte>
 800c180:	4603      	mov	r3, r0
 800c182:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_IDENTIFICATION_REVISION_ID,
				&revision_id);
		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	2201      	movs	r2, #1
 800c188:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
					(revision_id & 0xF0) >> 4;
 800c18c:	7bbb      	ldrb	r3, [r7, #14]
 800c18e:	091b      	lsrs	r3, r3, #4
 800c190:	b2da      	uxtb	r2, r3
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	}

	return Status;
 800c198:	7bfb      	ldrb	r3, [r7, #15]
 800c19a:	b25b      	sxtb	r3, r3
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3710      	adds	r7, #16
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bdb0      	pop	{r4, r5, r7, pc}
 800c1a4:	08010ec0 	.word	0x08010ec0
 800c1a8:	08010ecc 	.word	0x08010ecc
 800c1ac:	08010ed8 	.word	0x08010ed8
 800c1b0:	08010ee4 	.word	0x08010ee4
 800c1b4:	08010efc 	.word	0x08010efc

0800c1b8 <_I2CWrite>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
    
int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b088      	sub	sp, #32
 800c1bc:	af02      	add	r7, sp, #8
 800c1be:	60f8      	str	r0, [r7, #12]
 800c1c0:	60b9      	str	r1, [r7, #8]
 800c1c2:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	330a      	adds	r3, #10
 800c1c8:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 800c1d6:	b299      	uxth	r1, r3
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	b29a      	uxth	r2, r3
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	9300      	str	r3, [sp, #0]
 800c1e0:	4613      	mov	r3, r2
 800c1e2:	68ba      	ldr	r2, [r7, #8]
 800c1e4:	f7f6 ff18 	bl	8003018 <HAL_I2C_Master_Transmit>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	613b      	str	r3, [r7, #16]
    
    return status;
 800c1ec:	693b      	ldr	r3, [r7, #16]
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3718      	adds	r7, #24
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}

0800c1f6 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count)
{
 800c1f6:	b580      	push	{r7, lr}
 800c1f8:	b088      	sub	sp, #32
 800c1fa:	af02      	add	r7, sp, #8
 800c1fc:	60f8      	str	r0, [r7, #12]
 800c1fe:	60b9      	str	r1, [r7, #8]
 800c200:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	330a      	adds	r3, #10
 800c206:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 800c214:	f043 0301 	orr.w	r3, r3, #1
 800c218:	b2db      	uxtb	r3, r3
 800c21a:	b299      	uxth	r1, r3
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	b29a      	uxth	r2, r3
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	9300      	str	r3, [sp, #0]
 800c224:	4613      	mov	r3, r2
 800c226:	68ba      	ldr	r2, [r7, #8]
 800c228:	f7f6 ffea 	bl	8003200 <HAL_I2C_Master_Receive>
 800c22c:	4603      	mov	r3, r0
 800c22e:	613b      	str	r3, [r7, #16]
    
    return status;
 800c230:	693b      	ldr	r3, [r7, #16]
}
 800c232:	4618      	mov	r0, r3
 800c234:	3718      	adds	r7, #24
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}

0800c23a <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data)
{
 800c23a:	b580      	push	{r7, lr}
 800c23c:	b086      	sub	sp, #24
 800c23e:	af00      	add	r7, sp, #0
 800c240:	60f8      	str	r0, [r7, #12]
 800c242:	460b      	mov	r3, r1
 800c244:	607a      	str	r2, [r7, #4]
 800c246:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c248:	2300      	movs	r3, #0
 800c24a:	74fb      	strb	r3, [r7, #19]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800c24c:	f107 030b 	add.w	r3, r7, #11
 800c250:	2201      	movs	r2, #1
 800c252:	4619      	mov	r1, r3
 800c254:	68f8      	ldr	r0, [r7, #12]
 800c256:	f7ff ffaf 	bl	800c1b8 <_I2CWrite>
 800c25a:	6178      	str	r0, [r7, #20]
    
    if( status_int ){
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d002      	beq.n	800c268 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c262:	23ec      	movs	r3, #236	; 0xec
 800c264:	74fb      	strb	r3, [r7, #19]
        goto done;
 800c266:	e00c      	b.n	800c282 <VL53L0X_RdByte+0x48>
    }
    
    status_int = _I2CRead(Dev, data, 1);
 800c268:	2201      	movs	r2, #1
 800c26a:	6879      	ldr	r1, [r7, #4]
 800c26c:	68f8      	ldr	r0, [r7, #12]
 800c26e:	f7ff ffc2 	bl	800c1f6 <_I2CRead>
 800c272:	6178      	str	r0, [r7, #20]
    
    if (status_int != 0) {
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d002      	beq.n	800c280 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c27a:	23ec      	movs	r3, #236	; 0xec
 800c27c:	74fb      	strb	r3, [r7, #19]
 800c27e:	e000      	b.n	800c282 <VL53L0X_RdByte+0x48>
    }
done:
 800c280:	bf00      	nop
    return Status;
 800c282:	7cfb      	ldrb	r3, [r7, #19]
 800c284:	b25b      	sxtb	r3, r3
}
 800c286:	4618      	mov	r0, r3
 800c288:	3718      	adds	r7, #24
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}
	...

0800c290 <VL53L0X_WriteMulti>:

uint8_t _I2CBuffer[64];


VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b086      	sub	sp, #24
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	607a      	str	r2, [r7, #4]
 800c29a:	603b      	str	r3, [r7, #0]
 800c29c:	460b      	mov	r3, r1
 800c29e:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	74fb      	strb	r3, [r7, #19]
    
    if (count > sizeof(_I2CBuffer) - 1) {
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	2b3f      	cmp	r3, #63	; 0x3f
 800c2a8:	d902      	bls.n	800c2b0 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800c2aa:	f06f 0303 	mvn.w	r3, #3
 800c2ae:	e016      	b.n	800c2de <VL53L0X_WriteMulti+0x4e>
    }
    
    _I2CBuffer[0] = index;
 800c2b0:	4a0d      	ldr	r2, [pc, #52]	; (800c2e8 <VL53L0X_WriteMulti+0x58>)
 800c2b2:	7afb      	ldrb	r3, [r7, #11]
 800c2b4:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800c2b6:	683a      	ldr	r2, [r7, #0]
 800c2b8:	6879      	ldr	r1, [r7, #4]
 800c2ba:	480c      	ldr	r0, [pc, #48]	; (800c2ec <VL53L0X_WriteMulti+0x5c>)
 800c2bc:	f003 fd96 	bl	800fdec <memcpy>
    
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	461a      	mov	r2, r3
 800c2c6:	4908      	ldr	r1, [pc, #32]	; (800c2e8 <VL53L0X_WriteMulti+0x58>)
 800c2c8:	68f8      	ldr	r0, [r7, #12]
 800c2ca:	f7ff ff75 	bl	800c1b8 <_I2CWrite>
 800c2ce:	6178      	str	r0, [r7, #20]
    
    if (status_int != 0) {
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d001      	beq.n	800c2da <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c2d6:	23ec      	movs	r3, #236	; 0xec
 800c2d8:	74fb      	strb	r3, [r7, #19]
    }
    
    return Status;
 800c2da:	7cfb      	ldrb	r3, [r7, #19]
 800c2dc:	b25b      	sxtb	r3, r3
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3718      	adds	r7, #24
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}
 800c2e6:	bf00      	nop
 800c2e8:	200037c4 	.word	0x200037c4
 800c2ec:	200037c5 	.word	0x200037c5

0800c2f0 <VL53L0X_ReadMulti>:

VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b086      	sub	sp, #24
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	60f8      	str	r0, [r7, #12]
 800c2f8:	607a      	str	r2, [r7, #4]
 800c2fa:	603b      	str	r3, [r7, #0]
 800c2fc:	460b      	mov	r3, r1
 800c2fe:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c300:	2300      	movs	r3, #0
 800c302:	74fb      	strb	r3, [r7, #19]
    int32_t status_int;
    
    status_int = _I2CWrite(Dev, &index, 1);
 800c304:	f107 030b 	add.w	r3, r7, #11
 800c308:	2201      	movs	r2, #1
 800c30a:	4619      	mov	r1, r3
 800c30c:	68f8      	ldr	r0, [r7, #12]
 800c30e:	f7ff ff53 	bl	800c1b8 <_I2CWrite>
 800c312:	6178      	str	r0, [r7, #20]
    
    if (status_int != 0) {
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d002      	beq.n	800c320 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c31a:	23ec      	movs	r3, #236	; 0xec
 800c31c:	74fb      	strb	r3, [r7, #19]
        goto done;
 800c31e:	e00c      	b.n	800c33a <VL53L0X_ReadMulti+0x4a>
    }
    
    status_int = _I2CRead(Dev, pdata, count);
 800c320:	683a      	ldr	r2, [r7, #0]
 800c322:	6879      	ldr	r1, [r7, #4]
 800c324:	68f8      	ldr	r0, [r7, #12]
 800c326:	f7ff ff66 	bl	800c1f6 <_I2CRead>
 800c32a:	6178      	str	r0, [r7, #20]
    
    if (status_int != 0) {
 800c32c:	697b      	ldr	r3, [r7, #20]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d002      	beq.n	800c338 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c332:	23ec      	movs	r3, #236	; 0xec
 800c334:	74fb      	strb	r3, [r7, #19]
 800c336:	e000      	b.n	800c33a <VL53L0X_ReadMulti+0x4a>
    }
done:
 800c338:	bf00      	nop
    return Status;
 800c33a:	7cfb      	ldrb	r3, [r7, #19]
 800c33c:	b25b      	sxtb	r3, r3
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3718      	adds	r7, #24
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}
	...

0800c348 <VL53L0X_RdWord>:


VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b086      	sub	sp, #24
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	60f8      	str	r0, [r7, #12]
 800c350:	460b      	mov	r3, r1
 800c352:	607a      	str	r2, [r7, #4]
 800c354:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c356:	2300      	movs	r3, #0
 800c358:	74fb      	strb	r3, [r7, #19]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800c35a:	f107 030b 	add.w	r3, r7, #11
 800c35e:	2201      	movs	r2, #1
 800c360:	4619      	mov	r1, r3
 800c362:	68f8      	ldr	r0, [r7, #12]
 800c364:	f7ff ff28 	bl	800c1b8 <_I2CWrite>
 800c368:	6178      	str	r0, [r7, #20]

    if( status_int ){
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d002      	beq.n	800c376 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c370:	23ec      	movs	r3, #236	; 0xec
 800c372:	74fb      	strb	r3, [r7, #19]
        goto done;
 800c374:	e017      	b.n	800c3a6 <VL53L0X_RdWord+0x5e>
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800c376:	2202      	movs	r2, #2
 800c378:	490e      	ldr	r1, [pc, #56]	; (800c3b4 <VL53L0X_RdWord+0x6c>)
 800c37a:	68f8      	ldr	r0, [r7, #12]
 800c37c:	f7ff ff3b 	bl	800c1f6 <_I2CRead>
 800c380:	6178      	str	r0, [r7, #20]
    
    if (status_int != 0) {
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d002      	beq.n	800c38e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c388:	23ec      	movs	r3, #236	; 0xec
 800c38a:	74fb      	strb	r3, [r7, #19]
        goto done;
 800c38c:	e00b      	b.n	800c3a6 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800c38e:	4b09      	ldr	r3, [pc, #36]	; (800c3b4 <VL53L0X_RdWord+0x6c>)
 800c390:	781b      	ldrb	r3, [r3, #0]
 800c392:	b29b      	uxth	r3, r3
 800c394:	021b      	lsls	r3, r3, #8
 800c396:	b29a      	uxth	r2, r3
 800c398:	4b06      	ldr	r3, [pc, #24]	; (800c3b4 <VL53L0X_RdWord+0x6c>)
 800c39a:	785b      	ldrb	r3, [r3, #1]
 800c39c:	b29b      	uxth	r3, r3
 800c39e:	4413      	add	r3, r2
 800c3a0:	b29a      	uxth	r2, r3
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	801a      	strh	r2, [r3, #0]
done:
    return Status;
 800c3a6:	7cfb      	ldrb	r3, [r7, #19]
 800c3a8:	b25b      	sxtb	r3, r3
}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3718      	adds	r7, #24
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}
 800c3b2:	bf00      	nop
 800c3b4:	200037c4 	.word	0x200037c4

0800c3b8 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b086      	sub	sp, #24
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	60f8      	str	r0, [r7, #12]
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	607a      	str	r2, [r7, #4]
 800c3c4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	74fb      	strb	r3, [r7, #19]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800c3ca:	f107 030b 	add.w	r3, r7, #11
 800c3ce:	2201      	movs	r2, #1
 800c3d0:	4619      	mov	r1, r3
 800c3d2:	68f8      	ldr	r0, [r7, #12]
 800c3d4:	f7ff fef0 	bl	800c1b8 <_I2CWrite>
 800c3d8:	6178      	str	r0, [r7, #20]
    
    if (status_int != 0) {
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d002      	beq.n	800c3e6 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c3e0:	23ec      	movs	r3, #236	; 0xec
 800c3e2:	74fb      	strb	r3, [r7, #19]
        goto done;
 800c3e4:	e01b      	b.n	800c41e <VL53L0X_RdDWord+0x66>
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800c3e6:	2204      	movs	r2, #4
 800c3e8:	4910      	ldr	r1, [pc, #64]	; (800c42c <VL53L0X_RdDWord+0x74>)
 800c3ea:	68f8      	ldr	r0, [r7, #12]
 800c3ec:	f7ff ff03 	bl	800c1f6 <_I2CRead>
 800c3f0:	6178      	str	r0, [r7, #20]
    
    if (status_int != 0) {
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d002      	beq.n	800c3fe <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c3f8:	23ec      	movs	r3, #236	; 0xec
 800c3fa:	74fb      	strb	r3, [r7, #19]
        goto done;
 800c3fc:	e00f      	b.n	800c41e <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800c3fe:	4b0b      	ldr	r3, [pc, #44]	; (800c42c <VL53L0X_RdDWord+0x74>)
 800c400:	781b      	ldrb	r3, [r3, #0]
 800c402:	061a      	lsls	r2, r3, #24
 800c404:	4b09      	ldr	r3, [pc, #36]	; (800c42c <VL53L0X_RdDWord+0x74>)
 800c406:	785b      	ldrb	r3, [r3, #1]
 800c408:	041b      	lsls	r3, r3, #16
 800c40a:	441a      	add	r2, r3
 800c40c:	4b07      	ldr	r3, [pc, #28]	; (800c42c <VL53L0X_RdDWord+0x74>)
 800c40e:	789b      	ldrb	r3, [r3, #2]
 800c410:	021b      	lsls	r3, r3, #8
 800c412:	4413      	add	r3, r2
 800c414:	4a05      	ldr	r2, [pc, #20]	; (800c42c <VL53L0X_RdDWord+0x74>)
 800c416:	78d2      	ldrb	r2, [r2, #3]
 800c418:	441a      	add	r2, r3
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	601a      	str	r2, [r3, #0]

done:
    return Status;
 800c41e:	7cfb      	ldrb	r3, [r7, #19]
 800c420:	b25b      	sxtb	r3, r3
}
 800c422:	4618      	mov	r0, r3
 800c424:	3718      	adds	r7, #24
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}
 800c42a:	bf00      	nop
 800c42c:	200037c4 	.word	0x200037c4

0800c430 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b084      	sub	sp, #16
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	460b      	mov	r3, r1
 800c43a:	70fb      	strb	r3, [r7, #3]
 800c43c:	4613      	mov	r3, r2
 800c43e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c440:	2300      	movs	r3, #0
 800c442:	72fb      	strb	r3, [r7, #11]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800c444:	4a0b      	ldr	r2, [pc, #44]	; (800c474 <VL53L0X_WrByte+0x44>)
 800c446:	78fb      	ldrb	r3, [r7, #3]
 800c448:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800c44a:	4a0a      	ldr	r2, [pc, #40]	; (800c474 <VL53L0X_WrByte+0x44>)
 800c44c:	78bb      	ldrb	r3, [r7, #2]
 800c44e:	7053      	strb	r3, [r2, #1]

    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800c450:	2202      	movs	r2, #2
 800c452:	4908      	ldr	r1, [pc, #32]	; (800c474 <VL53L0X_WrByte+0x44>)
 800c454:	6878      	ldr	r0, [r7, #4]
 800c456:	f7ff feaf 	bl	800c1b8 <_I2CWrite>
 800c45a:	60f8      	str	r0, [r7, #12]
    
    if (status_int != 0) {
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d001      	beq.n	800c466 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c462:	23ec      	movs	r3, #236	; 0xec
 800c464:	72fb      	strb	r3, [r7, #11]
    }
    
    return Status;
 800c466:	7afb      	ldrb	r3, [r7, #11]
 800c468:	b25b      	sxtb	r3, r3
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3710      	adds	r7, #16
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	200037c4 	.word	0x200037c4

0800c478 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b084      	sub	sp, #16
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	460b      	mov	r3, r1
 800c482:	70fb      	strb	r3, [r7, #3]
 800c484:	4613      	mov	r3, r2
 800c486:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c488:	2300      	movs	r3, #0
 800c48a:	72fb      	strb	r3, [r7, #11]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800c48c:	4a0e      	ldr	r2, [pc, #56]	; (800c4c8 <VL53L0X_WrWord+0x50>)
 800c48e:	78fb      	ldrb	r3, [r7, #3]
 800c490:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800c492:	883b      	ldrh	r3, [r7, #0]
 800c494:	0a1b      	lsrs	r3, r3, #8
 800c496:	b29b      	uxth	r3, r3
 800c498:	b2da      	uxtb	r2, r3
 800c49a:	4b0b      	ldr	r3, [pc, #44]	; (800c4c8 <VL53L0X_WrWord+0x50>)
 800c49c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800c49e:	883b      	ldrh	r3, [r7, #0]
 800c4a0:	b2da      	uxtb	r2, r3
 800c4a2:	4b09      	ldr	r3, [pc, #36]	; (800c4c8 <VL53L0X_WrWord+0x50>)
 800c4a4:	709a      	strb	r2, [r3, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800c4a6:	2203      	movs	r2, #3
 800c4a8:	4907      	ldr	r1, [pc, #28]	; (800c4c8 <VL53L0X_WrWord+0x50>)
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f7ff fe84 	bl	800c1b8 <_I2CWrite>
 800c4b0:	60f8      	str	r0, [r7, #12]
    
    if (status_int != 0) {
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d001      	beq.n	800c4bc <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c4b8:	23ec      	movs	r3, #236	; 0xec
 800c4ba:	72fb      	strb	r3, [r7, #11]
    }
    
    return Status;
 800c4bc:	7afb      	ldrb	r3, [r7, #11]
 800c4be:	b25b      	sxtb	r3, r3
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3710      	adds	r7, #16
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}
 800c4c8:	200037c4 	.word	0x200037c4

0800c4cc <VL53L0X_UpdateByte>:

    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b084      	sub	sp, #16
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
 800c4d4:	4608      	mov	r0, r1
 800c4d6:	4611      	mov	r1, r2
 800c4d8:	461a      	mov	r2, r3
 800c4da:	4603      	mov	r3, r0
 800c4dc:	70fb      	strb	r3, [r7, #3]
 800c4de:	460b      	mov	r3, r1
 800c4e0:	70bb      	strb	r3, [r7, #2]
 800c4e2:	4613      	mov	r3, r2
 800c4e4:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800c4ea:	f107 020e 	add.w	r2, r7, #14
 800c4ee:	78fb      	ldrb	r3, [r7, #3]
 800c4f0:	4619      	mov	r1, r3
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f7ff fea1 	bl	800c23a <VL53L0X_RdByte>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	73fb      	strb	r3, [r7, #15]
    
    if (Status) {
 800c4fc:	7bfb      	ldrb	r3, [r7, #15]
 800c4fe:	b25b      	sxtb	r3, r3
 800c500:	2b00      	cmp	r3, #0
 800c502:	d110      	bne.n	800c526 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    
    data = (data & AndData) | OrData;
 800c504:	7bba      	ldrb	r2, [r7, #14]
 800c506:	78bb      	ldrb	r3, [r7, #2]
 800c508:	4013      	ands	r3, r2
 800c50a:	b2da      	uxtb	r2, r3
 800c50c:	787b      	ldrb	r3, [r7, #1]
 800c50e:	4313      	orrs	r3, r2
 800c510:	b2db      	uxtb	r3, r3
 800c512:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800c514:	7bba      	ldrb	r2, [r7, #14]
 800c516:	78fb      	ldrb	r3, [r7, #3]
 800c518:	4619      	mov	r1, r3
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f7ff ff88 	bl	800c430 <VL53L0X_WrByte>
 800c520:	4603      	mov	r3, r0
 800c522:	73fb      	strb	r3, [r7, #15]
 800c524:	e000      	b.n	800c528 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800c526:	bf00      	nop
done:
    return Status;
 800c528:	7bfb      	ldrb	r3, [r7, #15]
 800c52a:	b25b      	sxtb	r3, r3
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3710      	adds	r7, #16
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}

0800c534 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b084      	sub	sp, #16
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800c53c:	2300      	movs	r3, #0
 800c53e:	73fb      	strb	r3, [r7, #15]

    /* do nothing */
    VL53L0X_OsDelay();
 800c540:	2002      	movs	r0, #2
 800c542:	f7f5 ff61 	bl	8002408 <HAL_Delay>
    return status;
 800c546:	7bfb      	ldrb	r3, [r7, #15]
 800c548:	b25b      	sxtb	r3, r3
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3710      	adds	r7, #16
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}
	...

0800c554 <VL53L0X_PROXIMITY_Init>:

/**
  * @brief  VL53L0X proximity sensor Initialization.
  */
void VL53L0X_PROXIMITY_Init(void)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b09a      	sub	sp, #104	; 0x68
 800c558:	af00      	add	r7, sp, #0
  uint16_t vl53l0x_id = 0; 
 800c55a:	2300      	movs	r3, #0
 800c55c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  VL53L0X_DeviceInfo_t VL53L0X_DeviceInfo;
  
  /* Initialize IO interface */
  SENSOR_IO_Init();
 800c560:	f7fa fc3e 	bl	8006de0 <SENSOR_IO_Init>
  VL53L0X_PROXIMITY_MspInit();
 800c564:	f000 f84e 	bl	800c604 <VL53L0X_PROXIMITY_MspInit>
  
  memset(&VL53L0X_DeviceInfo, 0, sizeof(VL53L0X_DeviceInfo_t));
 800c568:	463b      	mov	r3, r7
 800c56a:	2263      	movs	r2, #99	; 0x63
 800c56c:	2100      	movs	r1, #0
 800c56e:	4618      	mov	r0, r3
 800c570:	f003 fc47 	bl	800fe02 <memset>
  
  if (VL53L0X_ERROR_NONE == VL53L0X_GetDeviceInfo(&Dev, &VL53L0X_DeviceInfo))
 800c574:	463b      	mov	r3, r7
 800c576:	4619      	mov	r1, r3
 800c578:	4817      	ldr	r0, [pc, #92]	; (800c5d8 <VL53L0X_PROXIMITY_Init+0x84>)
 800c57a:	f7fa fd97 	bl	80070ac <VL53L0X_GetDeviceInfo>
 800c57e:	4603      	mov	r3, r0
 800c580:	2b00      	cmp	r3, #0
 800c582:	d121      	bne.n	800c5c8 <VL53L0X_PROXIMITY_Init+0x74>
  {  
    if (VL53L0X_ERROR_NONE == VL53L0X_RdWord(&Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, (uint16_t *) &vl53l0x_id))
 800c584:	f107 0366 	add.w	r3, r7, #102	; 0x66
 800c588:	461a      	mov	r2, r3
 800c58a:	21c0      	movs	r1, #192	; 0xc0
 800c58c:	4812      	ldr	r0, [pc, #72]	; (800c5d8 <VL53L0X_PROXIMITY_Init+0x84>)
 800c58e:	f7ff fedb 	bl	800c348 <VL53L0X_RdWord>
 800c592:	4603      	mov	r3, r0
 800c594:	2b00      	cmp	r3, #0
 800c596:	d113      	bne.n	800c5c0 <VL53L0X_PROXIMITY_Init+0x6c>
    {
      if (vl53l0x_id == VL53L0X_ID)
 800c598:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800c59c:	f64e 62aa 	movw	r2, #61098	; 0xeeaa
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d114      	bne.n	800c5ce <VL53L0X_PROXIMITY_Init+0x7a>
      {
        if (VL53L0X_ERROR_NONE == VL53L0X_DataInit(&Dev))
 800c5a4:	480c      	ldr	r0, [pc, #48]	; (800c5d8 <VL53L0X_PROXIMITY_Init+0x84>)
 800c5a6:	f7fa fda7 	bl	80070f8 <VL53L0X_DataInit>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d10e      	bne.n	800c5ce <VL53L0X_PROXIMITY_Init+0x7a>
        {
          Dev.Present = 1;
 800c5b0:	4b09      	ldr	r3, [pc, #36]	; (800c5d8 <VL53L0X_PROXIMITY_Init+0x84>)
 800c5b2:	2201      	movs	r2, #1
 800c5b4:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
          SetupSingleShot(&Dev);
 800c5b8:	4807      	ldr	r0, [pc, #28]	; (800c5d8 <VL53L0X_PROXIMITY_Init+0x84>)
 800c5ba:	f000 f843 	bl	800c644 <SetupSingleShot>
  }
  else
  {
    printf("VL53L0X Time of Flight Failed to get infos!\n");
  }  
}
 800c5be:	e006      	b.n	800c5ce <VL53L0X_PROXIMITY_Init+0x7a>
      printf("VL53L0X Time of Flight Failed to Initialize!\n");
 800c5c0:	4806      	ldr	r0, [pc, #24]	; (800c5dc <VL53L0X_PROXIMITY_Init+0x88>)
 800c5c2:	f003 fc83 	bl	800fecc <puts>
}
 800c5c6:	e002      	b.n	800c5ce <VL53L0X_PROXIMITY_Init+0x7a>
    printf("VL53L0X Time of Flight Failed to get infos!\n");
 800c5c8:	4805      	ldr	r0, [pc, #20]	; (800c5e0 <VL53L0X_PROXIMITY_Init+0x8c>)
 800c5ca:	f003 fc7f 	bl	800fecc <puts>
}
 800c5ce:	bf00      	nop
 800c5d0:	3768      	adds	r7, #104	; 0x68
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
 800c5d6:	bf00      	nop
 800c5d8:	200004a0 	.word	0x200004a0
 800c5dc:	08011364 	.word	0x08011364
 800c5e0:	08011394 	.word	0x08011394

0800c5e4 <VL53L0X_PROXIMITY_GetDistance>:
/**
  * @brief  Get distance from VL53L0X proximity sensor.
  * @retval Distance in mm
  */
uint16_t VL53L0X_PROXIMITY_GetDistance(void)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b088      	sub	sp, #32
 800c5e8:	af00      	add	r7, sp, #0
  VL53L0X_RangingMeasurementData_t RangingMeasurementData;
  
  VL53L0X_PerformSingleRangingMeasurement(&Dev, &RangingMeasurementData);
 800c5ea:	1d3b      	adds	r3, r7, #4
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	4804      	ldr	r0, [pc, #16]	; (800c600 <VL53L0X_PROXIMITY_GetDistance+0x1c>)
 800c5f0:	f7fc f95e 	bl	80088b0 <VL53L0X_PerformSingleRangingMeasurement>
  
  return RangingMeasurementData.RangeMilliMeter;  
 800c5f4:	89bb      	ldrh	r3, [r7, #12]
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3720      	adds	r7, #32
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}
 800c5fe:	bf00      	nop
 800c600:	200004a0 	.word	0x200004a0

0800c604 <VL53L0X_PROXIMITY_MspInit>:

/**
  * @brief  VL53L0X proximity sensor Msp Initialization.
  */
void VL53L0X_PROXIMITY_MspInit(void)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b086      	sub	sp, #24
 800c608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /*Configure GPIO pin : VL53L0X_XSHUT_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin;
 800c60a:	2340      	movs	r3, #64	; 0x40
 800c60c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c60e:	2301      	movs	r3, #1
 800c610:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c612:	2301      	movs	r3, #1
 800c614:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c616:	2302      	movs	r3, #2
 800c618:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
 800c61a:	1d3b      	adds	r3, r7, #4
 800c61c:	4619      	mov	r1, r3
 800c61e:	4808      	ldr	r0, [pc, #32]	; (800c640 <VL53L0X_PROXIMITY_MspInit+0x3c>)
 800c620:	f7f6 f932 	bl	8002888 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(VL53L0X_XSHUT_GPIO_Port, VL53L0X_XSHUT_Pin, GPIO_PIN_SET);
 800c624:	2201      	movs	r2, #1
 800c626:	2140      	movs	r1, #64	; 0x40
 800c628:	4805      	ldr	r0, [pc, #20]	; (800c640 <VL53L0X_PROXIMITY_MspInit+0x3c>)
 800c62a:	f7f6 fbe1 	bl	8002df0 <HAL_GPIO_WritePin>
  
  HAL_Delay(1000);  
 800c62e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c632:	f7f5 fee9 	bl	8002408 <HAL_Delay>
}
 800c636:	bf00      	nop
 800c638:	3718      	adds	r7, #24
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
 800c63e:	bf00      	nop
 800c640:	48000800 	.word	0x48000800

0800c644 <SetupSingleShot>:

/**
 *  Setup all detected sensors for single shot mode and setup ranging configuration
 */
void SetupSingleShot(VL53L0X_Dev_t* pDev)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b08a      	sub	sp, #40	; 0x28
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
  int status;
  uint8_t VhvSettings;
  uint8_t PhaseCal;
  uint32_t refSpadCount;
  uint8_t isApertureSpads;
  FixPoint1616_t signalLimit = (FixPoint1616_t)(0.25*65536);
 800c64c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c650:	627b      	str	r3, [r7, #36]	; 0x24
  FixPoint1616_t sigmaLimit = (FixPoint1616_t)(18*65536);
 800c652:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800c656:	623b      	str	r3, [r7, #32]
  uint32_t timingBudget = 33000;
 800c658:	f248 03e8 	movw	r3, #33000	; 0x80e8
 800c65c:	61fb      	str	r3, [r7, #28]
  uint8_t preRangeVcselPeriod = 14;
 800c65e:	230e      	movs	r3, #14
 800c660:	76fb      	strb	r3, [r7, #27]
  uint8_t finalRangeVcselPeriod = 10;
 800c662:	230a      	movs	r3, #10
 800c664:	76bb      	strb	r3, [r7, #26]
                          
  if( pDev->Present){
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	f000 80a4 	beq.w	800c7ba <SetupSingleShot+0x176>
    status=VL53L0X_StaticInit(pDev);
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f7fa fee4 	bl	8007440 <VL53L0X_StaticInit>
 800c678:	4603      	mov	r3, r0
 800c67a:	617b      	str	r3, [r7, #20]
    if( status ){
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d002      	beq.n	800c688 <SetupSingleShot+0x44>
      printf("VL53L0X_StaticInit failed\n");
 800c682:	4850      	ldr	r0, [pc, #320]	; (800c7c4 <SetupSingleShot+0x180>)
 800c684:	f003 fc22 	bl	800fecc <puts>
    }
    
    status = VL53L0X_PerformRefCalibration(pDev, &VhvSettings, &PhaseCal);
 800c688:	f107 0212 	add.w	r2, r7, #18
 800c68c:	f107 0313 	add.w	r3, r7, #19
 800c690:	4619      	mov	r1, r3
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f7fb fdca 	bl	800822c <VL53L0X_PerformRefCalibration>
 800c698:	4603      	mov	r3, r0
 800c69a:	617b      	str	r3, [r7, #20]
    if( status ){
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d002      	beq.n	800c6a8 <SetupSingleShot+0x64>
      printf("VL53L0X_PerformRefCalibration failed\n");
 800c6a2:	4849      	ldr	r0, [pc, #292]	; (800c7c8 <SetupSingleShot+0x184>)
 800c6a4:	f003 fc12 	bl	800fecc <puts>
    }
    
    status = VL53L0X_PerformRefSpadManagement(pDev, &refSpadCount, &isApertureSpads);
 800c6a8:	f107 020b 	add.w	r2, r7, #11
 800c6ac:	f107 030c 	add.w	r3, r7, #12
 800c6b0:	4619      	mov	r1, r3
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f7fc fb0a 	bl	8008ccc <VL53L0X_PerformRefSpadManagement>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	617b      	str	r3, [r7, #20]
    if( status ){
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d002      	beq.n	800c6c8 <SetupSingleShot+0x84>
      printf("VL53L0X_PerformRefSpadManagement failed\n");
 800c6c2:	4842      	ldr	r0, [pc, #264]	; (800c7cc <SetupSingleShot+0x188>)
 800c6c4:	f003 fc02 	bl	800fecc <puts>
    }
    
    status = VL53L0X_SetDeviceMode(pDev, VL53L0X_DEVICEMODE_SINGLE_RANGING); /* Setup in single ranging mode */
 800c6c8:	2100      	movs	r1, #0
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f7fb f910 	bl	80078f0 <VL53L0X_SetDeviceMode>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	617b      	str	r3, [r7, #20]
    if( status ){
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d002      	beq.n	800c6e0 <SetupSingleShot+0x9c>
      printf("VL53L0X_SetDeviceMode failed\n");
 800c6da:	483d      	ldr	r0, [pc, #244]	; (800c7d0 <SetupSingleShot+0x18c>)
 800c6dc:	f003 fbf6 	bl	800fecc <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(pDev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1); /* Enable Sigma limit */
 800c6e0:	2201      	movs	r2, #1
 800c6e2:	2100      	movs	r1, #0
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f7fb fb9b 	bl	8007e20 <VL53L0X_SetLimitCheckEnable>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	617b      	str	r3, [r7, #20]
    if( status ){
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d002      	beq.n	800c6fa <SetupSingleShot+0xb6>
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 800c6f4:	4837      	ldr	r0, [pc, #220]	; (800c7d4 <SetupSingleShot+0x190>)
 800c6f6:	f003 fbe9 	bl	800fecc <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(pDev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1); /* Enable Signa limit */
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	2101      	movs	r1, #1
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f7fb fb8e 	bl	8007e20 <VL53L0X_SetLimitCheckEnable>
 800c704:	4603      	mov	r3, r0
 800c706:	617b      	str	r3, [r7, #20]
    if( status ){
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d002      	beq.n	800c714 <SetupSingleShot+0xd0>
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 800c70e:	4831      	ldr	r0, [pc, #196]	; (800c7d4 <SetupSingleShot+0x190>)
 800c710:	f003 fbdc 	bl	800fecc <puts>
    }
    
    /* Ranging configuration */
    signalLimit = (FixPoint1616_t)(0.1*65536);
 800c714:	f641 1399 	movw	r3, #6553	; 0x1999
 800c718:	627b      	str	r3, [r7, #36]	; 0x24
    sigmaLimit = (FixPoint1616_t)(60*65536);
 800c71a:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800c71e:	623b      	str	r3, [r7, #32]
    timingBudget = 33000;
 800c720:	f248 03e8 	movw	r3, #33000	; 0x80e8
 800c724:	61fb      	str	r3, [r7, #28]
    preRangeVcselPeriod = 18;
 800c726:	2312      	movs	r3, #18
 800c728:	76fb      	strb	r3, [r7, #27]
    finalRangeVcselPeriod = 14;
 800c72a:	230e      	movs	r3, #14
 800c72c:	76bb      	strb	r3, [r7, #26]
    
    status = VL53L0X_SetLimitCheckValue(pDev,  VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 800c72e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c730:	2101      	movs	r1, #1
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f7fb fc24 	bl	8007f80 <VL53L0X_SetLimitCheckValue>
 800c738:	4603      	mov	r3, r0
 800c73a:	617b      	str	r3, [r7, #20]
    
    if( status ){
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d002      	beq.n	800c748 <SetupSingleShot+0x104>
      printf("VL53L0X_SetLimitCheckValue failed\n");
 800c742:	4825      	ldr	r0, [pc, #148]	; (800c7d8 <SetupSingleShot+0x194>)
 800c744:	f003 fbc2 	bl	800fecc <puts>
    }
    
    status = VL53L0X_SetLimitCheckValue(pDev,  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 800c748:	6a3a      	ldr	r2, [r7, #32]
 800c74a:	2100      	movs	r1, #0
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f7fb fc17 	bl	8007f80 <VL53L0X_SetLimitCheckValue>
 800c752:	4603      	mov	r3, r0
 800c754:	617b      	str	r3, [r7, #20]
    if( status ){
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d002      	beq.n	800c762 <SetupSingleShot+0x11e>
      printf("VL53L0X_SetLimitCheckValue failed\n");
 800c75c:	481e      	ldr	r0, [pc, #120]	; (800c7d8 <SetupSingleShot+0x194>)
 800c75e:	f003 fbb5 	bl	800fecc <puts>
    }
    
    status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(pDev,  timingBudget);
 800c762:	69f9      	ldr	r1, [r7, #28]
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f7fb f93d 	bl	80079e4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800c76a:	4603      	mov	r3, r0
 800c76c:	617b      	str	r3, [r7, #20]
    if( status ){
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d002      	beq.n	800c77a <SetupSingleShot+0x136>
      printf("VL53L0X_SetMeasurementTimingBudgetMicroSeconds failed\n");
 800c774:	4819      	ldr	r0, [pc, #100]	; (800c7dc <SetupSingleShot+0x198>)
 800c776:	f003 fba9 	bl	800fecc <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(pDev,  VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 800c77a:	7efb      	ldrb	r3, [r7, #27]
 800c77c:	461a      	mov	r2, r3
 800c77e:	2100      	movs	r1, #0
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f7fb f955 	bl	8007a30 <VL53L0X_SetVcselPulsePeriod>
 800c786:	4603      	mov	r3, r0
 800c788:	617b      	str	r3, [r7, #20]
    if( status ){
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d002      	beq.n	800c796 <SetupSingleShot+0x152>
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 800c790:	4813      	ldr	r0, [pc, #76]	; (800c7e0 <SetupSingleShot+0x19c>)
 800c792:	f003 fb9b 	bl	800fecc <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(pDev,  VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 800c796:	7ebb      	ldrb	r3, [r7, #26]
 800c798:	461a      	mov	r2, r3
 800c79a:	2101      	movs	r1, #1
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f7fb f947 	bl	8007a30 <VL53L0X_SetVcselPulsePeriod>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	617b      	str	r3, [r7, #20]
    if( status ){
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d002      	beq.n	800c7b2 <SetupSingleShot+0x16e>
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 800c7ac:	480c      	ldr	r0, [pc, #48]	; (800c7e0 <SetupSingleShot+0x19c>)
 800c7ae:	f003 fb8d 	bl	800fecc <puts>
    }
    
    pDev->LeakyFirst=1;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2201      	movs	r2, #1
 800c7b6:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
  }
}
 800c7ba:	bf00      	nop
 800c7bc:	3728      	adds	r7, #40	; 0x28
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}
 800c7c2:	bf00      	nop
 800c7c4:	080113c0 	.word	0x080113c0
 800c7c8:	080113dc 	.word	0x080113dc
 800c7cc:	08011404 	.word	0x08011404
 800c7d0:	0801142c 	.word	0x0801142c
 800c7d4:	0801144c 	.word	0x0801144c
 800c7d8:	08011470 	.word	0x08011470
 800c7dc:	08011494 	.word	0x08011494
 800c7e0:	080114cc 	.word	0x080114cc

0800c7e4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b085      	sub	sp, #20
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c7f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c7f6:	2b84      	cmp	r3, #132	; 0x84
 800c7f8:	d005      	beq.n	800c806 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c7fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	4413      	add	r3, r2
 800c802:	3303      	adds	r3, #3
 800c804:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c806:	68fb      	ldr	r3, [r7, #12]
}
 800c808:	4618      	mov	r0, r3
 800c80a:	3714      	adds	r7, #20
 800c80c:	46bd      	mov	sp, r7
 800c80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c812:	4770      	bx	lr

0800c814 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c814:	b480      	push	{r7}
 800c816:	b083      	sub	sp, #12
 800c818:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c81a:	f3ef 8305 	mrs	r3, IPSR
 800c81e:	607b      	str	r3, [r7, #4]
  return(result);
 800c820:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c822:	2b00      	cmp	r3, #0
 800c824:	bf14      	ite	ne
 800c826:	2301      	movne	r3, #1
 800c828:	2300      	moveq	r3, #0
 800c82a:	b2db      	uxtb	r3, r3
}
 800c82c:	4618      	mov	r0, r3
 800c82e:	370c      	adds	r7, #12
 800c830:	46bd      	mov	sp, r7
 800c832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c836:	4770      	bx	lr

0800c838 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c83c:	f001 fc98 	bl	800e170 <vTaskStartScheduler>
  
  return osOK;
 800c840:	2300      	movs	r3, #0
}
 800c842:	4618      	mov	r0, r3
 800c844:	bd80      	pop	{r7, pc}

0800c846 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c846:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c848:	b089      	sub	sp, #36	; 0x24
 800c84a:	af04      	add	r7, sp, #16
 800c84c:	6078      	str	r0, [r7, #4]
 800c84e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	695b      	ldr	r3, [r3, #20]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d020      	beq.n	800c89a <osThreadCreate+0x54>
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	699b      	ldr	r3, [r3, #24]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d01c      	beq.n	800c89a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	685c      	ldr	r4, [r3, #4]
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681d      	ldr	r5, [r3, #0]
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	691e      	ldr	r6, [r3, #16]
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c872:	4618      	mov	r0, r3
 800c874:	f7ff ffb6 	bl	800c7e4 <makeFreeRtosPriority>
 800c878:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	695b      	ldr	r3, [r3, #20]
 800c87e:	687a      	ldr	r2, [r7, #4]
 800c880:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c882:	9202      	str	r2, [sp, #8]
 800c884:	9301      	str	r3, [sp, #4]
 800c886:	9100      	str	r1, [sp, #0]
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	4632      	mov	r2, r6
 800c88c:	4629      	mov	r1, r5
 800c88e:	4620      	mov	r0, r4
 800c890:	f001 fa96 	bl	800ddc0 <xTaskCreateStatic>
 800c894:	4603      	mov	r3, r0
 800c896:	60fb      	str	r3, [r7, #12]
 800c898:	e01c      	b.n	800c8d4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	685c      	ldr	r4, [r3, #4]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c8a6:	b29e      	uxth	r6, r3
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f7ff ff98 	bl	800c7e4 <makeFreeRtosPriority>
 800c8b4:	4602      	mov	r2, r0
 800c8b6:	f107 030c 	add.w	r3, r7, #12
 800c8ba:	9301      	str	r3, [sp, #4]
 800c8bc:	9200      	str	r2, [sp, #0]
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	4632      	mov	r2, r6
 800c8c2:	4629      	mov	r1, r5
 800c8c4:	4620      	mov	r0, r4
 800c8c6:	f001 fad5 	bl	800de74 <xTaskCreate>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	d001      	beq.n	800c8d4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	e000      	b.n	800c8d6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3714      	adds	r7, #20
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c8de <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c8de:	b580      	push	{r7, lr}
 800c8e0:	b084      	sub	sp, #16
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d001      	beq.n	800c8f4 <osDelay+0x16>
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	e000      	b.n	800c8f6 <osDelay+0x18>
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f001 fc06 	bl	800e108 <vTaskDelay>
  
  return osOK;
 800c8fc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3710      	adds	r7, #16
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}

0800c906 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800c906:	b580      	push	{r7, lr}
 800c908:	b082      	sub	sp, #8
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	685b      	ldr	r3, [r3, #4]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d007      	beq.n	800c926 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	685b      	ldr	r3, [r3, #4]
 800c91a:	4619      	mov	r1, r3
 800c91c:	2001      	movs	r0, #1
 800c91e:	f000 fbd0 	bl	800d0c2 <xQueueCreateMutexStatic>
 800c922:	4603      	mov	r3, r0
 800c924:	e003      	b.n	800c92e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800c926:	2001      	movs	r0, #1
 800c928:	f000 fbb3 	bl	800d092 <xQueueCreateMutex>
 800c92c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800c92e:	4618      	mov	r0, r3
 800c930:	3708      	adds	r7, #8
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}

0800c936 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800c936:	b580      	push	{r7, lr}
 800c938:	b086      	sub	sp, #24
 800c93a:	af02      	add	r7, sp, #8
 800c93c:	6078      	str	r0, [r7, #4]
 800c93e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	685b      	ldr	r3, [r3, #4]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d017      	beq.n	800c978 <osSemaphoreCreate+0x42>
    if (count == 1) {
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	2b01      	cmp	r3, #1
 800c94c:	d10b      	bne.n	800c966 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	685a      	ldr	r2, [r3, #4]
 800c952:	2303      	movs	r3, #3
 800c954:	9300      	str	r3, [sp, #0]
 800c956:	4613      	mov	r3, r2
 800c958:	2200      	movs	r2, #0
 800c95a:	2100      	movs	r1, #0
 800c95c:	2001      	movs	r0, #1
 800c95e:	f000 faa9 	bl	800ceb4 <xQueueGenericCreateStatic>
 800c962:	4603      	mov	r3, r0
 800c964:	e023      	b.n	800c9ae <osSemaphoreCreate+0x78>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 800c966:	6838      	ldr	r0, [r7, #0]
 800c968:	6839      	ldr	r1, [r7, #0]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	685b      	ldr	r3, [r3, #4]
 800c96e:	461a      	mov	r2, r3
 800c970:	f000 fbc2 	bl	800d0f8 <xQueueCreateCountingSemaphoreStatic>
 800c974:	4603      	mov	r3, r0
 800c976:	e01a      	b.n	800c9ae <osSemaphoreCreate+0x78>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	2b01      	cmp	r3, #1
 800c97c:	d110      	bne.n	800c9a0 <osSemaphoreCreate+0x6a>
      vSemaphoreCreateBinary(sema);
 800c97e:	2203      	movs	r2, #3
 800c980:	2100      	movs	r1, #0
 800c982:	2001      	movs	r0, #1
 800c984:	f000 fb09 	bl	800cf9a <xQueueGenericCreate>
 800c988:	60f8      	str	r0, [r7, #12]
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d005      	beq.n	800c99c <osSemaphoreCreate+0x66>
 800c990:	2300      	movs	r3, #0
 800c992:	2200      	movs	r2, #0
 800c994:	2100      	movs	r1, #0
 800c996:	68f8      	ldr	r0, [r7, #12]
 800c998:	f000 fc14 	bl	800d1c4 <xQueueGenericSend>
      return sema;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	e006      	b.n	800c9ae <osSemaphoreCreate+0x78>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	683a      	ldr	r2, [r7, #0]
 800c9a4:	4611      	mov	r1, r2
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f000 fbdb 	bl	800d162 <xQueueCreateCountingSemaphore>
 800c9ac:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	3710      	adds	r7, #16
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}
	...

0800c9b8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b084      	sub	sp, #16
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
 800c9c0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d101      	bne.n	800c9d0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800c9cc:	2380      	movs	r3, #128	; 0x80
 800c9ce:	e03a      	b.n	800ca46 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9da:	d103      	bne.n	800c9e4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800c9dc:	f04f 33ff 	mov.w	r3, #4294967295
 800c9e0:	60fb      	str	r3, [r7, #12]
 800c9e2:	e009      	b.n	800c9f8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d006      	beq.n	800c9f8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d101      	bne.n	800c9f8 <osSemaphoreWait+0x40>
      ticks = 1;
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c9f8:	f7ff ff0c 	bl	800c814 <inHandlerMode>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d017      	beq.n	800ca32 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ca02:	f107 0308 	add.w	r3, r7, #8
 800ca06:	461a      	mov	r2, r3
 800ca08:	2100      	movs	r1, #0
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f000 ffd6 	bl	800d9bc <xQueueReceiveFromISR>
 800ca10:	4603      	mov	r3, r0
 800ca12:	2b01      	cmp	r3, #1
 800ca14:	d001      	beq.n	800ca1a <osSemaphoreWait+0x62>
      return osErrorOS;
 800ca16:	23ff      	movs	r3, #255	; 0xff
 800ca18:	e015      	b.n	800ca46 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d011      	beq.n	800ca44 <osSemaphoreWait+0x8c>
 800ca20:	4b0b      	ldr	r3, [pc, #44]	; (800ca50 <osSemaphoreWait+0x98>)
 800ca22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca26:	601a      	str	r2, [r3, #0]
 800ca28:	f3bf 8f4f 	dsb	sy
 800ca2c:	f3bf 8f6f 	isb	sy
 800ca30:	e008      	b.n	800ca44 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800ca32:	68f9      	ldr	r1, [r7, #12]
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f000 feb9 	bl	800d7ac <xQueueSemaphoreTake>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	2b01      	cmp	r3, #1
 800ca3e:	d001      	beq.n	800ca44 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800ca40:	23ff      	movs	r3, #255	; 0xff
 800ca42:	e000      	b.n	800ca46 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800ca44:	2300      	movs	r3, #0
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3710      	adds	r7, #16
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}
 800ca4e:	bf00      	nop
 800ca50:	e000ed04 	.word	0xe000ed04

0800ca54 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b084      	sub	sp, #16
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800ca60:	2300      	movs	r3, #0
 800ca62:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800ca64:	f7ff fed6 	bl	800c814 <inHandlerMode>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d016      	beq.n	800ca9c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ca6e:	f107 0308 	add.w	r3, r7, #8
 800ca72:	4619      	mov	r1, r3
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f000 fd33 	bl	800d4e0 <xQueueGiveFromISR>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	2b01      	cmp	r3, #1
 800ca7e:	d001      	beq.n	800ca84 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800ca80:	23ff      	movs	r3, #255	; 0xff
 800ca82:	e017      	b.n	800cab4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d013      	beq.n	800cab2 <osSemaphoreRelease+0x5e>
 800ca8a:	4b0c      	ldr	r3, [pc, #48]	; (800cabc <osSemaphoreRelease+0x68>)
 800ca8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca90:	601a      	str	r2, [r3, #0]
 800ca92:	f3bf 8f4f 	dsb	sy
 800ca96:	f3bf 8f6f 	isb	sy
 800ca9a:	e00a      	b.n	800cab2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	2200      	movs	r2, #0
 800caa0:	2100      	movs	r1, #0
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f000 fb8e 	bl	800d1c4 <xQueueGenericSend>
 800caa8:	4603      	mov	r3, r0
 800caaa:	2b01      	cmp	r3, #1
 800caac:	d001      	beq.n	800cab2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800caae:	23ff      	movs	r3, #255	; 0xff
 800cab0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800cab2:	68fb      	ldr	r3, [r7, #12]
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3710      	adds	r7, #16
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}
 800cabc:	e000ed04 	.word	0xe000ed04

0800cac0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800cac0:	b590      	push	{r4, r7, lr}
 800cac2:	b085      	sub	sp, #20
 800cac4:	af02      	add	r7, sp, #8
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	689b      	ldr	r3, [r3, #8]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d012      	beq.n	800caf8 <osMessageCreate+0x38>
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	68db      	ldr	r3, [r3, #12]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d00e      	beq.n	800caf8 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6818      	ldr	r0, [r3, #0]
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6859      	ldr	r1, [r3, #4]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	689a      	ldr	r2, [r3, #8]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	68dc      	ldr	r4, [r3, #12]
 800caea:	2300      	movs	r3, #0
 800caec:	9300      	str	r3, [sp, #0]
 800caee:	4623      	mov	r3, r4
 800caf0:	f000 f9e0 	bl	800ceb4 <xQueueGenericCreateStatic>
 800caf4:	4603      	mov	r3, r0
 800caf6:	e008      	b.n	800cb0a <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6818      	ldr	r0, [r3, #0]
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	685b      	ldr	r3, [r3, #4]
 800cb00:	2200      	movs	r2, #0
 800cb02:	4619      	mov	r1, r3
 800cb04:	f000 fa49 	bl	800cf9a <xQueueGenericCreate>
 800cb08:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	370c      	adds	r7, #12
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd90      	pop	{r4, r7, pc}
	...

0800cb14 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b086      	sub	sp, #24
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	60f8      	str	r0, [r7, #12]
 800cb1c:	60b9      	str	r1, [r7, #8]
 800cb1e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800cb20:	2300      	movs	r3, #0
 800cb22:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d101      	bne.n	800cb32 <osMessagePut+0x1e>
    ticks = 1;
 800cb2e:	2301      	movs	r3, #1
 800cb30:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800cb32:	f7ff fe6f 	bl	800c814 <inHandlerMode>
 800cb36:	4603      	mov	r3, r0
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d018      	beq.n	800cb6e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800cb3c:	f107 0210 	add.w	r2, r7, #16
 800cb40:	f107 0108 	add.w	r1, r7, #8
 800cb44:	2300      	movs	r3, #0
 800cb46:	68f8      	ldr	r0, [r7, #12]
 800cb48:	f000 fc36 	bl	800d3b8 <xQueueGenericSendFromISR>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	2b01      	cmp	r3, #1
 800cb50:	d001      	beq.n	800cb56 <osMessagePut+0x42>
      return osErrorOS;
 800cb52:	23ff      	movs	r3, #255	; 0xff
 800cb54:	e018      	b.n	800cb88 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cb56:	693b      	ldr	r3, [r7, #16]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d014      	beq.n	800cb86 <osMessagePut+0x72>
 800cb5c:	4b0c      	ldr	r3, [pc, #48]	; (800cb90 <osMessagePut+0x7c>)
 800cb5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb62:	601a      	str	r2, [r3, #0]
 800cb64:	f3bf 8f4f 	dsb	sy
 800cb68:	f3bf 8f6f 	isb	sy
 800cb6c:	e00b      	b.n	800cb86 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800cb6e:	f107 0108 	add.w	r1, r7, #8
 800cb72:	2300      	movs	r3, #0
 800cb74:	697a      	ldr	r2, [r7, #20]
 800cb76:	68f8      	ldr	r0, [r7, #12]
 800cb78:	f000 fb24 	bl	800d1c4 <xQueueGenericSend>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	2b01      	cmp	r3, #1
 800cb80:	d001      	beq.n	800cb86 <osMessagePut+0x72>
      return osErrorOS;
 800cb82:	23ff      	movs	r3, #255	; 0xff
 800cb84:	e000      	b.n	800cb88 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800cb86:	2300      	movs	r3, #0
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3718      	adds	r7, #24
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}
 800cb90:	e000ed04 	.word	0xe000ed04

0800cb94 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800cb94:	b590      	push	{r4, r7, lr}
 800cb96:	b08b      	sub	sp, #44	; 0x2c
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	60f8      	str	r0, [r7, #12]
 800cb9c:	60b9      	str	r1, [r7, #8]
 800cb9e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800cba4:	2300      	movs	r3, #0
 800cba6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d10a      	bne.n	800cbc4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800cbae:	2380      	movs	r3, #128	; 0x80
 800cbb0:	617b      	str	r3, [r7, #20]
    return event;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	461c      	mov	r4, r3
 800cbb6:	f107 0314 	add.w	r3, r7, #20
 800cbba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cbbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cbc2:	e054      	b.n	800cc6e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbd2:	d103      	bne.n	800cbdc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800cbd4:	f04f 33ff 	mov.w	r3, #4294967295
 800cbd8:	627b      	str	r3, [r7, #36]	; 0x24
 800cbda:	e009      	b.n	800cbf0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d006      	beq.n	800cbf0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800cbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d101      	bne.n	800cbf0 <osMessageGet+0x5c>
      ticks = 1;
 800cbec:	2301      	movs	r3, #1
 800cbee:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800cbf0:	f7ff fe10 	bl	800c814 <inHandlerMode>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d01c      	beq.n	800cc34 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800cbfa:	f107 0220 	add.w	r2, r7, #32
 800cbfe:	f107 0314 	add.w	r3, r7, #20
 800cc02:	3304      	adds	r3, #4
 800cc04:	4619      	mov	r1, r3
 800cc06:	68b8      	ldr	r0, [r7, #8]
 800cc08:	f000 fed8 	bl	800d9bc <xQueueReceiveFromISR>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	2b01      	cmp	r3, #1
 800cc10:	d102      	bne.n	800cc18 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800cc12:	2310      	movs	r3, #16
 800cc14:	617b      	str	r3, [r7, #20]
 800cc16:	e001      	b.n	800cc1c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cc1c:	6a3b      	ldr	r3, [r7, #32]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d01d      	beq.n	800cc5e <osMessageGet+0xca>
 800cc22:	4b15      	ldr	r3, [pc, #84]	; (800cc78 <osMessageGet+0xe4>)
 800cc24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc28:	601a      	str	r2, [r3, #0]
 800cc2a:	f3bf 8f4f 	dsb	sy
 800cc2e:	f3bf 8f6f 	isb	sy
 800cc32:	e014      	b.n	800cc5e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800cc34:	f107 0314 	add.w	r3, r7, #20
 800cc38:	3304      	adds	r3, #4
 800cc3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc3c:	4619      	mov	r1, r3
 800cc3e:	68b8      	ldr	r0, [r7, #8]
 800cc40:	f000 fcd8 	bl	800d5f4 <xQueueReceive>
 800cc44:	4603      	mov	r3, r0
 800cc46:	2b01      	cmp	r3, #1
 800cc48:	d102      	bne.n	800cc50 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800cc4a:	2310      	movs	r3, #16
 800cc4c:	617b      	str	r3, [r7, #20]
 800cc4e:	e006      	b.n	800cc5e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800cc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d101      	bne.n	800cc5a <osMessageGet+0xc6>
 800cc56:	2300      	movs	r3, #0
 800cc58:	e000      	b.n	800cc5c <osMessageGet+0xc8>
 800cc5a:	2340      	movs	r3, #64	; 0x40
 800cc5c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	461c      	mov	r4, r3
 800cc62:	f107 0314 	add.w	r3, r7, #20
 800cc66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cc6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800cc6e:	68f8      	ldr	r0, [r7, #12]
 800cc70:	372c      	adds	r7, #44	; 0x2c
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd90      	pop	{r4, r7, pc}
 800cc76:	bf00      	nop
 800cc78:	e000ed04 	.word	0xe000ed04

0800cc7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b083      	sub	sp, #12
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f103 0208 	add.w	r2, r3, #8
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f04f 32ff 	mov.w	r2, #4294967295
 800cc94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f103 0208 	add.w	r2, r3, #8
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f103 0208 	add.w	r2, r3, #8
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2200      	movs	r2, #0
 800ccae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ccb0:	bf00      	nop
 800ccb2:	370c      	adds	r7, #12
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr

0800ccbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b083      	sub	sp, #12
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ccca:	bf00      	nop
 800cccc:	370c      	adds	r7, #12
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd4:	4770      	bx	lr

0800ccd6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ccd6:	b480      	push	{r7}
 800ccd8:	b085      	sub	sp, #20
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	6078      	str	r0, [r7, #4]
 800ccde:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	685b      	ldr	r3, [r3, #4]
 800cce4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	68fa      	ldr	r2, [r7, #12]
 800ccea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	689a      	ldr	r2, [r3, #8]
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	689b      	ldr	r3, [r3, #8]
 800ccf8:	683a      	ldr	r2, [r7, #0]
 800ccfa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	683a      	ldr	r2, [r7, #0]
 800cd00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	687a      	ldr	r2, [r7, #4]
 800cd06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	1c5a      	adds	r2, r3, #1
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	601a      	str	r2, [r3, #0]
}
 800cd12:	bf00      	nop
 800cd14:	3714      	adds	r7, #20
 800cd16:	46bd      	mov	sp, r7
 800cd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1c:	4770      	bx	lr

0800cd1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cd1e:	b480      	push	{r7}
 800cd20:	b085      	sub	sp, #20
 800cd22:	af00      	add	r7, sp, #0
 800cd24:	6078      	str	r0, [r7, #4]
 800cd26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd34:	d103      	bne.n	800cd3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	691b      	ldr	r3, [r3, #16]
 800cd3a:	60fb      	str	r3, [r7, #12]
 800cd3c:	e00c      	b.n	800cd58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	3308      	adds	r3, #8
 800cd42:	60fb      	str	r3, [r7, #12]
 800cd44:	e002      	b.n	800cd4c <vListInsert+0x2e>
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	60fb      	str	r3, [r7, #12]
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	685b      	ldr	r3, [r3, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	68ba      	ldr	r2, [r7, #8]
 800cd54:	429a      	cmp	r2, r3
 800cd56:	d2f6      	bcs.n	800cd46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	685a      	ldr	r2, [r3, #4]
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	685b      	ldr	r3, [r3, #4]
 800cd64:	683a      	ldr	r2, [r7, #0]
 800cd66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	68fa      	ldr	r2, [r7, #12]
 800cd6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	683a      	ldr	r2, [r7, #0]
 800cd72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	687a      	ldr	r2, [r7, #4]
 800cd78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	1c5a      	adds	r2, r3, #1
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	601a      	str	r2, [r3, #0]
}
 800cd84:	bf00      	nop
 800cd86:	3714      	adds	r7, #20
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8e:	4770      	bx	lr

0800cd90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cd90:	b480      	push	{r7}
 800cd92:	b085      	sub	sp, #20
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	691b      	ldr	r3, [r3, #16]
 800cd9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	685b      	ldr	r3, [r3, #4]
 800cda2:	687a      	ldr	r2, [r7, #4]
 800cda4:	6892      	ldr	r2, [r2, #8]
 800cda6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	689b      	ldr	r3, [r3, #8]
 800cdac:	687a      	ldr	r2, [r7, #4]
 800cdae:	6852      	ldr	r2, [r2, #4]
 800cdb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	685b      	ldr	r3, [r3, #4]
 800cdb6:	687a      	ldr	r2, [r7, #4]
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	d103      	bne.n	800cdc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	689a      	ldr	r2, [r3, #8]
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	1e5a      	subs	r2, r3, #1
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	681b      	ldr	r3, [r3, #0]
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3714      	adds	r7, #20
 800cddc:	46bd      	mov	sp, r7
 800cdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde2:	4770      	bx	lr

0800cde4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b084      	sub	sp, #16
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
 800cdec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d109      	bne.n	800ce0c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cdf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdfc:	f383 8811 	msr	BASEPRI, r3
 800ce00:	f3bf 8f6f 	isb	sy
 800ce04:	f3bf 8f4f 	dsb	sy
 800ce08:	60bb      	str	r3, [r7, #8]
 800ce0a:	e7fe      	b.n	800ce0a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800ce0c:	f002 fc96 	bl	800f73c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	681a      	ldr	r2, [r3, #0]
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce18:	68f9      	ldr	r1, [r7, #12]
 800ce1a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ce1c:	fb01 f303 	mul.w	r3, r1, r3
 800ce20:	441a      	add	r2, r3
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	681a      	ldr	r2, [r3, #0]
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	681a      	ldr	r2, [r3, #0]
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce3c:	3b01      	subs	r3, #1
 800ce3e:	68f9      	ldr	r1, [r7, #12]
 800ce40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ce42:	fb01 f303 	mul.w	r3, r1, r3
 800ce46:	441a      	add	r2, r3
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	22ff      	movs	r2, #255	; 0xff
 800ce50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	22ff      	movs	r2, #255	; 0xff
 800ce58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d114      	bne.n	800ce8c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	691b      	ldr	r3, [r3, #16]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d01a      	beq.n	800cea0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	3310      	adds	r3, #16
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f001 fc22 	bl	800e6b8 <xTaskRemoveFromEventList>
 800ce74:	4603      	mov	r3, r0
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d012      	beq.n	800cea0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ce7a:	4b0d      	ldr	r3, [pc, #52]	; (800ceb0 <xQueueGenericReset+0xcc>)
 800ce7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce80:	601a      	str	r2, [r3, #0]
 800ce82:	f3bf 8f4f 	dsb	sy
 800ce86:	f3bf 8f6f 	isb	sy
 800ce8a:	e009      	b.n	800cea0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	3310      	adds	r3, #16
 800ce90:	4618      	mov	r0, r3
 800ce92:	f7ff fef3 	bl	800cc7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	3324      	adds	r3, #36	; 0x24
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f7ff feee 	bl	800cc7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cea0:	f002 fc7a 	bl	800f798 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cea4:	2301      	movs	r3, #1
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3710      	adds	r7, #16
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}
 800ceae:	bf00      	nop
 800ceb0:	e000ed04 	.word	0xe000ed04

0800ceb4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b08e      	sub	sp, #56	; 0x38
 800ceb8:	af02      	add	r7, sp, #8
 800ceba:	60f8      	str	r0, [r7, #12]
 800cebc:	60b9      	str	r1, [r7, #8]
 800cebe:	607a      	str	r2, [r7, #4]
 800cec0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d109      	bne.n	800cedc <xQueueGenericCreateStatic+0x28>
 800cec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cecc:	f383 8811 	msr	BASEPRI, r3
 800ced0:	f3bf 8f6f 	isb	sy
 800ced4:	f3bf 8f4f 	dsb	sy
 800ced8:	62bb      	str	r3, [r7, #40]	; 0x28
 800ceda:	e7fe      	b.n	800ceda <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d109      	bne.n	800cef6 <xQueueGenericCreateStatic+0x42>
 800cee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee6:	f383 8811 	msr	BASEPRI, r3
 800ceea:	f3bf 8f6f 	isb	sy
 800ceee:	f3bf 8f4f 	dsb	sy
 800cef2:	627b      	str	r3, [r7, #36]	; 0x24
 800cef4:	e7fe      	b.n	800cef4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d002      	beq.n	800cf02 <xQueueGenericCreateStatic+0x4e>
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d001      	beq.n	800cf06 <xQueueGenericCreateStatic+0x52>
 800cf02:	2301      	movs	r3, #1
 800cf04:	e000      	b.n	800cf08 <xQueueGenericCreateStatic+0x54>
 800cf06:	2300      	movs	r3, #0
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d109      	bne.n	800cf20 <xQueueGenericCreateStatic+0x6c>
 800cf0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf10:	f383 8811 	msr	BASEPRI, r3
 800cf14:	f3bf 8f6f 	isb	sy
 800cf18:	f3bf 8f4f 	dsb	sy
 800cf1c:	623b      	str	r3, [r7, #32]
 800cf1e:	e7fe      	b.n	800cf1e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d102      	bne.n	800cf2c <xQueueGenericCreateStatic+0x78>
 800cf26:	68bb      	ldr	r3, [r7, #8]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d101      	bne.n	800cf30 <xQueueGenericCreateStatic+0x7c>
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	e000      	b.n	800cf32 <xQueueGenericCreateStatic+0x7e>
 800cf30:	2300      	movs	r3, #0
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d109      	bne.n	800cf4a <xQueueGenericCreateStatic+0x96>
 800cf36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf3a:	f383 8811 	msr	BASEPRI, r3
 800cf3e:	f3bf 8f6f 	isb	sy
 800cf42:	f3bf 8f4f 	dsb	sy
 800cf46:	61fb      	str	r3, [r7, #28]
 800cf48:	e7fe      	b.n	800cf48 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cf4a:	2350      	movs	r3, #80	; 0x50
 800cf4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	2b50      	cmp	r3, #80	; 0x50
 800cf52:	d009      	beq.n	800cf68 <xQueueGenericCreateStatic+0xb4>
 800cf54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf58:	f383 8811 	msr	BASEPRI, r3
 800cf5c:	f3bf 8f6f 	isb	sy
 800cf60:	f3bf 8f4f 	dsb	sy
 800cf64:	61bb      	str	r3, [r7, #24]
 800cf66:	e7fe      	b.n	800cf66 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cf68:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cf6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d00d      	beq.n	800cf90 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cf74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf76:	2201      	movs	r2, #1
 800cf78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cf7c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cf80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf82:	9300      	str	r3, [sp, #0]
 800cf84:	4613      	mov	r3, r2
 800cf86:	687a      	ldr	r2, [r7, #4]
 800cf88:	68b9      	ldr	r1, [r7, #8]
 800cf8a:	68f8      	ldr	r0, [r7, #12]
 800cf8c:	f000 f844 	bl	800d018 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cf90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3730      	adds	r7, #48	; 0x30
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}

0800cf9a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cf9a:	b580      	push	{r7, lr}
 800cf9c:	b08a      	sub	sp, #40	; 0x28
 800cf9e:	af02      	add	r7, sp, #8
 800cfa0:	60f8      	str	r0, [r7, #12]
 800cfa2:	60b9      	str	r1, [r7, #8]
 800cfa4:	4613      	mov	r3, r2
 800cfa6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d109      	bne.n	800cfc2 <xQueueGenericCreate+0x28>
 800cfae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb2:	f383 8811 	msr	BASEPRI, r3
 800cfb6:	f3bf 8f6f 	isb	sy
 800cfba:	f3bf 8f4f 	dsb	sy
 800cfbe:	613b      	str	r3, [r7, #16]
 800cfc0:	e7fe      	b.n	800cfc0 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d102      	bne.n	800cfce <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800cfc8:	2300      	movs	r3, #0
 800cfca:	61fb      	str	r3, [r7, #28]
 800cfcc:	e004      	b.n	800cfd8 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	68ba      	ldr	r2, [r7, #8]
 800cfd2:	fb02 f303 	mul.w	r3, r2, r3
 800cfd6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cfd8:	69fb      	ldr	r3, [r7, #28]
 800cfda:	3350      	adds	r3, #80	; 0x50
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f002 fcc7 	bl	800f970 <pvPortMalloc>
 800cfe2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cfe4:	69bb      	ldr	r3, [r7, #24]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d011      	beq.n	800d00e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cfea:	69bb      	ldr	r3, [r7, #24]
 800cfec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cfee:	697b      	ldr	r3, [r7, #20]
 800cff0:	3350      	adds	r3, #80	; 0x50
 800cff2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cff4:	69bb      	ldr	r3, [r7, #24]
 800cff6:	2200      	movs	r2, #0
 800cff8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cffc:	79fa      	ldrb	r2, [r7, #7]
 800cffe:	69bb      	ldr	r3, [r7, #24]
 800d000:	9300      	str	r3, [sp, #0]
 800d002:	4613      	mov	r3, r2
 800d004:	697a      	ldr	r2, [r7, #20]
 800d006:	68b9      	ldr	r1, [r7, #8]
 800d008:	68f8      	ldr	r0, [r7, #12]
 800d00a:	f000 f805 	bl	800d018 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d00e:	69bb      	ldr	r3, [r7, #24]
	}
 800d010:	4618      	mov	r0, r3
 800d012:	3720      	adds	r7, #32
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}

0800d018 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b084      	sub	sp, #16
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	60f8      	str	r0, [r7, #12]
 800d020:	60b9      	str	r1, [r7, #8]
 800d022:	607a      	str	r2, [r7, #4]
 800d024:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d103      	bne.n	800d034 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d02c:	69bb      	ldr	r3, [r7, #24]
 800d02e:	69ba      	ldr	r2, [r7, #24]
 800d030:	601a      	str	r2, [r3, #0]
 800d032:	e002      	b.n	800d03a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d034:	69bb      	ldr	r3, [r7, #24]
 800d036:	687a      	ldr	r2, [r7, #4]
 800d038:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d03a:	69bb      	ldr	r3, [r7, #24]
 800d03c:	68fa      	ldr	r2, [r7, #12]
 800d03e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d040:	69bb      	ldr	r3, [r7, #24]
 800d042:	68ba      	ldr	r2, [r7, #8]
 800d044:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d046:	2101      	movs	r1, #1
 800d048:	69b8      	ldr	r0, [r7, #24]
 800d04a:	f7ff fecb 	bl	800cde4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d04e:	69bb      	ldr	r3, [r7, #24]
 800d050:	78fa      	ldrb	r2, [r7, #3]
 800d052:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d056:	bf00      	nop
 800d058:	3710      	adds	r7, #16
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}

0800d05e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d05e:	b580      	push	{r7, lr}
 800d060:	b082      	sub	sp, #8
 800d062:	af00      	add	r7, sp, #0
 800d064:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d00e      	beq.n	800d08a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2200      	movs	r2, #0
 800d070:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2200      	movs	r2, #0
 800d076:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2200      	movs	r2, #0
 800d07c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d07e:	2300      	movs	r3, #0
 800d080:	2200      	movs	r2, #0
 800d082:	2100      	movs	r1, #0
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f000 f89d 	bl	800d1c4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d08a:	bf00      	nop
 800d08c:	3708      	adds	r7, #8
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}

0800d092 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d092:	b580      	push	{r7, lr}
 800d094:	b086      	sub	sp, #24
 800d096:	af00      	add	r7, sp, #0
 800d098:	4603      	mov	r3, r0
 800d09a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d09c:	2301      	movs	r3, #1
 800d09e:	617b      	str	r3, [r7, #20]
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d0a4:	79fb      	ldrb	r3, [r7, #7]
 800d0a6:	461a      	mov	r2, r3
 800d0a8:	6939      	ldr	r1, [r7, #16]
 800d0aa:	6978      	ldr	r0, [r7, #20]
 800d0ac:	f7ff ff75 	bl	800cf9a <xQueueGenericCreate>
 800d0b0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d0b2:	68f8      	ldr	r0, [r7, #12]
 800d0b4:	f7ff ffd3 	bl	800d05e <prvInitialiseMutex>

		return xNewQueue;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
	}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3718      	adds	r7, #24
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}

0800d0c2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d0c2:	b580      	push	{r7, lr}
 800d0c4:	b088      	sub	sp, #32
 800d0c6:	af02      	add	r7, sp, #8
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	6039      	str	r1, [r7, #0]
 800d0cc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	617b      	str	r3, [r7, #20]
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d0d6:	79fb      	ldrb	r3, [r7, #7]
 800d0d8:	9300      	str	r3, [sp, #0]
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	2200      	movs	r2, #0
 800d0de:	6939      	ldr	r1, [r7, #16]
 800d0e0:	6978      	ldr	r0, [r7, #20]
 800d0e2:	f7ff fee7 	bl	800ceb4 <xQueueGenericCreateStatic>
 800d0e6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d0e8:	68f8      	ldr	r0, [r7, #12]
 800d0ea:	f7ff ffb8 	bl	800d05e <prvInitialiseMutex>

		return xNewQueue;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
	}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	3718      	adds	r7, #24
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}

0800d0f8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b08a      	sub	sp, #40	; 0x28
 800d0fc:	af02      	add	r7, sp, #8
 800d0fe:	60f8      	str	r0, [r7, #12]
 800d100:	60b9      	str	r1, [r7, #8]
 800d102:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d109      	bne.n	800d11e <xQueueCreateCountingSemaphoreStatic+0x26>
 800d10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d10e:	f383 8811 	msr	BASEPRI, r3
 800d112:	f3bf 8f6f 	isb	sy
 800d116:	f3bf 8f4f 	dsb	sy
 800d11a:	61bb      	str	r3, [r7, #24]
 800d11c:	e7fe      	b.n	800d11c <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d11e:	68ba      	ldr	r2, [r7, #8]
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	429a      	cmp	r2, r3
 800d124:	d909      	bls.n	800d13a <xQueueCreateCountingSemaphoreStatic+0x42>
 800d126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d12a:	f383 8811 	msr	BASEPRI, r3
 800d12e:	f3bf 8f6f 	isb	sy
 800d132:	f3bf 8f4f 	dsb	sy
 800d136:	617b      	str	r3, [r7, #20]
 800d138:	e7fe      	b.n	800d138 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d13a:	2302      	movs	r3, #2
 800d13c:	9300      	str	r3, [sp, #0]
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2200      	movs	r2, #0
 800d142:	2100      	movs	r1, #0
 800d144:	68f8      	ldr	r0, [r7, #12]
 800d146:	f7ff feb5 	bl	800ceb4 <xQueueGenericCreateStatic>
 800d14a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800d14c:	69fb      	ldr	r3, [r7, #28]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d002      	beq.n	800d158 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d152:	69fb      	ldr	r3, [r7, #28]
 800d154:	68ba      	ldr	r2, [r7, #8]
 800d156:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d158:	69fb      	ldr	r3, [r7, #28]
	}
 800d15a:	4618      	mov	r0, r3
 800d15c:	3720      	adds	r7, #32
 800d15e:	46bd      	mov	sp, r7
 800d160:	bd80      	pop	{r7, pc}

0800d162 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d162:	b580      	push	{r7, lr}
 800d164:	b086      	sub	sp, #24
 800d166:	af00      	add	r7, sp, #0
 800d168:	6078      	str	r0, [r7, #4]
 800d16a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d109      	bne.n	800d186 <xQueueCreateCountingSemaphore+0x24>
 800d172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d176:	f383 8811 	msr	BASEPRI, r3
 800d17a:	f3bf 8f6f 	isb	sy
 800d17e:	f3bf 8f4f 	dsb	sy
 800d182:	613b      	str	r3, [r7, #16]
 800d184:	e7fe      	b.n	800d184 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d186:	683a      	ldr	r2, [r7, #0]
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	429a      	cmp	r2, r3
 800d18c:	d909      	bls.n	800d1a2 <xQueueCreateCountingSemaphore+0x40>
 800d18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d192:	f383 8811 	msr	BASEPRI, r3
 800d196:	f3bf 8f6f 	isb	sy
 800d19a:	f3bf 8f4f 	dsb	sy
 800d19e:	60fb      	str	r3, [r7, #12]
 800d1a0:	e7fe      	b.n	800d1a0 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d1a2:	2202      	movs	r2, #2
 800d1a4:	2100      	movs	r1, #0
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f7ff fef7 	bl	800cf9a <xQueueGenericCreate>
 800d1ac:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d002      	beq.n	800d1ba <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d1b4:	697b      	ldr	r3, [r7, #20]
 800d1b6:	683a      	ldr	r2, [r7, #0]
 800d1b8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d1ba:	697b      	ldr	r3, [r7, #20]
	}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3718      	adds	r7, #24
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}

0800d1c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b08e      	sub	sp, #56	; 0x38
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	60f8      	str	r0, [r7, #12]
 800d1cc:	60b9      	str	r1, [r7, #8]
 800d1ce:	607a      	str	r2, [r7, #4]
 800d1d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d109      	bne.n	800d1f4 <xQueueGenericSend+0x30>
 800d1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e4:	f383 8811 	msr	BASEPRI, r3
 800d1e8:	f3bf 8f6f 	isb	sy
 800d1ec:	f3bf 8f4f 	dsb	sy
 800d1f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1f2:	e7fe      	b.n	800d1f2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d103      	bne.n	800d202 <xQueueGenericSend+0x3e>
 800d1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d101      	bne.n	800d206 <xQueueGenericSend+0x42>
 800d202:	2301      	movs	r3, #1
 800d204:	e000      	b.n	800d208 <xQueueGenericSend+0x44>
 800d206:	2300      	movs	r3, #0
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d109      	bne.n	800d220 <xQueueGenericSend+0x5c>
 800d20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d210:	f383 8811 	msr	BASEPRI, r3
 800d214:	f3bf 8f6f 	isb	sy
 800d218:	f3bf 8f4f 	dsb	sy
 800d21c:	627b      	str	r3, [r7, #36]	; 0x24
 800d21e:	e7fe      	b.n	800d21e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	2b02      	cmp	r3, #2
 800d224:	d103      	bne.n	800d22e <xQueueGenericSend+0x6a>
 800d226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d22a:	2b01      	cmp	r3, #1
 800d22c:	d101      	bne.n	800d232 <xQueueGenericSend+0x6e>
 800d22e:	2301      	movs	r3, #1
 800d230:	e000      	b.n	800d234 <xQueueGenericSend+0x70>
 800d232:	2300      	movs	r3, #0
 800d234:	2b00      	cmp	r3, #0
 800d236:	d109      	bne.n	800d24c <xQueueGenericSend+0x88>
 800d238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d23c:	f383 8811 	msr	BASEPRI, r3
 800d240:	f3bf 8f6f 	isb	sy
 800d244:	f3bf 8f4f 	dsb	sy
 800d248:	623b      	str	r3, [r7, #32]
 800d24a:	e7fe      	b.n	800d24a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d24c:	f001 fbec 	bl	800ea28 <xTaskGetSchedulerState>
 800d250:	4603      	mov	r3, r0
 800d252:	2b00      	cmp	r3, #0
 800d254:	d102      	bne.n	800d25c <xQueueGenericSend+0x98>
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d101      	bne.n	800d260 <xQueueGenericSend+0x9c>
 800d25c:	2301      	movs	r3, #1
 800d25e:	e000      	b.n	800d262 <xQueueGenericSend+0x9e>
 800d260:	2300      	movs	r3, #0
 800d262:	2b00      	cmp	r3, #0
 800d264:	d109      	bne.n	800d27a <xQueueGenericSend+0xb6>
 800d266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d26a:	f383 8811 	msr	BASEPRI, r3
 800d26e:	f3bf 8f6f 	isb	sy
 800d272:	f3bf 8f4f 	dsb	sy
 800d276:	61fb      	str	r3, [r7, #28]
 800d278:	e7fe      	b.n	800d278 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d27a:	f002 fa5f 	bl	800f73c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d286:	429a      	cmp	r2, r3
 800d288:	d302      	bcc.n	800d290 <xQueueGenericSend+0xcc>
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	2b02      	cmp	r3, #2
 800d28e:	d129      	bne.n	800d2e4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d290:	683a      	ldr	r2, [r7, #0]
 800d292:	68b9      	ldr	r1, [r7, #8]
 800d294:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d296:	f000 fc26 	bl	800dae6 <prvCopyDataToQueue>
 800d29a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d010      	beq.n	800d2c6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a6:	3324      	adds	r3, #36	; 0x24
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f001 fa05 	bl	800e6b8 <xTaskRemoveFromEventList>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d013      	beq.n	800d2dc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d2b4:	4b3f      	ldr	r3, [pc, #252]	; (800d3b4 <xQueueGenericSend+0x1f0>)
 800d2b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2ba:	601a      	str	r2, [r3, #0]
 800d2bc:	f3bf 8f4f 	dsb	sy
 800d2c0:	f3bf 8f6f 	isb	sy
 800d2c4:	e00a      	b.n	800d2dc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d007      	beq.n	800d2dc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d2cc:	4b39      	ldr	r3, [pc, #228]	; (800d3b4 <xQueueGenericSend+0x1f0>)
 800d2ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2d2:	601a      	str	r2, [r3, #0]
 800d2d4:	f3bf 8f4f 	dsb	sy
 800d2d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d2dc:	f002 fa5c 	bl	800f798 <vPortExitCritical>
				return pdPASS;
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	e063      	b.n	800d3ac <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d103      	bne.n	800d2f2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d2ea:	f002 fa55 	bl	800f798 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	e05c      	b.n	800d3ac <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d2f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d106      	bne.n	800d306 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d2f8:	f107 0314 	add.w	r3, r7, #20
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f001 fa3d 	bl	800e77c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d302:	2301      	movs	r3, #1
 800d304:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d306:	f002 fa47 	bl	800f798 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d30a:	f000 ff97 	bl	800e23c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d30e:	f002 fa15 	bl	800f73c <vPortEnterCritical>
 800d312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d314:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d318:	b25b      	sxtb	r3, r3
 800d31a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d31e:	d103      	bne.n	800d328 <xQueueGenericSend+0x164>
 800d320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d322:	2200      	movs	r2, #0
 800d324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d32a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d32e:	b25b      	sxtb	r3, r3
 800d330:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d334:	d103      	bne.n	800d33e <xQueueGenericSend+0x17a>
 800d336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d338:	2200      	movs	r2, #0
 800d33a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d33e:	f002 fa2b 	bl	800f798 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d342:	1d3a      	adds	r2, r7, #4
 800d344:	f107 0314 	add.w	r3, r7, #20
 800d348:	4611      	mov	r1, r2
 800d34a:	4618      	mov	r0, r3
 800d34c:	f001 fa2c 	bl	800e7a8 <xTaskCheckForTimeOut>
 800d350:	4603      	mov	r3, r0
 800d352:	2b00      	cmp	r3, #0
 800d354:	d124      	bne.n	800d3a0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d356:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d358:	f000 fcbd 	bl	800dcd6 <prvIsQueueFull>
 800d35c:	4603      	mov	r3, r0
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d018      	beq.n	800d394 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d364:	3310      	adds	r3, #16
 800d366:	687a      	ldr	r2, [r7, #4]
 800d368:	4611      	mov	r1, r2
 800d36a:	4618      	mov	r0, r3
 800d36c:	f001 f956 	bl	800e61c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d370:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d372:	f000 fc48 	bl	800dc06 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d376:	f000 ff6f 	bl	800e258 <xTaskResumeAll>
 800d37a:	4603      	mov	r3, r0
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	f47f af7c 	bne.w	800d27a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800d382:	4b0c      	ldr	r3, [pc, #48]	; (800d3b4 <xQueueGenericSend+0x1f0>)
 800d384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d388:	601a      	str	r2, [r3, #0]
 800d38a:	f3bf 8f4f 	dsb	sy
 800d38e:	f3bf 8f6f 	isb	sy
 800d392:	e772      	b.n	800d27a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d394:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d396:	f000 fc36 	bl	800dc06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d39a:	f000 ff5d 	bl	800e258 <xTaskResumeAll>
 800d39e:	e76c      	b.n	800d27a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d3a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3a2:	f000 fc30 	bl	800dc06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d3a6:	f000 ff57 	bl	800e258 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d3aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3738      	adds	r7, #56	; 0x38
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}
 800d3b4:	e000ed04 	.word	0xe000ed04

0800d3b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b08e      	sub	sp, #56	; 0x38
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	60f8      	str	r0, [r7, #12]
 800d3c0:	60b9      	str	r1, [r7, #8]
 800d3c2:	607a      	str	r2, [r7, #4]
 800d3c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d109      	bne.n	800d3e4 <xQueueGenericSendFromISR+0x2c>
 800d3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d4:	f383 8811 	msr	BASEPRI, r3
 800d3d8:	f3bf 8f6f 	isb	sy
 800d3dc:	f3bf 8f4f 	dsb	sy
 800d3e0:	627b      	str	r3, [r7, #36]	; 0x24
 800d3e2:	e7fe      	b.n	800d3e2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d103      	bne.n	800d3f2 <xQueueGenericSendFromISR+0x3a>
 800d3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d101      	bne.n	800d3f6 <xQueueGenericSendFromISR+0x3e>
 800d3f2:	2301      	movs	r3, #1
 800d3f4:	e000      	b.n	800d3f8 <xQueueGenericSendFromISR+0x40>
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d109      	bne.n	800d410 <xQueueGenericSendFromISR+0x58>
 800d3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d400:	f383 8811 	msr	BASEPRI, r3
 800d404:	f3bf 8f6f 	isb	sy
 800d408:	f3bf 8f4f 	dsb	sy
 800d40c:	623b      	str	r3, [r7, #32]
 800d40e:	e7fe      	b.n	800d40e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	2b02      	cmp	r3, #2
 800d414:	d103      	bne.n	800d41e <xQueueGenericSendFromISR+0x66>
 800d416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d41a:	2b01      	cmp	r3, #1
 800d41c:	d101      	bne.n	800d422 <xQueueGenericSendFromISR+0x6a>
 800d41e:	2301      	movs	r3, #1
 800d420:	e000      	b.n	800d424 <xQueueGenericSendFromISR+0x6c>
 800d422:	2300      	movs	r3, #0
 800d424:	2b00      	cmp	r3, #0
 800d426:	d109      	bne.n	800d43c <xQueueGenericSendFromISR+0x84>
 800d428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d42c:	f383 8811 	msr	BASEPRI, r3
 800d430:	f3bf 8f6f 	isb	sy
 800d434:	f3bf 8f4f 	dsb	sy
 800d438:	61fb      	str	r3, [r7, #28]
 800d43a:	e7fe      	b.n	800d43a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d43c:	f002 fa5a 	bl	800f8f4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d440:	f3ef 8211 	mrs	r2, BASEPRI
 800d444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d448:	f383 8811 	msr	BASEPRI, r3
 800d44c:	f3bf 8f6f 	isb	sy
 800d450:	f3bf 8f4f 	dsb	sy
 800d454:	61ba      	str	r2, [r7, #24]
 800d456:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d458:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d45a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d45e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d464:	429a      	cmp	r2, r3
 800d466:	d302      	bcc.n	800d46e <xQueueGenericSendFromISR+0xb6>
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	2b02      	cmp	r3, #2
 800d46c:	d12c      	bne.n	800d4c8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d470:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d474:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d478:	683a      	ldr	r2, [r7, #0]
 800d47a:	68b9      	ldr	r1, [r7, #8]
 800d47c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d47e:	f000 fb32 	bl	800dae6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d482:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d48a:	d112      	bne.n	800d4b2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d490:	2b00      	cmp	r3, #0
 800d492:	d016      	beq.n	800d4c2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d496:	3324      	adds	r3, #36	; 0x24
 800d498:	4618      	mov	r0, r3
 800d49a:	f001 f90d 	bl	800e6b8 <xTaskRemoveFromEventList>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d00e      	beq.n	800d4c2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d00b      	beq.n	800d4c2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2201      	movs	r2, #1
 800d4ae:	601a      	str	r2, [r3, #0]
 800d4b0:	e007      	b.n	800d4c2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d4b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d4b6:	3301      	adds	r3, #1
 800d4b8:	b2db      	uxtb	r3, r3
 800d4ba:	b25a      	sxtb	r2, r3
 800d4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d4c6:	e001      	b.n	800d4cc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	637b      	str	r3, [r7, #52]	; 0x34
 800d4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ce:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d4d0:	693b      	ldr	r3, [r7, #16]
 800d4d2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d4d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	3738      	adds	r7, #56	; 0x38
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}

0800d4e0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b08e      	sub	sp, #56	; 0x38
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
 800d4e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d109      	bne.n	800d508 <xQueueGiveFromISR+0x28>
	__asm volatile
 800d4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f8:	f383 8811 	msr	BASEPRI, r3
 800d4fc:	f3bf 8f6f 	isb	sy
 800d500:	f3bf 8f4f 	dsb	sy
 800d504:	623b      	str	r3, [r7, #32]
 800d506:	e7fe      	b.n	800d506 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d50a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d009      	beq.n	800d524 <xQueueGiveFromISR+0x44>
 800d510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d514:	f383 8811 	msr	BASEPRI, r3
 800d518:	f3bf 8f6f 	isb	sy
 800d51c:	f3bf 8f4f 	dsb	sy
 800d520:	61fb      	str	r3, [r7, #28]
 800d522:	e7fe      	b.n	800d522 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d103      	bne.n	800d534 <xQueueGiveFromISR+0x54>
 800d52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d52e:	689b      	ldr	r3, [r3, #8]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d101      	bne.n	800d538 <xQueueGiveFromISR+0x58>
 800d534:	2301      	movs	r3, #1
 800d536:	e000      	b.n	800d53a <xQueueGiveFromISR+0x5a>
 800d538:	2300      	movs	r3, #0
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d109      	bne.n	800d552 <xQueueGiveFromISR+0x72>
 800d53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d542:	f383 8811 	msr	BASEPRI, r3
 800d546:	f3bf 8f6f 	isb	sy
 800d54a:	f3bf 8f4f 	dsb	sy
 800d54e:	61bb      	str	r3, [r7, #24]
 800d550:	e7fe      	b.n	800d550 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d552:	f002 f9cf 	bl	800f8f4 <vPortValidateInterruptPriority>
	__asm volatile
 800d556:	f3ef 8211 	mrs	r2, BASEPRI
 800d55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d55e:	f383 8811 	msr	BASEPRI, r3
 800d562:	f3bf 8f6f 	isb	sy
 800d566:	f3bf 8f4f 	dsb	sy
 800d56a:	617a      	str	r2, [r7, #20]
 800d56c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d56e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d570:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d576:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d57a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d57c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d57e:	429a      	cmp	r2, r3
 800d580:	d22b      	bcs.n	800d5da <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d584:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d58e:	1c5a      	adds	r2, r3, #1
 800d590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d592:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d594:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d59c:	d112      	bne.n	800d5c4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d016      	beq.n	800d5d4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a8:	3324      	adds	r3, #36	; 0x24
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f001 f884 	bl	800e6b8 <xTaskRemoveFromEventList>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d00e      	beq.n	800d5d4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d00b      	beq.n	800d5d4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	2201      	movs	r2, #1
 800d5c0:	601a      	str	r2, [r3, #0]
 800d5c2:	e007      	b.n	800d5d4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d5c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5c8:	3301      	adds	r3, #1
 800d5ca:	b2db      	uxtb	r3, r3
 800d5cc:	b25a      	sxtb	r2, r3
 800d5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	637b      	str	r3, [r7, #52]	; 0x34
 800d5d8:	e001      	b.n	800d5de <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	637b      	str	r3, [r7, #52]	; 0x34
 800d5de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5e0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d5e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	3738      	adds	r7, #56	; 0x38
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}
	...

0800d5f4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b08c      	sub	sp, #48	; 0x30
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	60f8      	str	r0, [r7, #12]
 800d5fc:	60b9      	str	r1, [r7, #8]
 800d5fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d600:	2300      	movs	r3, #0
 800d602:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d109      	bne.n	800d622 <xQueueReceive+0x2e>
	__asm volatile
 800d60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d612:	f383 8811 	msr	BASEPRI, r3
 800d616:	f3bf 8f6f 	isb	sy
 800d61a:	f3bf 8f4f 	dsb	sy
 800d61e:	623b      	str	r3, [r7, #32]
 800d620:	e7fe      	b.n	800d620 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d103      	bne.n	800d630 <xQueueReceive+0x3c>
 800d628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d62a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d101      	bne.n	800d634 <xQueueReceive+0x40>
 800d630:	2301      	movs	r3, #1
 800d632:	e000      	b.n	800d636 <xQueueReceive+0x42>
 800d634:	2300      	movs	r3, #0
 800d636:	2b00      	cmp	r3, #0
 800d638:	d109      	bne.n	800d64e <xQueueReceive+0x5a>
 800d63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d63e:	f383 8811 	msr	BASEPRI, r3
 800d642:	f3bf 8f6f 	isb	sy
 800d646:	f3bf 8f4f 	dsb	sy
 800d64a:	61fb      	str	r3, [r7, #28]
 800d64c:	e7fe      	b.n	800d64c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d64e:	f001 f9eb 	bl	800ea28 <xTaskGetSchedulerState>
 800d652:	4603      	mov	r3, r0
 800d654:	2b00      	cmp	r3, #0
 800d656:	d102      	bne.n	800d65e <xQueueReceive+0x6a>
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d101      	bne.n	800d662 <xQueueReceive+0x6e>
 800d65e:	2301      	movs	r3, #1
 800d660:	e000      	b.n	800d664 <xQueueReceive+0x70>
 800d662:	2300      	movs	r3, #0
 800d664:	2b00      	cmp	r3, #0
 800d666:	d109      	bne.n	800d67c <xQueueReceive+0x88>
 800d668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d66c:	f383 8811 	msr	BASEPRI, r3
 800d670:	f3bf 8f6f 	isb	sy
 800d674:	f3bf 8f4f 	dsb	sy
 800d678:	61bb      	str	r3, [r7, #24]
 800d67a:	e7fe      	b.n	800d67a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d67c:	f002 f85e 	bl	800f73c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d684:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d01f      	beq.n	800d6cc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d68c:	68b9      	ldr	r1, [r7, #8]
 800d68e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d690:	f000 fa93 	bl	800dbba <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d696:	1e5a      	subs	r2, r3, #1
 800d698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d69a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d69e:	691b      	ldr	r3, [r3, #16]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d00f      	beq.n	800d6c4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6a6:	3310      	adds	r3, #16
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f001 f805 	bl	800e6b8 <xTaskRemoveFromEventList>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d007      	beq.n	800d6c4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d6b4:	4b3c      	ldr	r3, [pc, #240]	; (800d7a8 <xQueueReceive+0x1b4>)
 800d6b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6ba:	601a      	str	r2, [r3, #0]
 800d6bc:	f3bf 8f4f 	dsb	sy
 800d6c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d6c4:	f002 f868 	bl	800f798 <vPortExitCritical>
				return pdPASS;
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	e069      	b.n	800d7a0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d103      	bne.n	800d6da <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d6d2:	f002 f861 	bl	800f798 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	e062      	b.n	800d7a0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d106      	bne.n	800d6ee <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d6e0:	f107 0310 	add.w	r3, r7, #16
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f001 f849 	bl	800e77c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d6ee:	f002 f853 	bl	800f798 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d6f2:	f000 fda3 	bl	800e23c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d6f6:	f002 f821 	bl	800f73c <vPortEnterCritical>
 800d6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d700:	b25b      	sxtb	r3, r3
 800d702:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d706:	d103      	bne.n	800d710 <xQueueReceive+0x11c>
 800d708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d70a:	2200      	movs	r2, #0
 800d70c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d712:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d716:	b25b      	sxtb	r3, r3
 800d718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d71c:	d103      	bne.n	800d726 <xQueueReceive+0x132>
 800d71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d720:	2200      	movs	r2, #0
 800d722:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d726:	f002 f837 	bl	800f798 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d72a:	1d3a      	adds	r2, r7, #4
 800d72c:	f107 0310 	add.w	r3, r7, #16
 800d730:	4611      	mov	r1, r2
 800d732:	4618      	mov	r0, r3
 800d734:	f001 f838 	bl	800e7a8 <xTaskCheckForTimeOut>
 800d738:	4603      	mov	r3, r0
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d123      	bne.n	800d786 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d73e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d740:	f000 fab3 	bl	800dcaa <prvIsQueueEmpty>
 800d744:	4603      	mov	r3, r0
 800d746:	2b00      	cmp	r3, #0
 800d748:	d017      	beq.n	800d77a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d74c:	3324      	adds	r3, #36	; 0x24
 800d74e:	687a      	ldr	r2, [r7, #4]
 800d750:	4611      	mov	r1, r2
 800d752:	4618      	mov	r0, r3
 800d754:	f000 ff62 	bl	800e61c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d75a:	f000 fa54 	bl	800dc06 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d75e:	f000 fd7b 	bl	800e258 <xTaskResumeAll>
 800d762:	4603      	mov	r3, r0
 800d764:	2b00      	cmp	r3, #0
 800d766:	d189      	bne.n	800d67c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800d768:	4b0f      	ldr	r3, [pc, #60]	; (800d7a8 <xQueueReceive+0x1b4>)
 800d76a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d76e:	601a      	str	r2, [r3, #0]
 800d770:	f3bf 8f4f 	dsb	sy
 800d774:	f3bf 8f6f 	isb	sy
 800d778:	e780      	b.n	800d67c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d77a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d77c:	f000 fa43 	bl	800dc06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d780:	f000 fd6a 	bl	800e258 <xTaskResumeAll>
 800d784:	e77a      	b.n	800d67c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d786:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d788:	f000 fa3d 	bl	800dc06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d78c:	f000 fd64 	bl	800e258 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d792:	f000 fa8a 	bl	800dcaa <prvIsQueueEmpty>
 800d796:	4603      	mov	r3, r0
 800d798:	2b00      	cmp	r3, #0
 800d79a:	f43f af6f 	beq.w	800d67c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d79e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3730      	adds	r7, #48	; 0x30
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}
 800d7a8:	e000ed04 	.word	0xe000ed04

0800d7ac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b08e      	sub	sp, #56	; 0x38
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
 800d7b4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d109      	bne.n	800d7dc <xQueueSemaphoreTake+0x30>
 800d7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7cc:	f383 8811 	msr	BASEPRI, r3
 800d7d0:	f3bf 8f6f 	isb	sy
 800d7d4:	f3bf 8f4f 	dsb	sy
 800d7d8:	623b      	str	r3, [r7, #32]
 800d7da:	e7fe      	b.n	800d7da <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d009      	beq.n	800d7f8 <xQueueSemaphoreTake+0x4c>
 800d7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e8:	f383 8811 	msr	BASEPRI, r3
 800d7ec:	f3bf 8f6f 	isb	sy
 800d7f0:	f3bf 8f4f 	dsb	sy
 800d7f4:	61fb      	str	r3, [r7, #28]
 800d7f6:	e7fe      	b.n	800d7f6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d7f8:	f001 f916 	bl	800ea28 <xTaskGetSchedulerState>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d102      	bne.n	800d808 <xQueueSemaphoreTake+0x5c>
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d101      	bne.n	800d80c <xQueueSemaphoreTake+0x60>
 800d808:	2301      	movs	r3, #1
 800d80a:	e000      	b.n	800d80e <xQueueSemaphoreTake+0x62>
 800d80c:	2300      	movs	r3, #0
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d109      	bne.n	800d826 <xQueueSemaphoreTake+0x7a>
 800d812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d816:	f383 8811 	msr	BASEPRI, r3
 800d81a:	f3bf 8f6f 	isb	sy
 800d81e:	f3bf 8f4f 	dsb	sy
 800d822:	61bb      	str	r3, [r7, #24]
 800d824:	e7fe      	b.n	800d824 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d826:	f001 ff89 	bl	800f73c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d82c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d82e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d832:	2b00      	cmp	r3, #0
 800d834:	d024      	beq.n	800d880 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d838:	1e5a      	subs	r2, r3, #1
 800d83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d83c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d104      	bne.n	800d850 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d846:	f001 faa9 	bl	800ed9c <pvTaskIncrementMutexHeldCount>
 800d84a:	4602      	mov	r2, r0
 800d84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d84e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d852:	691b      	ldr	r3, [r3, #16]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d00f      	beq.n	800d878 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d85a:	3310      	adds	r3, #16
 800d85c:	4618      	mov	r0, r3
 800d85e:	f000 ff2b 	bl	800e6b8 <xTaskRemoveFromEventList>
 800d862:	4603      	mov	r3, r0
 800d864:	2b00      	cmp	r3, #0
 800d866:	d007      	beq.n	800d878 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d868:	4b53      	ldr	r3, [pc, #332]	; (800d9b8 <xQueueSemaphoreTake+0x20c>)
 800d86a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d86e:	601a      	str	r2, [r3, #0]
 800d870:	f3bf 8f4f 	dsb	sy
 800d874:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d878:	f001 ff8e 	bl	800f798 <vPortExitCritical>
				return pdPASS;
 800d87c:	2301      	movs	r3, #1
 800d87e:	e096      	b.n	800d9ae <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d110      	bne.n	800d8a8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d009      	beq.n	800d8a0 <xQueueSemaphoreTake+0xf4>
 800d88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d890:	f383 8811 	msr	BASEPRI, r3
 800d894:	f3bf 8f6f 	isb	sy
 800d898:	f3bf 8f4f 	dsb	sy
 800d89c:	617b      	str	r3, [r7, #20]
 800d89e:	e7fe      	b.n	800d89e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d8a0:	f001 ff7a 	bl	800f798 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	e082      	b.n	800d9ae <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d8a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d106      	bne.n	800d8bc <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d8ae:	f107 030c 	add.w	r3, r7, #12
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f000 ff62 	bl	800e77c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d8b8:	2301      	movs	r3, #1
 800d8ba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d8bc:	f001 ff6c 	bl	800f798 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d8c0:	f000 fcbc 	bl	800e23c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d8c4:	f001 ff3a 	bl	800f73c <vPortEnterCritical>
 800d8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d8ce:	b25b      	sxtb	r3, r3
 800d8d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8d4:	d103      	bne.n	800d8de <xQueueSemaphoreTake+0x132>
 800d8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d8:	2200      	movs	r2, #0
 800d8da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d8e4:	b25b      	sxtb	r3, r3
 800d8e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8ea:	d103      	bne.n	800d8f4 <xQueueSemaphoreTake+0x148>
 800d8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d8f4:	f001 ff50 	bl	800f798 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d8f8:	463a      	mov	r2, r7
 800d8fa:	f107 030c 	add.w	r3, r7, #12
 800d8fe:	4611      	mov	r1, r2
 800d900:	4618      	mov	r0, r3
 800d902:	f000 ff51 	bl	800e7a8 <xTaskCheckForTimeOut>
 800d906:	4603      	mov	r3, r0
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d132      	bne.n	800d972 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d90c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d90e:	f000 f9cc 	bl	800dcaa <prvIsQueueEmpty>
 800d912:	4603      	mov	r3, r0
 800d914:	2b00      	cmp	r3, #0
 800d916:	d026      	beq.n	800d966 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d109      	bne.n	800d934 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800d920:	f001 ff0c 	bl	800f73c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d926:	689b      	ldr	r3, [r3, #8]
 800d928:	4618      	mov	r0, r3
 800d92a:	f001 f89b 	bl	800ea64 <xTaskPriorityInherit>
 800d92e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d930:	f001 ff32 	bl	800f798 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d936:	3324      	adds	r3, #36	; 0x24
 800d938:	683a      	ldr	r2, [r7, #0]
 800d93a:	4611      	mov	r1, r2
 800d93c:	4618      	mov	r0, r3
 800d93e:	f000 fe6d 	bl	800e61c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d942:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d944:	f000 f95f 	bl	800dc06 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d948:	f000 fc86 	bl	800e258 <xTaskResumeAll>
 800d94c:	4603      	mov	r3, r0
 800d94e:	2b00      	cmp	r3, #0
 800d950:	f47f af69 	bne.w	800d826 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800d954:	4b18      	ldr	r3, [pc, #96]	; (800d9b8 <xQueueSemaphoreTake+0x20c>)
 800d956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d95a:	601a      	str	r2, [r3, #0]
 800d95c:	f3bf 8f4f 	dsb	sy
 800d960:	f3bf 8f6f 	isb	sy
 800d964:	e75f      	b.n	800d826 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d966:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d968:	f000 f94d 	bl	800dc06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d96c:	f000 fc74 	bl	800e258 <xTaskResumeAll>
 800d970:	e759      	b.n	800d826 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d972:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d974:	f000 f947 	bl	800dc06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d978:	f000 fc6e 	bl	800e258 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d97c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d97e:	f000 f994 	bl	800dcaa <prvIsQueueEmpty>
 800d982:	4603      	mov	r3, r0
 800d984:	2b00      	cmp	r3, #0
 800d986:	f43f af4e 	beq.w	800d826 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d00d      	beq.n	800d9ac <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800d990:	f001 fed4 	bl	800f73c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d994:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d996:	f000 f88e 	bl	800dab6 <prvGetDisinheritPriorityAfterTimeout>
 800d99a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d99e:	689b      	ldr	r3, [r3, #8]
 800d9a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f001 f962 	bl	800ec6c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d9a8:	f001 fef6 	bl	800f798 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d9ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	3738      	adds	r7, #56	; 0x38
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}
 800d9b6:	bf00      	nop
 800d9b8:	e000ed04 	.word	0xe000ed04

0800d9bc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b08e      	sub	sp, #56	; 0x38
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	60f8      	str	r0, [r7, #12]
 800d9c4:	60b9      	str	r1, [r7, #8]
 800d9c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d109      	bne.n	800d9e6 <xQueueReceiveFromISR+0x2a>
 800d9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9d6:	f383 8811 	msr	BASEPRI, r3
 800d9da:	f3bf 8f6f 	isb	sy
 800d9de:	f3bf 8f4f 	dsb	sy
 800d9e2:	623b      	str	r3, [r7, #32]
 800d9e4:	e7fe      	b.n	800d9e4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d103      	bne.n	800d9f4 <xQueueReceiveFromISR+0x38>
 800d9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d101      	bne.n	800d9f8 <xQueueReceiveFromISR+0x3c>
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	e000      	b.n	800d9fa <xQueueReceiveFromISR+0x3e>
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d109      	bne.n	800da12 <xQueueReceiveFromISR+0x56>
 800d9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da02:	f383 8811 	msr	BASEPRI, r3
 800da06:	f3bf 8f6f 	isb	sy
 800da0a:	f3bf 8f4f 	dsb	sy
 800da0e:	61fb      	str	r3, [r7, #28]
 800da10:	e7fe      	b.n	800da10 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800da12:	f001 ff6f 	bl	800f8f4 <vPortValidateInterruptPriority>
	__asm volatile
 800da16:	f3ef 8211 	mrs	r2, BASEPRI
 800da1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da1e:	f383 8811 	msr	BASEPRI, r3
 800da22:	f3bf 8f6f 	isb	sy
 800da26:	f3bf 8f4f 	dsb	sy
 800da2a:	61ba      	str	r2, [r7, #24]
 800da2c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800da2e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800da30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800da32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800da38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d02f      	beq.n	800da9e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800da3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800da48:	68b9      	ldr	r1, [r7, #8]
 800da4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da4c:	f000 f8b5 	bl	800dbba <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800da50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da52:	1e5a      	subs	r2, r3, #1
 800da54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da56:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800da58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800da5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da60:	d112      	bne.n	800da88 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da64:	691b      	ldr	r3, [r3, #16]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d016      	beq.n	800da98 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da6c:	3310      	adds	r3, #16
 800da6e:	4618      	mov	r0, r3
 800da70:	f000 fe22 	bl	800e6b8 <xTaskRemoveFromEventList>
 800da74:	4603      	mov	r3, r0
 800da76:	2b00      	cmp	r3, #0
 800da78:	d00e      	beq.n	800da98 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d00b      	beq.n	800da98 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2201      	movs	r2, #1
 800da84:	601a      	str	r2, [r3, #0]
 800da86:	e007      	b.n	800da98 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800da88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da8c:	3301      	adds	r3, #1
 800da8e:	b2db      	uxtb	r3, r3
 800da90:	b25a      	sxtb	r2, r3
 800da92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800da98:	2301      	movs	r3, #1
 800da9a:	637b      	str	r3, [r7, #52]	; 0x34
 800da9c:	e001      	b.n	800daa2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800da9e:	2300      	movs	r3, #0
 800daa0:	637b      	str	r3, [r7, #52]	; 0x34
 800daa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800daa6:	693b      	ldr	r3, [r7, #16]
 800daa8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800daac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800daae:	4618      	mov	r0, r3
 800dab0:	3738      	adds	r7, #56	; 0x38
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}

0800dab6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800dab6:	b480      	push	{r7}
 800dab8:	b085      	sub	sp, #20
 800daba:	af00      	add	r7, sp, #0
 800dabc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d006      	beq.n	800dad4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	f1c3 0307 	rsb	r3, r3, #7
 800dad0:	60fb      	str	r3, [r7, #12]
 800dad2:	e001      	b.n	800dad8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800dad4:	2300      	movs	r3, #0
 800dad6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800dad8:	68fb      	ldr	r3, [r7, #12]
	}
 800dada:	4618      	mov	r0, r3
 800dadc:	3714      	adds	r7, #20
 800dade:	46bd      	mov	sp, r7
 800dae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae4:	4770      	bx	lr

0800dae6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dae6:	b580      	push	{r7, lr}
 800dae8:	b086      	sub	sp, #24
 800daea:	af00      	add	r7, sp, #0
 800daec:	60f8      	str	r0, [r7, #12]
 800daee:	60b9      	str	r1, [r7, #8]
 800daf0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800daf2:	2300      	movs	r3, #0
 800daf4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dafa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db00:	2b00      	cmp	r3, #0
 800db02:	d10d      	bne.n	800db20 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d14d      	bne.n	800dba8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	689b      	ldr	r3, [r3, #8]
 800db10:	4618      	mov	r0, r3
 800db12:	f001 f827 	bl	800eb64 <xTaskPriorityDisinherit>
 800db16:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	2200      	movs	r2, #0
 800db1c:	609a      	str	r2, [r3, #8]
 800db1e:	e043      	b.n	800dba8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d119      	bne.n	800db5a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	6858      	ldr	r0, [r3, #4]
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db2e:	461a      	mov	r2, r3
 800db30:	68b9      	ldr	r1, [r7, #8]
 800db32:	f002 f95b 	bl	800fdec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	685a      	ldr	r2, [r3, #4]
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db3e:	441a      	add	r2, r3
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	685a      	ldr	r2, [r3, #4]
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	689b      	ldr	r3, [r3, #8]
 800db4c:	429a      	cmp	r2, r3
 800db4e:	d32b      	bcc.n	800dba8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	681a      	ldr	r2, [r3, #0]
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	605a      	str	r2, [r3, #4]
 800db58:	e026      	b.n	800dba8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	68d8      	ldr	r0, [r3, #12]
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db62:	461a      	mov	r2, r3
 800db64:	68b9      	ldr	r1, [r7, #8]
 800db66:	f002 f941 	bl	800fdec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	68da      	ldr	r2, [r3, #12]
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db72:	425b      	negs	r3, r3
 800db74:	441a      	add	r2, r3
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	68da      	ldr	r2, [r3, #12]
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	429a      	cmp	r2, r3
 800db84:	d207      	bcs.n	800db96 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	689a      	ldr	r2, [r3, #8]
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db8e:	425b      	negs	r3, r3
 800db90:	441a      	add	r2, r3
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2b02      	cmp	r3, #2
 800db9a:	d105      	bne.n	800dba8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800db9c:	693b      	ldr	r3, [r7, #16]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d002      	beq.n	800dba8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dba2:	693b      	ldr	r3, [r7, #16]
 800dba4:	3b01      	subs	r3, #1
 800dba6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dba8:	693b      	ldr	r3, [r7, #16]
 800dbaa:	1c5a      	adds	r2, r3, #1
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800dbb0:	697b      	ldr	r3, [r7, #20]
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3718      	adds	r7, #24
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}

0800dbba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dbba:	b580      	push	{r7, lr}
 800dbbc:	b082      	sub	sp, #8
 800dbbe:	af00      	add	r7, sp, #0
 800dbc0:	6078      	str	r0, [r7, #4]
 800dbc2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d018      	beq.n	800dbfe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	68da      	ldr	r2, [r3, #12]
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbd4:	441a      	add	r2, r3
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	68da      	ldr	r2, [r3, #12]
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	689b      	ldr	r3, [r3, #8]
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d303      	bcc.n	800dbee <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681a      	ldr	r2, [r3, #0]
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	68d9      	ldr	r1, [r3, #12]
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbf6:	461a      	mov	r2, r3
 800dbf8:	6838      	ldr	r0, [r7, #0]
 800dbfa:	f002 f8f7 	bl	800fdec <memcpy>
	}
}
 800dbfe:	bf00      	nop
 800dc00:	3708      	adds	r7, #8
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}

0800dc06 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dc06:	b580      	push	{r7, lr}
 800dc08:	b084      	sub	sp, #16
 800dc0a:	af00      	add	r7, sp, #0
 800dc0c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dc0e:	f001 fd95 	bl	800f73c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc18:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dc1a:	e011      	b.n	800dc40 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d012      	beq.n	800dc4a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	3324      	adds	r3, #36	; 0x24
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f000 fd45 	bl	800e6b8 <xTaskRemoveFromEventList>
 800dc2e:	4603      	mov	r3, r0
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d001      	beq.n	800dc38 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dc34:	f000 fe18 	bl	800e868 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dc38:	7bfb      	ldrb	r3, [r7, #15]
 800dc3a:	3b01      	subs	r3, #1
 800dc3c:	b2db      	uxtb	r3, r3
 800dc3e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dc40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	dce9      	bgt.n	800dc1c <prvUnlockQueue+0x16>
 800dc48:	e000      	b.n	800dc4c <prvUnlockQueue+0x46>
					break;
 800dc4a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	22ff      	movs	r2, #255	; 0xff
 800dc50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dc54:	f001 fda0 	bl	800f798 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dc58:	f001 fd70 	bl	800f73c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc62:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dc64:	e011      	b.n	800dc8a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	691b      	ldr	r3, [r3, #16]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d012      	beq.n	800dc94 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	3310      	adds	r3, #16
 800dc72:	4618      	mov	r0, r3
 800dc74:	f000 fd20 	bl	800e6b8 <xTaskRemoveFromEventList>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d001      	beq.n	800dc82 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dc7e:	f000 fdf3 	bl	800e868 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dc82:	7bbb      	ldrb	r3, [r7, #14]
 800dc84:	3b01      	subs	r3, #1
 800dc86:	b2db      	uxtb	r3, r3
 800dc88:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dc8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	dce9      	bgt.n	800dc66 <prvUnlockQueue+0x60>
 800dc92:	e000      	b.n	800dc96 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dc94:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	22ff      	movs	r2, #255	; 0xff
 800dc9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dc9e:	f001 fd7b 	bl	800f798 <vPortExitCritical>
}
 800dca2:	bf00      	nop
 800dca4:	3710      	adds	r7, #16
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}

0800dcaa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dcaa:	b580      	push	{r7, lr}
 800dcac:	b084      	sub	sp, #16
 800dcae:	af00      	add	r7, sp, #0
 800dcb0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dcb2:	f001 fd43 	bl	800f73c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d102      	bne.n	800dcc4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	60fb      	str	r3, [r7, #12]
 800dcc2:	e001      	b.n	800dcc8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dcc8:	f001 fd66 	bl	800f798 <vPortExitCritical>

	return xReturn;
 800dccc:	68fb      	ldr	r3, [r7, #12]
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3710      	adds	r7, #16
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}

0800dcd6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dcd6:	b580      	push	{r7, lr}
 800dcd8:	b084      	sub	sp, #16
 800dcda:	af00      	add	r7, sp, #0
 800dcdc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dcde:	f001 fd2d 	bl	800f73c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcea:	429a      	cmp	r2, r3
 800dcec:	d102      	bne.n	800dcf4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dcee:	2301      	movs	r3, #1
 800dcf0:	60fb      	str	r3, [r7, #12]
 800dcf2:	e001      	b.n	800dcf8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dcf8:	f001 fd4e 	bl	800f798 <vPortExitCritical>

	return xReturn;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
}
 800dcfe:	4618      	mov	r0, r3
 800dd00:	3710      	adds	r7, #16
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}
	...

0800dd08 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dd08:	b480      	push	{r7}
 800dd0a:	b085      	sub	sp, #20
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
 800dd10:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dd12:	2300      	movs	r3, #0
 800dd14:	60fb      	str	r3, [r7, #12]
 800dd16:	e014      	b.n	800dd42 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dd18:	4a0e      	ldr	r2, [pc, #56]	; (800dd54 <vQueueAddToRegistry+0x4c>)
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d10b      	bne.n	800dd3c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dd24:	490b      	ldr	r1, [pc, #44]	; (800dd54 <vQueueAddToRegistry+0x4c>)
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	683a      	ldr	r2, [r7, #0]
 800dd2a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dd2e:	4a09      	ldr	r2, [pc, #36]	; (800dd54 <vQueueAddToRegistry+0x4c>)
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	00db      	lsls	r3, r3, #3
 800dd34:	4413      	add	r3, r2
 800dd36:	687a      	ldr	r2, [r7, #4]
 800dd38:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dd3a:	e005      	b.n	800dd48 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	3301      	adds	r3, #1
 800dd40:	60fb      	str	r3, [r7, #12]
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	2b07      	cmp	r3, #7
 800dd46:	d9e7      	bls.n	800dd18 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dd48:	bf00      	nop
 800dd4a:	3714      	adds	r7, #20
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd52:	4770      	bx	lr
 800dd54:	20003804 	.word	0x20003804

0800dd58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b086      	sub	sp, #24
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	60f8      	str	r0, [r7, #12]
 800dd60:	60b9      	str	r1, [r7, #8]
 800dd62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dd68:	f001 fce8 	bl	800f73c <vPortEnterCritical>
 800dd6c:	697b      	ldr	r3, [r7, #20]
 800dd6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd72:	b25b      	sxtb	r3, r3
 800dd74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd78:	d103      	bne.n	800dd82 <vQueueWaitForMessageRestricted+0x2a>
 800dd7a:	697b      	ldr	r3, [r7, #20]
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd88:	b25b      	sxtb	r3, r3
 800dd8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd8e:	d103      	bne.n	800dd98 <vQueueWaitForMessageRestricted+0x40>
 800dd90:	697b      	ldr	r3, [r7, #20]
 800dd92:	2200      	movs	r2, #0
 800dd94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dd98:	f001 fcfe 	bl	800f798 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dd9c:	697b      	ldr	r3, [r7, #20]
 800dd9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d106      	bne.n	800ddb2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dda4:	697b      	ldr	r3, [r7, #20]
 800dda6:	3324      	adds	r3, #36	; 0x24
 800dda8:	687a      	ldr	r2, [r7, #4]
 800ddaa:	68b9      	ldr	r1, [r7, #8]
 800ddac:	4618      	mov	r0, r3
 800ddae:	f000 fc59 	bl	800e664 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ddb2:	6978      	ldr	r0, [r7, #20]
 800ddb4:	f7ff ff27 	bl	800dc06 <prvUnlockQueue>
	}
 800ddb8:	bf00      	nop
 800ddba:	3718      	adds	r7, #24
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd80      	pop	{r7, pc}

0800ddc0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b08e      	sub	sp, #56	; 0x38
 800ddc4:	af04      	add	r7, sp, #16
 800ddc6:	60f8      	str	r0, [r7, #12]
 800ddc8:	60b9      	str	r1, [r7, #8]
 800ddca:	607a      	str	r2, [r7, #4]
 800ddcc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ddce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d109      	bne.n	800dde8 <xTaskCreateStatic+0x28>
	__asm volatile
 800ddd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddd8:	f383 8811 	msr	BASEPRI, r3
 800dddc:	f3bf 8f6f 	isb	sy
 800dde0:	f3bf 8f4f 	dsb	sy
 800dde4:	623b      	str	r3, [r7, #32]
 800dde6:	e7fe      	b.n	800dde6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800dde8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d109      	bne.n	800de02 <xTaskCreateStatic+0x42>
 800ddee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf2:	f383 8811 	msr	BASEPRI, r3
 800ddf6:	f3bf 8f6f 	isb	sy
 800ddfa:	f3bf 8f4f 	dsb	sy
 800ddfe:	61fb      	str	r3, [r7, #28]
 800de00:	e7fe      	b.n	800de00 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800de02:	2368      	movs	r3, #104	; 0x68
 800de04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800de06:	693b      	ldr	r3, [r7, #16]
 800de08:	2b68      	cmp	r3, #104	; 0x68
 800de0a:	d009      	beq.n	800de20 <xTaskCreateStatic+0x60>
 800de0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de10:	f383 8811 	msr	BASEPRI, r3
 800de14:	f3bf 8f6f 	isb	sy
 800de18:	f3bf 8f4f 	dsb	sy
 800de1c:	61bb      	str	r3, [r7, #24]
 800de1e:	e7fe      	b.n	800de1e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800de20:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800de22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de24:	2b00      	cmp	r3, #0
 800de26:	d01e      	beq.n	800de66 <xTaskCreateStatic+0xa6>
 800de28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d01b      	beq.n	800de66 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800de2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de30:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800de32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de36:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800de38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de3a:	2202      	movs	r2, #2
 800de3c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800de40:	2300      	movs	r3, #0
 800de42:	9303      	str	r3, [sp, #12]
 800de44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de46:	9302      	str	r3, [sp, #8]
 800de48:	f107 0314 	add.w	r3, r7, #20
 800de4c:	9301      	str	r3, [sp, #4]
 800de4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de50:	9300      	str	r3, [sp, #0]
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	687a      	ldr	r2, [r7, #4]
 800de56:	68b9      	ldr	r1, [r7, #8]
 800de58:	68f8      	ldr	r0, [r7, #12]
 800de5a:	f000 f850 	bl	800defe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800de5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de60:	f000 f8e4 	bl	800e02c <prvAddNewTaskToReadyList>
 800de64:	e001      	b.n	800de6a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800de66:	2300      	movs	r3, #0
 800de68:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800de6a:	697b      	ldr	r3, [r7, #20]
	}
 800de6c:	4618      	mov	r0, r3
 800de6e:	3728      	adds	r7, #40	; 0x28
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}

0800de74 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800de74:	b580      	push	{r7, lr}
 800de76:	b08c      	sub	sp, #48	; 0x30
 800de78:	af04      	add	r7, sp, #16
 800de7a:	60f8      	str	r0, [r7, #12]
 800de7c:	60b9      	str	r1, [r7, #8]
 800de7e:	603b      	str	r3, [r7, #0]
 800de80:	4613      	mov	r3, r2
 800de82:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800de84:	88fb      	ldrh	r3, [r7, #6]
 800de86:	009b      	lsls	r3, r3, #2
 800de88:	4618      	mov	r0, r3
 800de8a:	f001 fd71 	bl	800f970 <pvPortMalloc>
 800de8e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800de90:	697b      	ldr	r3, [r7, #20]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d00e      	beq.n	800deb4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800de96:	2068      	movs	r0, #104	; 0x68
 800de98:	f001 fd6a 	bl	800f970 <pvPortMalloc>
 800de9c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800de9e:	69fb      	ldr	r3, [r7, #28]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d003      	beq.n	800deac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dea4:	69fb      	ldr	r3, [r7, #28]
 800dea6:	697a      	ldr	r2, [r7, #20]
 800dea8:	631a      	str	r2, [r3, #48]	; 0x30
 800deaa:	e005      	b.n	800deb8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800deac:	6978      	ldr	r0, [r7, #20]
 800deae:	f001 fe25 	bl	800fafc <vPortFree>
 800deb2:	e001      	b.n	800deb8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800deb4:	2300      	movs	r3, #0
 800deb6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800deb8:	69fb      	ldr	r3, [r7, #28]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d017      	beq.n	800deee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800debe:	69fb      	ldr	r3, [r7, #28]
 800dec0:	2200      	movs	r2, #0
 800dec2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dec6:	88fa      	ldrh	r2, [r7, #6]
 800dec8:	2300      	movs	r3, #0
 800deca:	9303      	str	r3, [sp, #12]
 800decc:	69fb      	ldr	r3, [r7, #28]
 800dece:	9302      	str	r3, [sp, #8]
 800ded0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ded2:	9301      	str	r3, [sp, #4]
 800ded4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ded6:	9300      	str	r3, [sp, #0]
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	68b9      	ldr	r1, [r7, #8]
 800dedc:	68f8      	ldr	r0, [r7, #12]
 800dede:	f000 f80e 	bl	800defe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dee2:	69f8      	ldr	r0, [r7, #28]
 800dee4:	f000 f8a2 	bl	800e02c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dee8:	2301      	movs	r3, #1
 800deea:	61bb      	str	r3, [r7, #24]
 800deec:	e002      	b.n	800def4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800deee:	f04f 33ff 	mov.w	r3, #4294967295
 800def2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800def4:	69bb      	ldr	r3, [r7, #24]
	}
 800def6:	4618      	mov	r0, r3
 800def8:	3720      	adds	r7, #32
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}

0800defe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800defe:	b580      	push	{r7, lr}
 800df00:	b088      	sub	sp, #32
 800df02:	af00      	add	r7, sp, #0
 800df04:	60f8      	str	r0, [r7, #12]
 800df06:	60b9      	str	r1, [r7, #8]
 800df08:	607a      	str	r2, [r7, #4]
 800df0a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800df0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df0e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	009b      	lsls	r3, r3, #2
 800df14:	461a      	mov	r2, r3
 800df16:	21a5      	movs	r1, #165	; 0xa5
 800df18:	f001 ff73 	bl	800fe02 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800df1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800df26:	3b01      	subs	r3, #1
 800df28:	009b      	lsls	r3, r3, #2
 800df2a:	4413      	add	r3, r2
 800df2c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800df2e:	69bb      	ldr	r3, [r7, #24]
 800df30:	f023 0307 	bic.w	r3, r3, #7
 800df34:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800df36:	69bb      	ldr	r3, [r7, #24]
 800df38:	f003 0307 	and.w	r3, r3, #7
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d009      	beq.n	800df54 <prvInitialiseNewTask+0x56>
 800df40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df44:	f383 8811 	msr	BASEPRI, r3
 800df48:	f3bf 8f6f 	isb	sy
 800df4c:	f3bf 8f4f 	dsb	sy
 800df50:	617b      	str	r3, [r7, #20]
 800df52:	e7fe      	b.n	800df52 <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800df54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df56:	69ba      	ldr	r2, [r7, #24]
 800df58:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d01f      	beq.n	800dfa0 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df60:	2300      	movs	r3, #0
 800df62:	61fb      	str	r3, [r7, #28]
 800df64:	e012      	b.n	800df8c <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800df66:	68ba      	ldr	r2, [r7, #8]
 800df68:	69fb      	ldr	r3, [r7, #28]
 800df6a:	4413      	add	r3, r2
 800df6c:	7819      	ldrb	r1, [r3, #0]
 800df6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df70:	69fb      	ldr	r3, [r7, #28]
 800df72:	4413      	add	r3, r2
 800df74:	3334      	adds	r3, #52	; 0x34
 800df76:	460a      	mov	r2, r1
 800df78:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800df7a:	68ba      	ldr	r2, [r7, #8]
 800df7c:	69fb      	ldr	r3, [r7, #28]
 800df7e:	4413      	add	r3, r2
 800df80:	781b      	ldrb	r3, [r3, #0]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d006      	beq.n	800df94 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df86:	69fb      	ldr	r3, [r7, #28]
 800df88:	3301      	adds	r3, #1
 800df8a:	61fb      	str	r3, [r7, #28]
 800df8c:	69fb      	ldr	r3, [r7, #28]
 800df8e:	2b0f      	cmp	r3, #15
 800df90:	d9e9      	bls.n	800df66 <prvInitialiseNewTask+0x68>
 800df92:	e000      	b.n	800df96 <prvInitialiseNewTask+0x98>
			{
				break;
 800df94:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800df96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df98:	2200      	movs	r2, #0
 800df9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800df9e:	e003      	b.n	800dfa8 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dfa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dfa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfaa:	2b06      	cmp	r3, #6
 800dfac:	d901      	bls.n	800dfb2 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dfae:	2306      	movs	r3, #6
 800dfb0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfb6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dfb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfbc:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800dfbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dfc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc6:	3304      	adds	r3, #4
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f7fe fe77 	bl	800ccbc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dfce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfd0:	3318      	adds	r3, #24
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f7fe fe72 	bl	800ccbc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dfd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfdc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfe0:	f1c3 0207 	rsb	r2, r3, #7
 800dfe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dfe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfec:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800dfee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff0:	2200      	movs	r2, #0
 800dff2:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800dff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff6:	2200      	movs	r2, #0
 800dff8:	65da      	str	r2, [r3, #92]	; 0x5c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dffc:	2200      	movs	r2, #0
 800dffe:	661a      	str	r2, [r3, #96]	; 0x60
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e002:	2200      	movs	r2, #0
 800e004:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e008:	683a      	ldr	r2, [r7, #0]
 800e00a:	68f9      	ldr	r1, [r7, #12]
 800e00c:	69b8      	ldr	r0, [r7, #24]
 800e00e:	f001 fa6d 	bl	800f4ec <pxPortInitialiseStack>
 800e012:	4602      	mov	r2, r0
 800e014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e016:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d002      	beq.n	800e024 <prvInitialiseNewTask+0x126>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e022:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e024:	bf00      	nop
 800e026:	3720      	adds	r7, #32
 800e028:	46bd      	mov	sp, r7
 800e02a:	bd80      	pop	{r7, pc}

0800e02c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b082      	sub	sp, #8
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e034:	f001 fb82 	bl	800f73c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e038:	4b2c      	ldr	r3, [pc, #176]	; (800e0ec <prvAddNewTaskToReadyList+0xc0>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	3301      	adds	r3, #1
 800e03e:	4a2b      	ldr	r2, [pc, #172]	; (800e0ec <prvAddNewTaskToReadyList+0xc0>)
 800e040:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e042:	4b2b      	ldr	r3, [pc, #172]	; (800e0f0 <prvAddNewTaskToReadyList+0xc4>)
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d109      	bne.n	800e05e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e04a:	4a29      	ldr	r2, [pc, #164]	; (800e0f0 <prvAddNewTaskToReadyList+0xc4>)
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e050:	4b26      	ldr	r3, [pc, #152]	; (800e0ec <prvAddNewTaskToReadyList+0xc0>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	2b01      	cmp	r3, #1
 800e056:	d110      	bne.n	800e07a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e058:	f000 fc2c 	bl	800e8b4 <prvInitialiseTaskLists>
 800e05c:	e00d      	b.n	800e07a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e05e:	4b25      	ldr	r3, [pc, #148]	; (800e0f4 <prvAddNewTaskToReadyList+0xc8>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d109      	bne.n	800e07a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e066:	4b22      	ldr	r3, [pc, #136]	; (800e0f0 <prvAddNewTaskToReadyList+0xc4>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e070:	429a      	cmp	r2, r3
 800e072:	d802      	bhi.n	800e07a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e074:	4a1e      	ldr	r2, [pc, #120]	; (800e0f0 <prvAddNewTaskToReadyList+0xc4>)
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e07a:	4b1f      	ldr	r3, [pc, #124]	; (800e0f8 <prvAddNewTaskToReadyList+0xcc>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	3301      	adds	r3, #1
 800e080:	4a1d      	ldr	r2, [pc, #116]	; (800e0f8 <prvAddNewTaskToReadyList+0xcc>)
 800e082:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e084:	4b1c      	ldr	r3, [pc, #112]	; (800e0f8 <prvAddNewTaskToReadyList+0xcc>)
 800e086:	681a      	ldr	r2, [r3, #0]
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e090:	2201      	movs	r2, #1
 800e092:	409a      	lsls	r2, r3
 800e094:	4b19      	ldr	r3, [pc, #100]	; (800e0fc <prvAddNewTaskToReadyList+0xd0>)
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	4313      	orrs	r3, r2
 800e09a:	4a18      	ldr	r2, [pc, #96]	; (800e0fc <prvAddNewTaskToReadyList+0xd0>)
 800e09c:	6013      	str	r3, [r2, #0]
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0a2:	4613      	mov	r3, r2
 800e0a4:	009b      	lsls	r3, r3, #2
 800e0a6:	4413      	add	r3, r2
 800e0a8:	009b      	lsls	r3, r3, #2
 800e0aa:	4a15      	ldr	r2, [pc, #84]	; (800e100 <prvAddNewTaskToReadyList+0xd4>)
 800e0ac:	441a      	add	r2, r3
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	3304      	adds	r3, #4
 800e0b2:	4619      	mov	r1, r3
 800e0b4:	4610      	mov	r0, r2
 800e0b6:	f7fe fe0e 	bl	800ccd6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e0ba:	f001 fb6d 	bl	800f798 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e0be:	4b0d      	ldr	r3, [pc, #52]	; (800e0f4 <prvAddNewTaskToReadyList+0xc8>)
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d00e      	beq.n	800e0e4 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e0c6:	4b0a      	ldr	r3, [pc, #40]	; (800e0f0 <prvAddNewTaskToReadyList+0xc4>)
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0d0:	429a      	cmp	r2, r3
 800e0d2:	d207      	bcs.n	800e0e4 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e0d4:	4b0b      	ldr	r3, [pc, #44]	; (800e104 <prvAddNewTaskToReadyList+0xd8>)
 800e0d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0da:	601a      	str	r2, [r3, #0]
 800e0dc:	f3bf 8f4f 	dsb	sy
 800e0e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e0e4:	bf00      	nop
 800e0e6:	3708      	adds	r7, #8
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}
 800e0ec:	20000f08 	.word	0x20000f08
 800e0f0:	20000e08 	.word	0x20000e08
 800e0f4:	20000f14 	.word	0x20000f14
 800e0f8:	20000f24 	.word	0x20000f24
 800e0fc:	20000f10 	.word	0x20000f10
 800e100:	20000e0c 	.word	0x20000e0c
 800e104:	e000ed04 	.word	0xe000ed04

0800e108 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b084      	sub	sp, #16
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e110:	2300      	movs	r3, #0
 800e112:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d016      	beq.n	800e148 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e11a:	4b13      	ldr	r3, [pc, #76]	; (800e168 <vTaskDelay+0x60>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d009      	beq.n	800e136 <vTaskDelay+0x2e>
 800e122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e126:	f383 8811 	msr	BASEPRI, r3
 800e12a:	f3bf 8f6f 	isb	sy
 800e12e:	f3bf 8f4f 	dsb	sy
 800e132:	60bb      	str	r3, [r7, #8]
 800e134:	e7fe      	b.n	800e134 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800e136:	f000 f881 	bl	800e23c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e13a:	2100      	movs	r1, #0
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f000 fe41 	bl	800edc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e142:	f000 f889 	bl	800e258 <xTaskResumeAll>
 800e146:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d107      	bne.n	800e15e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800e14e:	4b07      	ldr	r3, [pc, #28]	; (800e16c <vTaskDelay+0x64>)
 800e150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e154:	601a      	str	r2, [r3, #0]
 800e156:	f3bf 8f4f 	dsb	sy
 800e15a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e15e:	bf00      	nop
 800e160:	3710      	adds	r7, #16
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}
 800e166:	bf00      	nop
 800e168:	20000f30 	.word	0x20000f30
 800e16c:	e000ed04 	.word	0xe000ed04

0800e170 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b08a      	sub	sp, #40	; 0x28
 800e174:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e176:	2300      	movs	r3, #0
 800e178:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e17a:	2300      	movs	r3, #0
 800e17c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e17e:	463a      	mov	r2, r7
 800e180:	1d39      	adds	r1, r7, #4
 800e182:	f107 0308 	add.w	r3, r7, #8
 800e186:	4618      	mov	r0, r3
 800e188:	f7f2 fbfa 	bl	8000980 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e18c:	6839      	ldr	r1, [r7, #0]
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	68ba      	ldr	r2, [r7, #8]
 800e192:	9202      	str	r2, [sp, #8]
 800e194:	9301      	str	r3, [sp, #4]
 800e196:	2300      	movs	r3, #0
 800e198:	9300      	str	r3, [sp, #0]
 800e19a:	2300      	movs	r3, #0
 800e19c:	460a      	mov	r2, r1
 800e19e:	4921      	ldr	r1, [pc, #132]	; (800e224 <vTaskStartScheduler+0xb4>)
 800e1a0:	4821      	ldr	r0, [pc, #132]	; (800e228 <vTaskStartScheduler+0xb8>)
 800e1a2:	f7ff fe0d 	bl	800ddc0 <xTaskCreateStatic>
 800e1a6:	4602      	mov	r2, r0
 800e1a8:	4b20      	ldr	r3, [pc, #128]	; (800e22c <vTaskStartScheduler+0xbc>)
 800e1aa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e1ac:	4b1f      	ldr	r3, [pc, #124]	; (800e22c <vTaskStartScheduler+0xbc>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d002      	beq.n	800e1ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	617b      	str	r3, [r7, #20]
 800e1b8:	e001      	b.n	800e1be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e1be:	697b      	ldr	r3, [r7, #20]
 800e1c0:	2b01      	cmp	r3, #1
 800e1c2:	d102      	bne.n	800e1ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e1c4:	f000 fe64 	bl	800ee90 <xTimerCreateTimerTask>
 800e1c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	2b01      	cmp	r3, #1
 800e1ce:	d117      	bne.n	800e200 <vTaskStartScheduler+0x90>
 800e1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d4:	f383 8811 	msr	BASEPRI, r3
 800e1d8:	f3bf 8f6f 	isb	sy
 800e1dc:	f3bf 8f4f 	dsb	sy
 800e1e0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e1e2:	4b13      	ldr	r3, [pc, #76]	; (800e230 <vTaskStartScheduler+0xc0>)
 800e1e4:	f04f 32ff 	mov.w	r2, #4294967295
 800e1e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e1ea:	4b12      	ldr	r3, [pc, #72]	; (800e234 <vTaskStartScheduler+0xc4>)
 800e1ec:	2201      	movs	r2, #1
 800e1ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e1f0:	4b11      	ldr	r3, [pc, #68]	; (800e238 <vTaskStartScheduler+0xc8>)
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800e1f6:	f7f2 fb9f 	bl	8000938 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e1fa:	f001 fa01 	bl	800f600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e1fe:	e00d      	b.n	800e21c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e206:	d109      	bne.n	800e21c <vTaskStartScheduler+0xac>
 800e208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e20c:	f383 8811 	msr	BASEPRI, r3
 800e210:	f3bf 8f6f 	isb	sy
 800e214:	f3bf 8f4f 	dsb	sy
 800e218:	60fb      	str	r3, [r7, #12]
 800e21a:	e7fe      	b.n	800e21a <vTaskStartScheduler+0xaa>
}
 800e21c:	bf00      	nop
 800e21e:	3718      	adds	r7, #24
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}
 800e224:	080114f0 	.word	0x080114f0
 800e228:	0800e881 	.word	0x0800e881
 800e22c:	20000f2c 	.word	0x20000f2c
 800e230:	20000f28 	.word	0x20000f28
 800e234:	20000f14 	.word	0x20000f14
 800e238:	20000f0c 	.word	0x20000f0c

0800e23c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e23c:	b480      	push	{r7}
 800e23e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e240:	4b04      	ldr	r3, [pc, #16]	; (800e254 <vTaskSuspendAll+0x18>)
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	3301      	adds	r3, #1
 800e246:	4a03      	ldr	r2, [pc, #12]	; (800e254 <vTaskSuspendAll+0x18>)
 800e248:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e24a:	bf00      	nop
 800e24c:	46bd      	mov	sp, r7
 800e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e252:	4770      	bx	lr
 800e254:	20000f30 	.word	0x20000f30

0800e258 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b084      	sub	sp, #16
 800e25c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e25e:	2300      	movs	r3, #0
 800e260:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e262:	2300      	movs	r3, #0
 800e264:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e266:	4b41      	ldr	r3, [pc, #260]	; (800e36c <xTaskResumeAll+0x114>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d109      	bne.n	800e282 <xTaskResumeAll+0x2a>
 800e26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e272:	f383 8811 	msr	BASEPRI, r3
 800e276:	f3bf 8f6f 	isb	sy
 800e27a:	f3bf 8f4f 	dsb	sy
 800e27e:	603b      	str	r3, [r7, #0]
 800e280:	e7fe      	b.n	800e280 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e282:	f001 fa5b 	bl	800f73c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e286:	4b39      	ldr	r3, [pc, #228]	; (800e36c <xTaskResumeAll+0x114>)
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	3b01      	subs	r3, #1
 800e28c:	4a37      	ldr	r2, [pc, #220]	; (800e36c <xTaskResumeAll+0x114>)
 800e28e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e290:	4b36      	ldr	r3, [pc, #216]	; (800e36c <xTaskResumeAll+0x114>)
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d161      	bne.n	800e35c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e298:	4b35      	ldr	r3, [pc, #212]	; (800e370 <xTaskResumeAll+0x118>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d05d      	beq.n	800e35c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e2a0:	e02e      	b.n	800e300 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2a2:	4b34      	ldr	r3, [pc, #208]	; (800e374 <xTaskResumeAll+0x11c>)
 800e2a4:	68db      	ldr	r3, [r3, #12]
 800e2a6:	68db      	ldr	r3, [r3, #12]
 800e2a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	3318      	adds	r3, #24
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f7fe fd6e 	bl	800cd90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	3304      	adds	r3, #4
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f7fe fd69 	bl	800cd90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2c2:	2201      	movs	r2, #1
 800e2c4:	409a      	lsls	r2, r3
 800e2c6:	4b2c      	ldr	r3, [pc, #176]	; (800e378 <xTaskResumeAll+0x120>)
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	4313      	orrs	r3, r2
 800e2cc:	4a2a      	ldr	r2, [pc, #168]	; (800e378 <xTaskResumeAll+0x120>)
 800e2ce:	6013      	str	r3, [r2, #0]
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2d4:	4613      	mov	r3, r2
 800e2d6:	009b      	lsls	r3, r3, #2
 800e2d8:	4413      	add	r3, r2
 800e2da:	009b      	lsls	r3, r3, #2
 800e2dc:	4a27      	ldr	r2, [pc, #156]	; (800e37c <xTaskResumeAll+0x124>)
 800e2de:	441a      	add	r2, r3
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	3304      	adds	r3, #4
 800e2e4:	4619      	mov	r1, r3
 800e2e6:	4610      	mov	r0, r2
 800e2e8:	f7fe fcf5 	bl	800ccd6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2f0:	4b23      	ldr	r3, [pc, #140]	; (800e380 <xTaskResumeAll+0x128>)
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d302      	bcc.n	800e300 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800e2fa:	4b22      	ldr	r3, [pc, #136]	; (800e384 <xTaskResumeAll+0x12c>)
 800e2fc:	2201      	movs	r2, #1
 800e2fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e300:	4b1c      	ldr	r3, [pc, #112]	; (800e374 <xTaskResumeAll+0x11c>)
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d1cc      	bne.n	800e2a2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d001      	beq.n	800e312 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e30e:	f000 fb6b 	bl	800e9e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e312:	4b1d      	ldr	r3, [pc, #116]	; (800e388 <xTaskResumeAll+0x130>)
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d010      	beq.n	800e340 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e31e:	f000 f847 	bl	800e3b0 <xTaskIncrementTick>
 800e322:	4603      	mov	r3, r0
 800e324:	2b00      	cmp	r3, #0
 800e326:	d002      	beq.n	800e32e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800e328:	4b16      	ldr	r3, [pc, #88]	; (800e384 <xTaskResumeAll+0x12c>)
 800e32a:	2201      	movs	r2, #1
 800e32c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	3b01      	subs	r3, #1
 800e332:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d1f1      	bne.n	800e31e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800e33a:	4b13      	ldr	r3, [pc, #76]	; (800e388 <xTaskResumeAll+0x130>)
 800e33c:	2200      	movs	r2, #0
 800e33e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e340:	4b10      	ldr	r3, [pc, #64]	; (800e384 <xTaskResumeAll+0x12c>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d009      	beq.n	800e35c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e348:	2301      	movs	r3, #1
 800e34a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e34c:	4b0f      	ldr	r3, [pc, #60]	; (800e38c <xTaskResumeAll+0x134>)
 800e34e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e352:	601a      	str	r2, [r3, #0]
 800e354:	f3bf 8f4f 	dsb	sy
 800e358:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e35c:	f001 fa1c 	bl	800f798 <vPortExitCritical>

	return xAlreadyYielded;
 800e360:	68bb      	ldr	r3, [r7, #8]
}
 800e362:	4618      	mov	r0, r3
 800e364:	3710      	adds	r7, #16
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}
 800e36a:	bf00      	nop
 800e36c:	20000f30 	.word	0x20000f30
 800e370:	20000f08 	.word	0x20000f08
 800e374:	20000ec8 	.word	0x20000ec8
 800e378:	20000f10 	.word	0x20000f10
 800e37c:	20000e0c 	.word	0x20000e0c
 800e380:	20000e08 	.word	0x20000e08
 800e384:	20000f1c 	.word	0x20000f1c
 800e388:	20000f18 	.word	0x20000f18
 800e38c:	e000ed04 	.word	0xe000ed04

0800e390 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e390:	b480      	push	{r7}
 800e392:	b083      	sub	sp, #12
 800e394:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e396:	4b05      	ldr	r3, [pc, #20]	; (800e3ac <xTaskGetTickCount+0x1c>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e39c:	687b      	ldr	r3, [r7, #4]
}
 800e39e:	4618      	mov	r0, r3
 800e3a0:	370c      	adds	r7, #12
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a8:	4770      	bx	lr
 800e3aa:	bf00      	nop
 800e3ac:	20000f0c 	.word	0x20000f0c

0800e3b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b086      	sub	sp, #24
 800e3b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3ba:	4b52      	ldr	r3, [pc, #328]	; (800e504 <xTaskIncrementTick+0x154>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	f040 808d 	bne.w	800e4de <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e3c4:	4b50      	ldr	r3, [pc, #320]	; (800e508 <xTaskIncrementTick+0x158>)
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	3301      	adds	r3, #1
 800e3ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e3cc:	4a4e      	ldr	r2, [pc, #312]	; (800e508 <xTaskIncrementTick+0x158>)
 800e3ce:	693b      	ldr	r3, [r7, #16]
 800e3d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e3d2:	693b      	ldr	r3, [r7, #16]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d11f      	bne.n	800e418 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800e3d8:	4b4c      	ldr	r3, [pc, #304]	; (800e50c <xTaskIncrementTick+0x15c>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d009      	beq.n	800e3f6 <xTaskIncrementTick+0x46>
 800e3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3e6:	f383 8811 	msr	BASEPRI, r3
 800e3ea:	f3bf 8f6f 	isb	sy
 800e3ee:	f3bf 8f4f 	dsb	sy
 800e3f2:	603b      	str	r3, [r7, #0]
 800e3f4:	e7fe      	b.n	800e3f4 <xTaskIncrementTick+0x44>
 800e3f6:	4b45      	ldr	r3, [pc, #276]	; (800e50c <xTaskIncrementTick+0x15c>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	60fb      	str	r3, [r7, #12]
 800e3fc:	4b44      	ldr	r3, [pc, #272]	; (800e510 <xTaskIncrementTick+0x160>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	4a42      	ldr	r2, [pc, #264]	; (800e50c <xTaskIncrementTick+0x15c>)
 800e402:	6013      	str	r3, [r2, #0]
 800e404:	4a42      	ldr	r2, [pc, #264]	; (800e510 <xTaskIncrementTick+0x160>)
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	6013      	str	r3, [r2, #0]
 800e40a:	4b42      	ldr	r3, [pc, #264]	; (800e514 <xTaskIncrementTick+0x164>)
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	3301      	adds	r3, #1
 800e410:	4a40      	ldr	r2, [pc, #256]	; (800e514 <xTaskIncrementTick+0x164>)
 800e412:	6013      	str	r3, [r2, #0]
 800e414:	f000 fae8 	bl	800e9e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e418:	4b3f      	ldr	r3, [pc, #252]	; (800e518 <xTaskIncrementTick+0x168>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	693a      	ldr	r2, [r7, #16]
 800e41e:	429a      	cmp	r2, r3
 800e420:	d348      	bcc.n	800e4b4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e422:	4b3a      	ldr	r3, [pc, #232]	; (800e50c <xTaskIncrementTick+0x15c>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d104      	bne.n	800e436 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e42c:	4b3a      	ldr	r3, [pc, #232]	; (800e518 <xTaskIncrementTick+0x168>)
 800e42e:	f04f 32ff 	mov.w	r2, #4294967295
 800e432:	601a      	str	r2, [r3, #0]
					break;
 800e434:	e03e      	b.n	800e4b4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e436:	4b35      	ldr	r3, [pc, #212]	; (800e50c <xTaskIncrementTick+0x15c>)
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	68db      	ldr	r3, [r3, #12]
 800e43c:	68db      	ldr	r3, [r3, #12]
 800e43e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	685b      	ldr	r3, [r3, #4]
 800e444:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e446:	693a      	ldr	r2, [r7, #16]
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	429a      	cmp	r2, r3
 800e44c:	d203      	bcs.n	800e456 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e44e:	4a32      	ldr	r2, [pc, #200]	; (800e518 <xTaskIncrementTick+0x168>)
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e454:	e02e      	b.n	800e4b4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e456:	68bb      	ldr	r3, [r7, #8]
 800e458:	3304      	adds	r3, #4
 800e45a:	4618      	mov	r0, r3
 800e45c:	f7fe fc98 	bl	800cd90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e460:	68bb      	ldr	r3, [r7, #8]
 800e462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e464:	2b00      	cmp	r3, #0
 800e466:	d004      	beq.n	800e472 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	3318      	adds	r3, #24
 800e46c:	4618      	mov	r0, r3
 800e46e:	f7fe fc8f 	bl	800cd90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e476:	2201      	movs	r2, #1
 800e478:	409a      	lsls	r2, r3
 800e47a:	4b28      	ldr	r3, [pc, #160]	; (800e51c <xTaskIncrementTick+0x16c>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	4313      	orrs	r3, r2
 800e480:	4a26      	ldr	r2, [pc, #152]	; (800e51c <xTaskIncrementTick+0x16c>)
 800e482:	6013      	str	r3, [r2, #0]
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e488:	4613      	mov	r3, r2
 800e48a:	009b      	lsls	r3, r3, #2
 800e48c:	4413      	add	r3, r2
 800e48e:	009b      	lsls	r3, r3, #2
 800e490:	4a23      	ldr	r2, [pc, #140]	; (800e520 <xTaskIncrementTick+0x170>)
 800e492:	441a      	add	r2, r3
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	3304      	adds	r3, #4
 800e498:	4619      	mov	r1, r3
 800e49a:	4610      	mov	r0, r2
 800e49c:	f7fe fc1b 	bl	800ccd6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4a4:	4b1f      	ldr	r3, [pc, #124]	; (800e524 <xTaskIncrementTick+0x174>)
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	d3b9      	bcc.n	800e422 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800e4ae:	2301      	movs	r3, #1
 800e4b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e4b2:	e7b6      	b.n	800e422 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e4b4:	4b1b      	ldr	r3, [pc, #108]	; (800e524 <xTaskIncrementTick+0x174>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4ba:	4919      	ldr	r1, [pc, #100]	; (800e520 <xTaskIncrementTick+0x170>)
 800e4bc:	4613      	mov	r3, r2
 800e4be:	009b      	lsls	r3, r3, #2
 800e4c0:	4413      	add	r3, r2
 800e4c2:	009b      	lsls	r3, r3, #2
 800e4c4:	440b      	add	r3, r1
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	2b01      	cmp	r3, #1
 800e4ca:	d901      	bls.n	800e4d0 <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 800e4d0:	4b15      	ldr	r3, [pc, #84]	; (800e528 <xTaskIncrementTick+0x178>)
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d109      	bne.n	800e4ec <xTaskIncrementTick+0x13c>
			{
				vApplicationTickHook();
 800e4d8:	f7f2 fa44 	bl	8000964 <vApplicationTickHook>
 800e4dc:	e006      	b.n	800e4ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e4de:	4b12      	ldr	r3, [pc, #72]	; (800e528 <xTaskIncrementTick+0x178>)
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	4a10      	ldr	r2, [pc, #64]	; (800e528 <xTaskIncrementTick+0x178>)
 800e4e6:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800e4e8:	f7f2 fa3c 	bl	8000964 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e4ec:	4b0f      	ldr	r3, [pc, #60]	; (800e52c <xTaskIncrementTick+0x17c>)
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d001      	beq.n	800e4f8 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 800e4f4:	2301      	movs	r3, #1
 800e4f6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e4f8:	697b      	ldr	r3, [r7, #20]
}
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	3718      	adds	r7, #24
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bd80      	pop	{r7, pc}
 800e502:	bf00      	nop
 800e504:	20000f30 	.word	0x20000f30
 800e508:	20000f0c 	.word	0x20000f0c
 800e50c:	20000ec0 	.word	0x20000ec0
 800e510:	20000ec4 	.word	0x20000ec4
 800e514:	20000f20 	.word	0x20000f20
 800e518:	20000f28 	.word	0x20000f28
 800e51c:	20000f10 	.word	0x20000f10
 800e520:	20000e0c 	.word	0x20000e0c
 800e524:	20000e08 	.word	0x20000e08
 800e528:	20000f18 	.word	0x20000f18
 800e52c:	20000f1c 	.word	0x20000f1c

0800e530 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b086      	sub	sp, #24
 800e534:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e536:	4b32      	ldr	r3, [pc, #200]	; (800e600 <vTaskSwitchContext+0xd0>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d003      	beq.n	800e546 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e53e:	4b31      	ldr	r3, [pc, #196]	; (800e604 <vTaskSwitchContext+0xd4>)
 800e540:	2201      	movs	r2, #1
 800e542:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e544:	e057      	b.n	800e5f6 <vTaskSwitchContext+0xc6>
		xYieldPending = pdFALSE;
 800e546:	4b2f      	ldr	r3, [pc, #188]	; (800e604 <vTaskSwitchContext+0xd4>)
 800e548:	2200      	movs	r2, #0
 800e54a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e54c:	f7f2 f9fb 	bl	8000946 <getRunTimeCounterValue>
 800e550:	4602      	mov	r2, r0
 800e552:	4b2d      	ldr	r3, [pc, #180]	; (800e608 <vTaskSwitchContext+0xd8>)
 800e554:	601a      	str	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e556:	4b2c      	ldr	r3, [pc, #176]	; (800e608 <vTaskSwitchContext+0xd8>)
 800e558:	681a      	ldr	r2, [r3, #0]
 800e55a:	4b2c      	ldr	r3, [pc, #176]	; (800e60c <vTaskSwitchContext+0xdc>)
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	429a      	cmp	r2, r3
 800e560:	d909      	bls.n	800e576 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e562:	4b2b      	ldr	r3, [pc, #172]	; (800e610 <vTaskSwitchContext+0xe0>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800e568:	4a27      	ldr	r2, [pc, #156]	; (800e608 <vTaskSwitchContext+0xd8>)
 800e56a:	6810      	ldr	r0, [r2, #0]
 800e56c:	4a27      	ldr	r2, [pc, #156]	; (800e60c <vTaskSwitchContext+0xdc>)
 800e56e:	6812      	ldr	r2, [r2, #0]
 800e570:	1a82      	subs	r2, r0, r2
 800e572:	440a      	add	r2, r1
 800e574:	65da      	str	r2, [r3, #92]	; 0x5c
			ulTaskSwitchedInTime = ulTotalRunTime;
 800e576:	4b24      	ldr	r3, [pc, #144]	; (800e608 <vTaskSwitchContext+0xd8>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	4a24      	ldr	r2, [pc, #144]	; (800e60c <vTaskSwitchContext+0xdc>)
 800e57c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e57e:	4b25      	ldr	r3, [pc, #148]	; (800e614 <vTaskSwitchContext+0xe4>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	fab3 f383 	clz	r3, r3
 800e58a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e58c:	7afb      	ldrb	r3, [r7, #11]
 800e58e:	f1c3 031f 	rsb	r3, r3, #31
 800e592:	617b      	str	r3, [r7, #20]
 800e594:	4920      	ldr	r1, [pc, #128]	; (800e618 <vTaskSwitchContext+0xe8>)
 800e596:	697a      	ldr	r2, [r7, #20]
 800e598:	4613      	mov	r3, r2
 800e59a:	009b      	lsls	r3, r3, #2
 800e59c:	4413      	add	r3, r2
 800e59e:	009b      	lsls	r3, r3, #2
 800e5a0:	440b      	add	r3, r1
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d109      	bne.n	800e5bc <vTaskSwitchContext+0x8c>
	__asm volatile
 800e5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ac:	f383 8811 	msr	BASEPRI, r3
 800e5b0:	f3bf 8f6f 	isb	sy
 800e5b4:	f3bf 8f4f 	dsb	sy
 800e5b8:	607b      	str	r3, [r7, #4]
 800e5ba:	e7fe      	b.n	800e5ba <vTaskSwitchContext+0x8a>
 800e5bc:	697a      	ldr	r2, [r7, #20]
 800e5be:	4613      	mov	r3, r2
 800e5c0:	009b      	lsls	r3, r3, #2
 800e5c2:	4413      	add	r3, r2
 800e5c4:	009b      	lsls	r3, r3, #2
 800e5c6:	4a14      	ldr	r2, [pc, #80]	; (800e618 <vTaskSwitchContext+0xe8>)
 800e5c8:	4413      	add	r3, r2
 800e5ca:	613b      	str	r3, [r7, #16]
 800e5cc:	693b      	ldr	r3, [r7, #16]
 800e5ce:	685b      	ldr	r3, [r3, #4]
 800e5d0:	685a      	ldr	r2, [r3, #4]
 800e5d2:	693b      	ldr	r3, [r7, #16]
 800e5d4:	605a      	str	r2, [r3, #4]
 800e5d6:	693b      	ldr	r3, [r7, #16]
 800e5d8:	685a      	ldr	r2, [r3, #4]
 800e5da:	693b      	ldr	r3, [r7, #16]
 800e5dc:	3308      	adds	r3, #8
 800e5de:	429a      	cmp	r2, r3
 800e5e0:	d104      	bne.n	800e5ec <vTaskSwitchContext+0xbc>
 800e5e2:	693b      	ldr	r3, [r7, #16]
 800e5e4:	685b      	ldr	r3, [r3, #4]
 800e5e6:	685a      	ldr	r2, [r3, #4]
 800e5e8:	693b      	ldr	r3, [r7, #16]
 800e5ea:	605a      	str	r2, [r3, #4]
 800e5ec:	693b      	ldr	r3, [r7, #16]
 800e5ee:	685b      	ldr	r3, [r3, #4]
 800e5f0:	68db      	ldr	r3, [r3, #12]
 800e5f2:	4a07      	ldr	r2, [pc, #28]	; (800e610 <vTaskSwitchContext+0xe0>)
 800e5f4:	6013      	str	r3, [r2, #0]
}
 800e5f6:	bf00      	nop
 800e5f8:	3718      	adds	r7, #24
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}
 800e5fe:	bf00      	nop
 800e600:	20000f30 	.word	0x20000f30
 800e604:	20000f1c 	.word	0x20000f1c
 800e608:	20000f38 	.word	0x20000f38
 800e60c:	20000f34 	.word	0x20000f34
 800e610:	20000e08 	.word	0x20000e08
 800e614:	20000f10 	.word	0x20000f10
 800e618:	20000e0c 	.word	0x20000e0c

0800e61c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b084      	sub	sp, #16
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
 800e624:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d109      	bne.n	800e640 <vTaskPlaceOnEventList+0x24>
 800e62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e630:	f383 8811 	msr	BASEPRI, r3
 800e634:	f3bf 8f6f 	isb	sy
 800e638:	f3bf 8f4f 	dsb	sy
 800e63c:	60fb      	str	r3, [r7, #12]
 800e63e:	e7fe      	b.n	800e63e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e640:	4b07      	ldr	r3, [pc, #28]	; (800e660 <vTaskPlaceOnEventList+0x44>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	3318      	adds	r3, #24
 800e646:	4619      	mov	r1, r3
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f7fe fb68 	bl	800cd1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e64e:	2101      	movs	r1, #1
 800e650:	6838      	ldr	r0, [r7, #0]
 800e652:	f000 fbb7 	bl	800edc4 <prvAddCurrentTaskToDelayedList>
}
 800e656:	bf00      	nop
 800e658:	3710      	adds	r7, #16
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}
 800e65e:	bf00      	nop
 800e660:	20000e08 	.word	0x20000e08

0800e664 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e664:	b580      	push	{r7, lr}
 800e666:	b086      	sub	sp, #24
 800e668:	af00      	add	r7, sp, #0
 800e66a:	60f8      	str	r0, [r7, #12]
 800e66c:	60b9      	str	r1, [r7, #8]
 800e66e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d109      	bne.n	800e68a <vTaskPlaceOnEventListRestricted+0x26>
 800e676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e67a:	f383 8811 	msr	BASEPRI, r3
 800e67e:	f3bf 8f6f 	isb	sy
 800e682:	f3bf 8f4f 	dsb	sy
 800e686:	617b      	str	r3, [r7, #20]
 800e688:	e7fe      	b.n	800e688 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e68a:	4b0a      	ldr	r3, [pc, #40]	; (800e6b4 <vTaskPlaceOnEventListRestricted+0x50>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	3318      	adds	r3, #24
 800e690:	4619      	mov	r1, r3
 800e692:	68f8      	ldr	r0, [r7, #12]
 800e694:	f7fe fb1f 	bl	800ccd6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d002      	beq.n	800e6a4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800e69e:	f04f 33ff 	mov.w	r3, #4294967295
 800e6a2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e6a4:	6879      	ldr	r1, [r7, #4]
 800e6a6:	68b8      	ldr	r0, [r7, #8]
 800e6a8:	f000 fb8c 	bl	800edc4 <prvAddCurrentTaskToDelayedList>
	}
 800e6ac:	bf00      	nop
 800e6ae:	3718      	adds	r7, #24
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}
 800e6b4:	20000e08 	.word	0x20000e08

0800e6b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b086      	sub	sp, #24
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	68db      	ldr	r3, [r3, #12]
 800e6c4:	68db      	ldr	r3, [r3, #12]
 800e6c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e6c8:	693b      	ldr	r3, [r7, #16]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d109      	bne.n	800e6e2 <xTaskRemoveFromEventList+0x2a>
 800e6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6d2:	f383 8811 	msr	BASEPRI, r3
 800e6d6:	f3bf 8f6f 	isb	sy
 800e6da:	f3bf 8f4f 	dsb	sy
 800e6de:	60fb      	str	r3, [r7, #12]
 800e6e0:	e7fe      	b.n	800e6e0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e6e2:	693b      	ldr	r3, [r7, #16]
 800e6e4:	3318      	adds	r3, #24
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	f7fe fb52 	bl	800cd90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6ec:	4b1d      	ldr	r3, [pc, #116]	; (800e764 <xTaskRemoveFromEventList+0xac>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d11c      	bne.n	800e72e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e6f4:	693b      	ldr	r3, [r7, #16]
 800e6f6:	3304      	adds	r3, #4
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	f7fe fb49 	bl	800cd90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e6fe:	693b      	ldr	r3, [r7, #16]
 800e700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e702:	2201      	movs	r2, #1
 800e704:	409a      	lsls	r2, r3
 800e706:	4b18      	ldr	r3, [pc, #96]	; (800e768 <xTaskRemoveFromEventList+0xb0>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	4313      	orrs	r3, r2
 800e70c:	4a16      	ldr	r2, [pc, #88]	; (800e768 <xTaskRemoveFromEventList+0xb0>)
 800e70e:	6013      	str	r3, [r2, #0]
 800e710:	693b      	ldr	r3, [r7, #16]
 800e712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e714:	4613      	mov	r3, r2
 800e716:	009b      	lsls	r3, r3, #2
 800e718:	4413      	add	r3, r2
 800e71a:	009b      	lsls	r3, r3, #2
 800e71c:	4a13      	ldr	r2, [pc, #76]	; (800e76c <xTaskRemoveFromEventList+0xb4>)
 800e71e:	441a      	add	r2, r3
 800e720:	693b      	ldr	r3, [r7, #16]
 800e722:	3304      	adds	r3, #4
 800e724:	4619      	mov	r1, r3
 800e726:	4610      	mov	r0, r2
 800e728:	f7fe fad5 	bl	800ccd6 <vListInsertEnd>
 800e72c:	e005      	b.n	800e73a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e72e:	693b      	ldr	r3, [r7, #16]
 800e730:	3318      	adds	r3, #24
 800e732:	4619      	mov	r1, r3
 800e734:	480e      	ldr	r0, [pc, #56]	; (800e770 <xTaskRemoveFromEventList+0xb8>)
 800e736:	f7fe face 	bl	800ccd6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e73a:	693b      	ldr	r3, [r7, #16]
 800e73c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e73e:	4b0d      	ldr	r3, [pc, #52]	; (800e774 <xTaskRemoveFromEventList+0xbc>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e744:	429a      	cmp	r2, r3
 800e746:	d905      	bls.n	800e754 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e748:	2301      	movs	r3, #1
 800e74a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e74c:	4b0a      	ldr	r3, [pc, #40]	; (800e778 <xTaskRemoveFromEventList+0xc0>)
 800e74e:	2201      	movs	r2, #1
 800e750:	601a      	str	r2, [r3, #0]
 800e752:	e001      	b.n	800e758 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800e754:	2300      	movs	r3, #0
 800e756:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e758:	697b      	ldr	r3, [r7, #20]
}
 800e75a:	4618      	mov	r0, r3
 800e75c:	3718      	adds	r7, #24
 800e75e:	46bd      	mov	sp, r7
 800e760:	bd80      	pop	{r7, pc}
 800e762:	bf00      	nop
 800e764:	20000f30 	.word	0x20000f30
 800e768:	20000f10 	.word	0x20000f10
 800e76c:	20000e0c 	.word	0x20000e0c
 800e770:	20000ec8 	.word	0x20000ec8
 800e774:	20000e08 	.word	0x20000e08
 800e778:	20000f1c 	.word	0x20000f1c

0800e77c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e77c:	b480      	push	{r7}
 800e77e:	b083      	sub	sp, #12
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e784:	4b06      	ldr	r3, [pc, #24]	; (800e7a0 <vTaskInternalSetTimeOutState+0x24>)
 800e786:	681a      	ldr	r2, [r3, #0]
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e78c:	4b05      	ldr	r3, [pc, #20]	; (800e7a4 <vTaskInternalSetTimeOutState+0x28>)
 800e78e:	681a      	ldr	r2, [r3, #0]
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	605a      	str	r2, [r3, #4]
}
 800e794:	bf00      	nop
 800e796:	370c      	adds	r7, #12
 800e798:	46bd      	mov	sp, r7
 800e79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79e:	4770      	bx	lr
 800e7a0:	20000f20 	.word	0x20000f20
 800e7a4:	20000f0c 	.word	0x20000f0c

0800e7a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b088      	sub	sp, #32
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
 800e7b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d109      	bne.n	800e7cc <xTaskCheckForTimeOut+0x24>
 800e7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7bc:	f383 8811 	msr	BASEPRI, r3
 800e7c0:	f3bf 8f6f 	isb	sy
 800e7c4:	f3bf 8f4f 	dsb	sy
 800e7c8:	613b      	str	r3, [r7, #16]
 800e7ca:	e7fe      	b.n	800e7ca <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d109      	bne.n	800e7e6 <xTaskCheckForTimeOut+0x3e>
 800e7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7d6:	f383 8811 	msr	BASEPRI, r3
 800e7da:	f3bf 8f6f 	isb	sy
 800e7de:	f3bf 8f4f 	dsb	sy
 800e7e2:	60fb      	str	r3, [r7, #12]
 800e7e4:	e7fe      	b.n	800e7e4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800e7e6:	f000 ffa9 	bl	800f73c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e7ea:	4b1d      	ldr	r3, [pc, #116]	; (800e860 <xTaskCheckForTimeOut+0xb8>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	685b      	ldr	r3, [r3, #4]
 800e7f4:	69ba      	ldr	r2, [r7, #24]
 800e7f6:	1ad3      	subs	r3, r2, r3
 800e7f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e802:	d102      	bne.n	800e80a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e804:	2300      	movs	r3, #0
 800e806:	61fb      	str	r3, [r7, #28]
 800e808:	e023      	b.n	800e852 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681a      	ldr	r2, [r3, #0]
 800e80e:	4b15      	ldr	r3, [pc, #84]	; (800e864 <xTaskCheckForTimeOut+0xbc>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	429a      	cmp	r2, r3
 800e814:	d007      	beq.n	800e826 <xTaskCheckForTimeOut+0x7e>
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	685b      	ldr	r3, [r3, #4]
 800e81a:	69ba      	ldr	r2, [r7, #24]
 800e81c:	429a      	cmp	r2, r3
 800e81e:	d302      	bcc.n	800e826 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e820:	2301      	movs	r3, #1
 800e822:	61fb      	str	r3, [r7, #28]
 800e824:	e015      	b.n	800e852 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e826:	683b      	ldr	r3, [r7, #0]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	697a      	ldr	r2, [r7, #20]
 800e82c:	429a      	cmp	r2, r3
 800e82e:	d20b      	bcs.n	800e848 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	681a      	ldr	r2, [r3, #0]
 800e834:	697b      	ldr	r3, [r7, #20]
 800e836:	1ad2      	subs	r2, r2, r3
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e83c:	6878      	ldr	r0, [r7, #4]
 800e83e:	f7ff ff9d 	bl	800e77c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e842:	2300      	movs	r3, #0
 800e844:	61fb      	str	r3, [r7, #28]
 800e846:	e004      	b.n	800e852 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	2200      	movs	r2, #0
 800e84c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e84e:	2301      	movs	r3, #1
 800e850:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e852:	f000 ffa1 	bl	800f798 <vPortExitCritical>

	return xReturn;
 800e856:	69fb      	ldr	r3, [r7, #28]
}
 800e858:	4618      	mov	r0, r3
 800e85a:	3720      	adds	r7, #32
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd80      	pop	{r7, pc}
 800e860:	20000f0c 	.word	0x20000f0c
 800e864:	20000f20 	.word	0x20000f20

0800e868 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e868:	b480      	push	{r7}
 800e86a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e86c:	4b03      	ldr	r3, [pc, #12]	; (800e87c <vTaskMissedYield+0x14>)
 800e86e:	2201      	movs	r2, #1
 800e870:	601a      	str	r2, [r3, #0]
}
 800e872:	bf00      	nop
 800e874:	46bd      	mov	sp, r7
 800e876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87a:	4770      	bx	lr
 800e87c:	20000f1c 	.word	0x20000f1c

0800e880 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b082      	sub	sp, #8
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e888:	f000 f854 	bl	800e934 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e88c:	4b07      	ldr	r3, [pc, #28]	; (800e8ac <prvIdleTask+0x2c>)
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	2b01      	cmp	r3, #1
 800e892:	d907      	bls.n	800e8a4 <prvIdleTask+0x24>
			{
				taskYIELD();
 800e894:	4b06      	ldr	r3, [pc, #24]	; (800e8b0 <prvIdleTask+0x30>)
 800e896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e89a:	601a      	str	r2, [r3, #0]
 800e89c:	f3bf 8f4f 	dsb	sy
 800e8a0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800e8a4:	f7f2 f857 	bl	8000956 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800e8a8:	e7ee      	b.n	800e888 <prvIdleTask+0x8>
 800e8aa:	bf00      	nop
 800e8ac:	20000e0c 	.word	0x20000e0c
 800e8b0:	e000ed04 	.word	0xe000ed04

0800e8b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b082      	sub	sp, #8
 800e8b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	607b      	str	r3, [r7, #4]
 800e8be:	e00c      	b.n	800e8da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e8c0:	687a      	ldr	r2, [r7, #4]
 800e8c2:	4613      	mov	r3, r2
 800e8c4:	009b      	lsls	r3, r3, #2
 800e8c6:	4413      	add	r3, r2
 800e8c8:	009b      	lsls	r3, r3, #2
 800e8ca:	4a12      	ldr	r2, [pc, #72]	; (800e914 <prvInitialiseTaskLists+0x60>)
 800e8cc:	4413      	add	r3, r2
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f7fe f9d4 	bl	800cc7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	3301      	adds	r3, #1
 800e8d8:	607b      	str	r3, [r7, #4]
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2b06      	cmp	r3, #6
 800e8de:	d9ef      	bls.n	800e8c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e8e0:	480d      	ldr	r0, [pc, #52]	; (800e918 <prvInitialiseTaskLists+0x64>)
 800e8e2:	f7fe f9cb 	bl	800cc7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e8e6:	480d      	ldr	r0, [pc, #52]	; (800e91c <prvInitialiseTaskLists+0x68>)
 800e8e8:	f7fe f9c8 	bl	800cc7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e8ec:	480c      	ldr	r0, [pc, #48]	; (800e920 <prvInitialiseTaskLists+0x6c>)
 800e8ee:	f7fe f9c5 	bl	800cc7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e8f2:	480c      	ldr	r0, [pc, #48]	; (800e924 <prvInitialiseTaskLists+0x70>)
 800e8f4:	f7fe f9c2 	bl	800cc7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e8f8:	480b      	ldr	r0, [pc, #44]	; (800e928 <prvInitialiseTaskLists+0x74>)
 800e8fa:	f7fe f9bf 	bl	800cc7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e8fe:	4b0b      	ldr	r3, [pc, #44]	; (800e92c <prvInitialiseTaskLists+0x78>)
 800e900:	4a05      	ldr	r2, [pc, #20]	; (800e918 <prvInitialiseTaskLists+0x64>)
 800e902:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e904:	4b0a      	ldr	r3, [pc, #40]	; (800e930 <prvInitialiseTaskLists+0x7c>)
 800e906:	4a05      	ldr	r2, [pc, #20]	; (800e91c <prvInitialiseTaskLists+0x68>)
 800e908:	601a      	str	r2, [r3, #0]
}
 800e90a:	bf00      	nop
 800e90c:	3708      	adds	r7, #8
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}
 800e912:	bf00      	nop
 800e914:	20000e0c 	.word	0x20000e0c
 800e918:	20000e98 	.word	0x20000e98
 800e91c:	20000eac 	.word	0x20000eac
 800e920:	20000ec8 	.word	0x20000ec8
 800e924:	20000edc 	.word	0x20000edc
 800e928:	20000ef4 	.word	0x20000ef4
 800e92c:	20000ec0 	.word	0x20000ec0
 800e930:	20000ec4 	.word	0x20000ec4

0800e934 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b082      	sub	sp, #8
 800e938:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e93a:	e019      	b.n	800e970 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e93c:	f000 fefe 	bl	800f73c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e940:	4b0f      	ldr	r3, [pc, #60]	; (800e980 <prvCheckTasksWaitingTermination+0x4c>)
 800e942:	68db      	ldr	r3, [r3, #12]
 800e944:	68db      	ldr	r3, [r3, #12]
 800e946:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	3304      	adds	r3, #4
 800e94c:	4618      	mov	r0, r3
 800e94e:	f7fe fa1f 	bl	800cd90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e952:	4b0c      	ldr	r3, [pc, #48]	; (800e984 <prvCheckTasksWaitingTermination+0x50>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	3b01      	subs	r3, #1
 800e958:	4a0a      	ldr	r2, [pc, #40]	; (800e984 <prvCheckTasksWaitingTermination+0x50>)
 800e95a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e95c:	4b0a      	ldr	r3, [pc, #40]	; (800e988 <prvCheckTasksWaitingTermination+0x54>)
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	3b01      	subs	r3, #1
 800e962:	4a09      	ldr	r2, [pc, #36]	; (800e988 <prvCheckTasksWaitingTermination+0x54>)
 800e964:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e966:	f000 ff17 	bl	800f798 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e96a:	6878      	ldr	r0, [r7, #4]
 800e96c:	f000 f80e 	bl	800e98c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e970:	4b05      	ldr	r3, [pc, #20]	; (800e988 <prvCheckTasksWaitingTermination+0x54>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d1e1      	bne.n	800e93c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e978:	bf00      	nop
 800e97a:	3708      	adds	r7, #8
 800e97c:	46bd      	mov	sp, r7
 800e97e:	bd80      	pop	{r7, pc}
 800e980:	20000edc 	.word	0x20000edc
 800e984:	20000f08 	.word	0x20000f08
 800e988:	20000ef0 	.word	0x20000ef0

0800e98c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b084      	sub	sp, #16
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d108      	bne.n	800e9b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	f001 f8aa 	bl	800fafc <vPortFree>
				vPortFree( pxTCB );
 800e9a8:	6878      	ldr	r0, [r7, #4]
 800e9aa:	f001 f8a7 	bl	800fafc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e9ae:	e017      	b.n	800e9e0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800e9b6:	2b01      	cmp	r3, #1
 800e9b8:	d103      	bne.n	800e9c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f001 f89e 	bl	800fafc <vPortFree>
	}
 800e9c0:	e00e      	b.n	800e9e0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800e9c8:	2b02      	cmp	r3, #2
 800e9ca:	d009      	beq.n	800e9e0 <prvDeleteTCB+0x54>
 800e9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9d0:	f383 8811 	msr	BASEPRI, r3
 800e9d4:	f3bf 8f6f 	isb	sy
 800e9d8:	f3bf 8f4f 	dsb	sy
 800e9dc:	60fb      	str	r3, [r7, #12]
 800e9de:	e7fe      	b.n	800e9de <prvDeleteTCB+0x52>
	}
 800e9e0:	bf00      	nop
 800e9e2:	3710      	adds	r7, #16
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}

0800e9e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e9e8:	b480      	push	{r7}
 800e9ea:	b083      	sub	sp, #12
 800e9ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e9ee:	4b0c      	ldr	r3, [pc, #48]	; (800ea20 <prvResetNextTaskUnblockTime+0x38>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d104      	bne.n	800ea02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e9f8:	4b0a      	ldr	r3, [pc, #40]	; (800ea24 <prvResetNextTaskUnblockTime+0x3c>)
 800e9fa:	f04f 32ff 	mov.w	r2, #4294967295
 800e9fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ea00:	e008      	b.n	800ea14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea02:	4b07      	ldr	r3, [pc, #28]	; (800ea20 <prvResetNextTaskUnblockTime+0x38>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	68db      	ldr	r3, [r3, #12]
 800ea08:	68db      	ldr	r3, [r3, #12]
 800ea0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	685b      	ldr	r3, [r3, #4]
 800ea10:	4a04      	ldr	r2, [pc, #16]	; (800ea24 <prvResetNextTaskUnblockTime+0x3c>)
 800ea12:	6013      	str	r3, [r2, #0]
}
 800ea14:	bf00      	nop
 800ea16:	370c      	adds	r7, #12
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1e:	4770      	bx	lr
 800ea20:	20000ec0 	.word	0x20000ec0
 800ea24:	20000f28 	.word	0x20000f28

0800ea28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ea28:	b480      	push	{r7}
 800ea2a:	b083      	sub	sp, #12
 800ea2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ea2e:	4b0b      	ldr	r3, [pc, #44]	; (800ea5c <xTaskGetSchedulerState+0x34>)
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d102      	bne.n	800ea3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ea36:	2301      	movs	r3, #1
 800ea38:	607b      	str	r3, [r7, #4]
 800ea3a:	e008      	b.n	800ea4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea3c:	4b08      	ldr	r3, [pc, #32]	; (800ea60 <xTaskGetSchedulerState+0x38>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d102      	bne.n	800ea4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ea44:	2302      	movs	r3, #2
 800ea46:	607b      	str	r3, [r7, #4]
 800ea48:	e001      	b.n	800ea4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ea4e:	687b      	ldr	r3, [r7, #4]
	}
 800ea50:	4618      	mov	r0, r3
 800ea52:	370c      	adds	r7, #12
 800ea54:	46bd      	mov	sp, r7
 800ea56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5a:	4770      	bx	lr
 800ea5c:	20000f14 	.word	0x20000f14
 800ea60:	20000f30 	.word	0x20000f30

0800ea64 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b084      	sub	sp, #16
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ea70:	2300      	movs	r3, #0
 800ea72:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d069      	beq.n	800eb4e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ea7a:	68bb      	ldr	r3, [r7, #8]
 800ea7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea7e:	4b36      	ldr	r3, [pc, #216]	; (800eb58 <xTaskPriorityInherit+0xf4>)
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea84:	429a      	cmp	r2, r3
 800ea86:	d259      	bcs.n	800eb3c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ea88:	68bb      	ldr	r3, [r7, #8]
 800ea8a:	699b      	ldr	r3, [r3, #24]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	db06      	blt.n	800ea9e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea90:	4b31      	ldr	r3, [pc, #196]	; (800eb58 <xTaskPriorityInherit+0xf4>)
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea96:	f1c3 0207 	rsb	r2, r3, #7
 800ea9a:	68bb      	ldr	r3, [r7, #8]
 800ea9c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ea9e:	68bb      	ldr	r3, [r7, #8]
 800eaa0:	6959      	ldr	r1, [r3, #20]
 800eaa2:	68bb      	ldr	r3, [r7, #8]
 800eaa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaa6:	4613      	mov	r3, r2
 800eaa8:	009b      	lsls	r3, r3, #2
 800eaaa:	4413      	add	r3, r2
 800eaac:	009b      	lsls	r3, r3, #2
 800eaae:	4a2b      	ldr	r2, [pc, #172]	; (800eb5c <xTaskPriorityInherit+0xf8>)
 800eab0:	4413      	add	r3, r2
 800eab2:	4299      	cmp	r1, r3
 800eab4:	d13a      	bne.n	800eb2c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eab6:	68bb      	ldr	r3, [r7, #8]
 800eab8:	3304      	adds	r3, #4
 800eaba:	4618      	mov	r0, r3
 800eabc:	f7fe f968 	bl	800cd90 <uxListRemove>
 800eac0:	4603      	mov	r3, r0
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d115      	bne.n	800eaf2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaca:	4924      	ldr	r1, [pc, #144]	; (800eb5c <xTaskPriorityInherit+0xf8>)
 800eacc:	4613      	mov	r3, r2
 800eace:	009b      	lsls	r3, r3, #2
 800ead0:	4413      	add	r3, r2
 800ead2:	009b      	lsls	r3, r3, #2
 800ead4:	440b      	add	r3, r1
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d10a      	bne.n	800eaf2 <xTaskPriorityInherit+0x8e>
 800eadc:	68bb      	ldr	r3, [r7, #8]
 800eade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eae0:	2201      	movs	r2, #1
 800eae2:	fa02 f303 	lsl.w	r3, r2, r3
 800eae6:	43da      	mvns	r2, r3
 800eae8:	4b1d      	ldr	r3, [pc, #116]	; (800eb60 <xTaskPriorityInherit+0xfc>)
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	4013      	ands	r3, r2
 800eaee:	4a1c      	ldr	r2, [pc, #112]	; (800eb60 <xTaskPriorityInherit+0xfc>)
 800eaf0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eaf2:	4b19      	ldr	r3, [pc, #100]	; (800eb58 <xTaskPriorityInherit+0xf4>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb00:	2201      	movs	r2, #1
 800eb02:	409a      	lsls	r2, r3
 800eb04:	4b16      	ldr	r3, [pc, #88]	; (800eb60 <xTaskPriorityInherit+0xfc>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	4313      	orrs	r3, r2
 800eb0a:	4a15      	ldr	r2, [pc, #84]	; (800eb60 <xTaskPriorityInherit+0xfc>)
 800eb0c:	6013      	str	r3, [r2, #0]
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb12:	4613      	mov	r3, r2
 800eb14:	009b      	lsls	r3, r3, #2
 800eb16:	4413      	add	r3, r2
 800eb18:	009b      	lsls	r3, r3, #2
 800eb1a:	4a10      	ldr	r2, [pc, #64]	; (800eb5c <xTaskPriorityInherit+0xf8>)
 800eb1c:	441a      	add	r2, r3
 800eb1e:	68bb      	ldr	r3, [r7, #8]
 800eb20:	3304      	adds	r3, #4
 800eb22:	4619      	mov	r1, r3
 800eb24:	4610      	mov	r0, r2
 800eb26:	f7fe f8d6 	bl	800ccd6 <vListInsertEnd>
 800eb2a:	e004      	b.n	800eb36 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eb2c:	4b0a      	ldr	r3, [pc, #40]	; (800eb58 <xTaskPriorityInherit+0xf4>)
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb32:	68bb      	ldr	r3, [r7, #8]
 800eb34:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800eb36:	2301      	movs	r3, #1
 800eb38:	60fb      	str	r3, [r7, #12]
 800eb3a:	e008      	b.n	800eb4e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800eb3c:	68bb      	ldr	r3, [r7, #8]
 800eb3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eb40:	4b05      	ldr	r3, [pc, #20]	; (800eb58 <xTaskPriorityInherit+0xf4>)
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb46:	429a      	cmp	r2, r3
 800eb48:	d201      	bcs.n	800eb4e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eb4e:	68fb      	ldr	r3, [r7, #12]
	}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3710      	adds	r7, #16
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}
 800eb58:	20000e08 	.word	0x20000e08
 800eb5c:	20000e0c 	.word	0x20000e0c
 800eb60:	20000f10 	.word	0x20000f10

0800eb64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b086      	sub	sp, #24
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800eb70:	2300      	movs	r3, #0
 800eb72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d06c      	beq.n	800ec54 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800eb7a:	4b39      	ldr	r3, [pc, #228]	; (800ec60 <xTaskPriorityDisinherit+0xfc>)
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	693a      	ldr	r2, [r7, #16]
 800eb80:	429a      	cmp	r2, r3
 800eb82:	d009      	beq.n	800eb98 <xTaskPriorityDisinherit+0x34>
 800eb84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb88:	f383 8811 	msr	BASEPRI, r3
 800eb8c:	f3bf 8f6f 	isb	sy
 800eb90:	f3bf 8f4f 	dsb	sy
 800eb94:	60fb      	str	r3, [r7, #12]
 800eb96:	e7fe      	b.n	800eb96 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800eb98:	693b      	ldr	r3, [r7, #16]
 800eb9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d109      	bne.n	800ebb4 <xTaskPriorityDisinherit+0x50>
 800eba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eba4:	f383 8811 	msr	BASEPRI, r3
 800eba8:	f3bf 8f6f 	isb	sy
 800ebac:	f3bf 8f4f 	dsb	sy
 800ebb0:	60bb      	str	r3, [r7, #8]
 800ebb2:	e7fe      	b.n	800ebb2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800ebb4:	693b      	ldr	r3, [r7, #16]
 800ebb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebb8:	1e5a      	subs	r2, r3, #1
 800ebba:	693b      	ldr	r3, [r7, #16]
 800ebbc:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ebbe:	693b      	ldr	r3, [r7, #16]
 800ebc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebc2:	693b      	ldr	r3, [r7, #16]
 800ebc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	d044      	beq.n	800ec54 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ebca:	693b      	ldr	r3, [r7, #16]
 800ebcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d140      	bne.n	800ec54 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ebd2:	693b      	ldr	r3, [r7, #16]
 800ebd4:	3304      	adds	r3, #4
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f7fe f8da 	bl	800cd90 <uxListRemove>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d115      	bne.n	800ec0e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ebe2:	693b      	ldr	r3, [r7, #16]
 800ebe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebe6:	491f      	ldr	r1, [pc, #124]	; (800ec64 <xTaskPriorityDisinherit+0x100>)
 800ebe8:	4613      	mov	r3, r2
 800ebea:	009b      	lsls	r3, r3, #2
 800ebec:	4413      	add	r3, r2
 800ebee:	009b      	lsls	r3, r3, #2
 800ebf0:	440b      	add	r3, r1
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d10a      	bne.n	800ec0e <xTaskPriorityDisinherit+0xaa>
 800ebf8:	693b      	ldr	r3, [r7, #16]
 800ebfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebfc:	2201      	movs	r2, #1
 800ebfe:	fa02 f303 	lsl.w	r3, r2, r3
 800ec02:	43da      	mvns	r2, r3
 800ec04:	4b18      	ldr	r3, [pc, #96]	; (800ec68 <xTaskPriorityDisinherit+0x104>)
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	4013      	ands	r3, r2
 800ec0a:	4a17      	ldr	r2, [pc, #92]	; (800ec68 <xTaskPriorityDisinherit+0x104>)
 800ec0c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ec0e:	693b      	ldr	r3, [r7, #16]
 800ec10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ec12:	693b      	ldr	r3, [r7, #16]
 800ec14:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec16:	693b      	ldr	r3, [r7, #16]
 800ec18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec1a:	f1c3 0207 	rsb	r2, r3, #7
 800ec1e:	693b      	ldr	r3, [r7, #16]
 800ec20:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ec22:	693b      	ldr	r3, [r7, #16]
 800ec24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec26:	2201      	movs	r2, #1
 800ec28:	409a      	lsls	r2, r3
 800ec2a:	4b0f      	ldr	r3, [pc, #60]	; (800ec68 <xTaskPriorityDisinherit+0x104>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	4313      	orrs	r3, r2
 800ec30:	4a0d      	ldr	r2, [pc, #52]	; (800ec68 <xTaskPriorityDisinherit+0x104>)
 800ec32:	6013      	str	r3, [r2, #0]
 800ec34:	693b      	ldr	r3, [r7, #16]
 800ec36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec38:	4613      	mov	r3, r2
 800ec3a:	009b      	lsls	r3, r3, #2
 800ec3c:	4413      	add	r3, r2
 800ec3e:	009b      	lsls	r3, r3, #2
 800ec40:	4a08      	ldr	r2, [pc, #32]	; (800ec64 <xTaskPriorityDisinherit+0x100>)
 800ec42:	441a      	add	r2, r3
 800ec44:	693b      	ldr	r3, [r7, #16]
 800ec46:	3304      	adds	r3, #4
 800ec48:	4619      	mov	r1, r3
 800ec4a:	4610      	mov	r0, r2
 800ec4c:	f7fe f843 	bl	800ccd6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ec50:	2301      	movs	r3, #1
 800ec52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ec54:	697b      	ldr	r3, [r7, #20]
	}
 800ec56:	4618      	mov	r0, r3
 800ec58:	3718      	adds	r7, #24
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}
 800ec5e:	bf00      	nop
 800ec60:	20000e08 	.word	0x20000e08
 800ec64:	20000e0c 	.word	0x20000e0c
 800ec68:	20000f10 	.word	0x20000f10

0800ec6c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b088      	sub	sp, #32
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
 800ec74:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	f000 8081 	beq.w	800ed88 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ec86:	69bb      	ldr	r3, [r7, #24]
 800ec88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d109      	bne.n	800eca2 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800ec8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec92:	f383 8811 	msr	BASEPRI, r3
 800ec96:	f3bf 8f6f 	isb	sy
 800ec9a:	f3bf 8f4f 	dsb	sy
 800ec9e:	60fb      	str	r3, [r7, #12]
 800eca0:	e7fe      	b.n	800eca0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800eca2:	69bb      	ldr	r3, [r7, #24]
 800eca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eca6:	683a      	ldr	r2, [r7, #0]
 800eca8:	429a      	cmp	r2, r3
 800ecaa:	d902      	bls.n	800ecb2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	61fb      	str	r3, [r7, #28]
 800ecb0:	e002      	b.n	800ecb8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ecb2:	69bb      	ldr	r3, [r7, #24]
 800ecb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ecb6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ecb8:	69bb      	ldr	r3, [r7, #24]
 800ecba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecbc:	69fa      	ldr	r2, [r7, #28]
 800ecbe:	429a      	cmp	r2, r3
 800ecc0:	d062      	beq.n	800ed88 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ecc2:	69bb      	ldr	r3, [r7, #24]
 800ecc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecc6:	697a      	ldr	r2, [r7, #20]
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	d15d      	bne.n	800ed88 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800eccc:	4b30      	ldr	r3, [pc, #192]	; (800ed90 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	69ba      	ldr	r2, [r7, #24]
 800ecd2:	429a      	cmp	r2, r3
 800ecd4:	d109      	bne.n	800ecea <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800ecd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecda:	f383 8811 	msr	BASEPRI, r3
 800ecde:	f3bf 8f6f 	isb	sy
 800ece2:	f3bf 8f4f 	dsb	sy
 800ece6:	60bb      	str	r3, [r7, #8]
 800ece8:	e7fe      	b.n	800ece8 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ecea:	69bb      	ldr	r3, [r7, #24]
 800ecec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecee:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ecf0:	69bb      	ldr	r3, [r7, #24]
 800ecf2:	69fa      	ldr	r2, [r7, #28]
 800ecf4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ecf6:	69bb      	ldr	r3, [r7, #24]
 800ecf8:	699b      	ldr	r3, [r3, #24]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	db04      	blt.n	800ed08 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ecfe:	69fb      	ldr	r3, [r7, #28]
 800ed00:	f1c3 0207 	rsb	r2, r3, #7
 800ed04:	69bb      	ldr	r3, [r7, #24]
 800ed06:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ed08:	69bb      	ldr	r3, [r7, #24]
 800ed0a:	6959      	ldr	r1, [r3, #20]
 800ed0c:	693a      	ldr	r2, [r7, #16]
 800ed0e:	4613      	mov	r3, r2
 800ed10:	009b      	lsls	r3, r3, #2
 800ed12:	4413      	add	r3, r2
 800ed14:	009b      	lsls	r3, r3, #2
 800ed16:	4a1f      	ldr	r2, [pc, #124]	; (800ed94 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800ed18:	4413      	add	r3, r2
 800ed1a:	4299      	cmp	r1, r3
 800ed1c:	d134      	bne.n	800ed88 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed1e:	69bb      	ldr	r3, [r7, #24]
 800ed20:	3304      	adds	r3, #4
 800ed22:	4618      	mov	r0, r3
 800ed24:	f7fe f834 	bl	800cd90 <uxListRemove>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d115      	bne.n	800ed5a <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ed2e:	69bb      	ldr	r3, [r7, #24]
 800ed30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed32:	4918      	ldr	r1, [pc, #96]	; (800ed94 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800ed34:	4613      	mov	r3, r2
 800ed36:	009b      	lsls	r3, r3, #2
 800ed38:	4413      	add	r3, r2
 800ed3a:	009b      	lsls	r3, r3, #2
 800ed3c:	440b      	add	r3, r1
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d10a      	bne.n	800ed5a <vTaskPriorityDisinheritAfterTimeout+0xee>
 800ed44:	69bb      	ldr	r3, [r7, #24]
 800ed46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed48:	2201      	movs	r2, #1
 800ed4a:	fa02 f303 	lsl.w	r3, r2, r3
 800ed4e:	43da      	mvns	r2, r3
 800ed50:	4b11      	ldr	r3, [pc, #68]	; (800ed98 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	4013      	ands	r3, r2
 800ed56:	4a10      	ldr	r2, [pc, #64]	; (800ed98 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ed58:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ed5a:	69bb      	ldr	r3, [r7, #24]
 800ed5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed5e:	2201      	movs	r2, #1
 800ed60:	409a      	lsls	r2, r3
 800ed62:	4b0d      	ldr	r3, [pc, #52]	; (800ed98 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	4313      	orrs	r3, r2
 800ed68:	4a0b      	ldr	r2, [pc, #44]	; (800ed98 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ed6a:	6013      	str	r3, [r2, #0]
 800ed6c:	69bb      	ldr	r3, [r7, #24]
 800ed6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed70:	4613      	mov	r3, r2
 800ed72:	009b      	lsls	r3, r3, #2
 800ed74:	4413      	add	r3, r2
 800ed76:	009b      	lsls	r3, r3, #2
 800ed78:	4a06      	ldr	r2, [pc, #24]	; (800ed94 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800ed7a:	441a      	add	r2, r3
 800ed7c:	69bb      	ldr	r3, [r7, #24]
 800ed7e:	3304      	adds	r3, #4
 800ed80:	4619      	mov	r1, r3
 800ed82:	4610      	mov	r0, r2
 800ed84:	f7fd ffa7 	bl	800ccd6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ed88:	bf00      	nop
 800ed8a:	3720      	adds	r7, #32
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd80      	pop	{r7, pc}
 800ed90:	20000e08 	.word	0x20000e08
 800ed94:	20000e0c 	.word	0x20000e0c
 800ed98:	20000f10 	.word	0x20000f10

0800ed9c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ed9c:	b480      	push	{r7}
 800ed9e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800eda0:	4b07      	ldr	r3, [pc, #28]	; (800edc0 <pvTaskIncrementMutexHeldCount+0x24>)
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d004      	beq.n	800edb2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800eda8:	4b05      	ldr	r3, [pc, #20]	; (800edc0 <pvTaskIncrementMutexHeldCount+0x24>)
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800edae:	3201      	adds	r2, #1
 800edb0:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 800edb2:	4b03      	ldr	r3, [pc, #12]	; (800edc0 <pvTaskIncrementMutexHeldCount+0x24>)
 800edb4:	681b      	ldr	r3, [r3, #0]
	}
 800edb6:	4618      	mov	r0, r3
 800edb8:	46bd      	mov	sp, r7
 800edba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edbe:	4770      	bx	lr
 800edc0:	20000e08 	.word	0x20000e08

0800edc4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b084      	sub	sp, #16
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
 800edcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800edce:	4b29      	ldr	r3, [pc, #164]	; (800ee74 <prvAddCurrentTaskToDelayedList+0xb0>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800edd4:	4b28      	ldr	r3, [pc, #160]	; (800ee78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	3304      	adds	r3, #4
 800edda:	4618      	mov	r0, r3
 800eddc:	f7fd ffd8 	bl	800cd90 <uxListRemove>
 800ede0:	4603      	mov	r3, r0
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d10b      	bne.n	800edfe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ede6:	4b24      	ldr	r3, [pc, #144]	; (800ee78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edec:	2201      	movs	r2, #1
 800edee:	fa02 f303 	lsl.w	r3, r2, r3
 800edf2:	43da      	mvns	r2, r3
 800edf4:	4b21      	ldr	r3, [pc, #132]	; (800ee7c <prvAddCurrentTaskToDelayedList+0xb8>)
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	4013      	ands	r3, r2
 800edfa:	4a20      	ldr	r2, [pc, #128]	; (800ee7c <prvAddCurrentTaskToDelayedList+0xb8>)
 800edfc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee04:	d10a      	bne.n	800ee1c <prvAddCurrentTaskToDelayedList+0x58>
 800ee06:	683b      	ldr	r3, [r7, #0]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d007      	beq.n	800ee1c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee0c:	4b1a      	ldr	r3, [pc, #104]	; (800ee78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	3304      	adds	r3, #4
 800ee12:	4619      	mov	r1, r3
 800ee14:	481a      	ldr	r0, [pc, #104]	; (800ee80 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ee16:	f7fd ff5e 	bl	800ccd6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ee1a:	e026      	b.n	800ee6a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ee1c:	68fa      	ldr	r2, [r7, #12]
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	4413      	add	r3, r2
 800ee22:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ee24:	4b14      	ldr	r3, [pc, #80]	; (800ee78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	68ba      	ldr	r2, [r7, #8]
 800ee2a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ee2c:	68ba      	ldr	r2, [r7, #8]
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d209      	bcs.n	800ee48 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee34:	4b13      	ldr	r3, [pc, #76]	; (800ee84 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ee36:	681a      	ldr	r2, [r3, #0]
 800ee38:	4b0f      	ldr	r3, [pc, #60]	; (800ee78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	3304      	adds	r3, #4
 800ee3e:	4619      	mov	r1, r3
 800ee40:	4610      	mov	r0, r2
 800ee42:	f7fd ff6c 	bl	800cd1e <vListInsert>
}
 800ee46:	e010      	b.n	800ee6a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee48:	4b0f      	ldr	r3, [pc, #60]	; (800ee88 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ee4a:	681a      	ldr	r2, [r3, #0]
 800ee4c:	4b0a      	ldr	r3, [pc, #40]	; (800ee78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	3304      	adds	r3, #4
 800ee52:	4619      	mov	r1, r3
 800ee54:	4610      	mov	r0, r2
 800ee56:	f7fd ff62 	bl	800cd1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ee5a:	4b0c      	ldr	r3, [pc, #48]	; (800ee8c <prvAddCurrentTaskToDelayedList+0xc8>)
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	68ba      	ldr	r2, [r7, #8]
 800ee60:	429a      	cmp	r2, r3
 800ee62:	d202      	bcs.n	800ee6a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ee64:	4a09      	ldr	r2, [pc, #36]	; (800ee8c <prvAddCurrentTaskToDelayedList+0xc8>)
 800ee66:	68bb      	ldr	r3, [r7, #8]
 800ee68:	6013      	str	r3, [r2, #0]
}
 800ee6a:	bf00      	nop
 800ee6c:	3710      	adds	r7, #16
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd80      	pop	{r7, pc}
 800ee72:	bf00      	nop
 800ee74:	20000f0c 	.word	0x20000f0c
 800ee78:	20000e08 	.word	0x20000e08
 800ee7c:	20000f10 	.word	0x20000f10
 800ee80:	20000ef4 	.word	0x20000ef4
 800ee84:	20000ec4 	.word	0x20000ec4
 800ee88:	20000ec0 	.word	0x20000ec0
 800ee8c:	20000f28 	.word	0x20000f28

0800ee90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b08a      	sub	sp, #40	; 0x28
 800ee94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ee96:	2300      	movs	r3, #0
 800ee98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ee9a:	f000 fae7 	bl	800f46c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ee9e:	4b1c      	ldr	r3, [pc, #112]	; (800ef10 <xTimerCreateTimerTask+0x80>)
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d021      	beq.n	800eeea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800eea6:	2300      	movs	r3, #0
 800eea8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800eeaa:	2300      	movs	r3, #0
 800eeac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800eeae:	1d3a      	adds	r2, r7, #4
 800eeb0:	f107 0108 	add.w	r1, r7, #8
 800eeb4:	f107 030c 	add.w	r3, r7, #12
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f7f1 fd7b 	bl	80009b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800eebe:	6879      	ldr	r1, [r7, #4]
 800eec0:	68bb      	ldr	r3, [r7, #8]
 800eec2:	68fa      	ldr	r2, [r7, #12]
 800eec4:	9202      	str	r2, [sp, #8]
 800eec6:	9301      	str	r3, [sp, #4]
 800eec8:	2302      	movs	r3, #2
 800eeca:	9300      	str	r3, [sp, #0]
 800eecc:	2300      	movs	r3, #0
 800eece:	460a      	mov	r2, r1
 800eed0:	4910      	ldr	r1, [pc, #64]	; (800ef14 <xTimerCreateTimerTask+0x84>)
 800eed2:	4811      	ldr	r0, [pc, #68]	; (800ef18 <xTimerCreateTimerTask+0x88>)
 800eed4:	f7fe ff74 	bl	800ddc0 <xTaskCreateStatic>
 800eed8:	4602      	mov	r2, r0
 800eeda:	4b10      	ldr	r3, [pc, #64]	; (800ef1c <xTimerCreateTimerTask+0x8c>)
 800eedc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800eede:	4b0f      	ldr	r3, [pc, #60]	; (800ef1c <xTimerCreateTimerTask+0x8c>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d001      	beq.n	800eeea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800eee6:	2301      	movs	r3, #1
 800eee8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800eeea:	697b      	ldr	r3, [r7, #20]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d109      	bne.n	800ef04 <xTimerCreateTimerTask+0x74>
 800eef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eef4:	f383 8811 	msr	BASEPRI, r3
 800eef8:	f3bf 8f6f 	isb	sy
 800eefc:	f3bf 8f4f 	dsb	sy
 800ef00:	613b      	str	r3, [r7, #16]
 800ef02:	e7fe      	b.n	800ef02 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800ef04:	697b      	ldr	r3, [r7, #20]
}
 800ef06:	4618      	mov	r0, r3
 800ef08:	3718      	adds	r7, #24
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}
 800ef0e:	bf00      	nop
 800ef10:	20000f6c 	.word	0x20000f6c
 800ef14:	08011520 	.word	0x08011520
 800ef18:	0800f051 	.word	0x0800f051
 800ef1c:	20000f70 	.word	0x20000f70

0800ef20 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b08a      	sub	sp, #40	; 0x28
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	60f8      	str	r0, [r7, #12]
 800ef28:	60b9      	str	r1, [r7, #8]
 800ef2a:	607a      	str	r2, [r7, #4]
 800ef2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ef2e:	2300      	movs	r3, #0
 800ef30:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d109      	bne.n	800ef4c <xTimerGenericCommand+0x2c>
 800ef38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef3c:	f383 8811 	msr	BASEPRI, r3
 800ef40:	f3bf 8f6f 	isb	sy
 800ef44:	f3bf 8f4f 	dsb	sy
 800ef48:	623b      	str	r3, [r7, #32]
 800ef4a:	e7fe      	b.n	800ef4a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ef4c:	4b19      	ldr	r3, [pc, #100]	; (800efb4 <xTimerGenericCommand+0x94>)
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d02a      	beq.n	800efaa <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ef54:	68bb      	ldr	r3, [r7, #8]
 800ef56:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	2b05      	cmp	r3, #5
 800ef64:	dc18      	bgt.n	800ef98 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ef66:	f7ff fd5f 	bl	800ea28 <xTaskGetSchedulerState>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	2b02      	cmp	r3, #2
 800ef6e:	d109      	bne.n	800ef84 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ef70:	4b10      	ldr	r3, [pc, #64]	; (800efb4 <xTimerGenericCommand+0x94>)
 800ef72:	6818      	ldr	r0, [r3, #0]
 800ef74:	f107 0114 	add.w	r1, r7, #20
 800ef78:	2300      	movs	r3, #0
 800ef7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef7c:	f7fe f922 	bl	800d1c4 <xQueueGenericSend>
 800ef80:	6278      	str	r0, [r7, #36]	; 0x24
 800ef82:	e012      	b.n	800efaa <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ef84:	4b0b      	ldr	r3, [pc, #44]	; (800efb4 <xTimerGenericCommand+0x94>)
 800ef86:	6818      	ldr	r0, [r3, #0]
 800ef88:	f107 0114 	add.w	r1, r7, #20
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	2200      	movs	r2, #0
 800ef90:	f7fe f918 	bl	800d1c4 <xQueueGenericSend>
 800ef94:	6278      	str	r0, [r7, #36]	; 0x24
 800ef96:	e008      	b.n	800efaa <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ef98:	4b06      	ldr	r3, [pc, #24]	; (800efb4 <xTimerGenericCommand+0x94>)
 800ef9a:	6818      	ldr	r0, [r3, #0]
 800ef9c:	f107 0114 	add.w	r1, r7, #20
 800efa0:	2300      	movs	r3, #0
 800efa2:	683a      	ldr	r2, [r7, #0]
 800efa4:	f7fe fa08 	bl	800d3b8 <xQueueGenericSendFromISR>
 800efa8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800efaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800efac:	4618      	mov	r0, r3
 800efae:	3728      	adds	r7, #40	; 0x28
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}
 800efb4:	20000f6c 	.word	0x20000f6c

0800efb8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b088      	sub	sp, #32
 800efbc:	af02      	add	r7, sp, #8
 800efbe:	6078      	str	r0, [r7, #4]
 800efc0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800efc2:	4b22      	ldr	r3, [pc, #136]	; (800f04c <prvProcessExpiredTimer+0x94>)
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	68db      	ldr	r3, [r3, #12]
 800efc8:	68db      	ldr	r3, [r3, #12]
 800efca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800efcc:	697b      	ldr	r3, [r7, #20]
 800efce:	3304      	adds	r3, #4
 800efd0:	4618      	mov	r0, r3
 800efd2:	f7fd fedd 	bl	800cd90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800efd6:	697b      	ldr	r3, [r7, #20]
 800efd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800efdc:	f003 0304 	and.w	r3, r3, #4
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d021      	beq.n	800f028 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800efe4:	697b      	ldr	r3, [r7, #20]
 800efe6:	699a      	ldr	r2, [r3, #24]
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	18d1      	adds	r1, r2, r3
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	683a      	ldr	r2, [r7, #0]
 800eff0:	6978      	ldr	r0, [r7, #20]
 800eff2:	f000 f8d1 	bl	800f198 <prvInsertTimerInActiveList>
 800eff6:	4603      	mov	r3, r0
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d01e      	beq.n	800f03a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800effc:	2300      	movs	r3, #0
 800effe:	9300      	str	r3, [sp, #0]
 800f000:	2300      	movs	r3, #0
 800f002:	687a      	ldr	r2, [r7, #4]
 800f004:	2100      	movs	r1, #0
 800f006:	6978      	ldr	r0, [r7, #20]
 800f008:	f7ff ff8a 	bl	800ef20 <xTimerGenericCommand>
 800f00c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f00e:	693b      	ldr	r3, [r7, #16]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d112      	bne.n	800f03a <prvProcessExpiredTimer+0x82>
 800f014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f018:	f383 8811 	msr	BASEPRI, r3
 800f01c:	f3bf 8f6f 	isb	sy
 800f020:	f3bf 8f4f 	dsb	sy
 800f024:	60fb      	str	r3, [r7, #12]
 800f026:	e7fe      	b.n	800f026 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f028:	697b      	ldr	r3, [r7, #20]
 800f02a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f02e:	f023 0301 	bic.w	r3, r3, #1
 800f032:	b2da      	uxtb	r2, r3
 800f034:	697b      	ldr	r3, [r7, #20]
 800f036:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f03a:	697b      	ldr	r3, [r7, #20]
 800f03c:	6a1b      	ldr	r3, [r3, #32]
 800f03e:	6978      	ldr	r0, [r7, #20]
 800f040:	4798      	blx	r3
}
 800f042:	bf00      	nop
 800f044:	3718      	adds	r7, #24
 800f046:	46bd      	mov	sp, r7
 800f048:	bd80      	pop	{r7, pc}
 800f04a:	bf00      	nop
 800f04c:	20000f64 	.word	0x20000f64

0800f050 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b084      	sub	sp, #16
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f058:	f107 0308 	add.w	r3, r7, #8
 800f05c:	4618      	mov	r0, r3
 800f05e:	f000 f857 	bl	800f110 <prvGetNextExpireTime>
 800f062:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f064:	68bb      	ldr	r3, [r7, #8]
 800f066:	4619      	mov	r1, r3
 800f068:	68f8      	ldr	r0, [r7, #12]
 800f06a:	f000 f803 	bl	800f074 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f06e:	f000 f8d5 	bl	800f21c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f072:	e7f1      	b.n	800f058 <prvTimerTask+0x8>

0800f074 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b084      	sub	sp, #16
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
 800f07c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f07e:	f7ff f8dd 	bl	800e23c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f082:	f107 0308 	add.w	r3, r7, #8
 800f086:	4618      	mov	r0, r3
 800f088:	f000 f866 	bl	800f158 <prvSampleTimeNow>
 800f08c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f08e:	68bb      	ldr	r3, [r7, #8]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d130      	bne.n	800f0f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d10a      	bne.n	800f0b0 <prvProcessTimerOrBlockTask+0x3c>
 800f09a:	687a      	ldr	r2, [r7, #4]
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	429a      	cmp	r2, r3
 800f0a0:	d806      	bhi.n	800f0b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f0a2:	f7ff f8d9 	bl	800e258 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f0a6:	68f9      	ldr	r1, [r7, #12]
 800f0a8:	6878      	ldr	r0, [r7, #4]
 800f0aa:	f7ff ff85 	bl	800efb8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f0ae:	e024      	b.n	800f0fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d008      	beq.n	800f0c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f0b6:	4b13      	ldr	r3, [pc, #76]	; (800f104 <prvProcessTimerOrBlockTask+0x90>)
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d101      	bne.n	800f0c4 <prvProcessTimerOrBlockTask+0x50>
 800f0c0:	2301      	movs	r3, #1
 800f0c2:	e000      	b.n	800f0c6 <prvProcessTimerOrBlockTask+0x52>
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f0c8:	4b0f      	ldr	r3, [pc, #60]	; (800f108 <prvProcessTimerOrBlockTask+0x94>)
 800f0ca:	6818      	ldr	r0, [r3, #0]
 800f0cc:	687a      	ldr	r2, [r7, #4]
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	1ad3      	subs	r3, r2, r3
 800f0d2:	683a      	ldr	r2, [r7, #0]
 800f0d4:	4619      	mov	r1, r3
 800f0d6:	f7fe fe3f 	bl	800dd58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f0da:	f7ff f8bd 	bl	800e258 <xTaskResumeAll>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d10a      	bne.n	800f0fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f0e4:	4b09      	ldr	r3, [pc, #36]	; (800f10c <prvProcessTimerOrBlockTask+0x98>)
 800f0e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0ea:	601a      	str	r2, [r3, #0]
 800f0ec:	f3bf 8f4f 	dsb	sy
 800f0f0:	f3bf 8f6f 	isb	sy
}
 800f0f4:	e001      	b.n	800f0fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f0f6:	f7ff f8af 	bl	800e258 <xTaskResumeAll>
}
 800f0fa:	bf00      	nop
 800f0fc:	3710      	adds	r7, #16
 800f0fe:	46bd      	mov	sp, r7
 800f100:	bd80      	pop	{r7, pc}
 800f102:	bf00      	nop
 800f104:	20000f68 	.word	0x20000f68
 800f108:	20000f6c 	.word	0x20000f6c
 800f10c:	e000ed04 	.word	0xe000ed04

0800f110 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f110:	b480      	push	{r7}
 800f112:	b085      	sub	sp, #20
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f118:	4b0e      	ldr	r3, [pc, #56]	; (800f154 <prvGetNextExpireTime+0x44>)
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d101      	bne.n	800f126 <prvGetNextExpireTime+0x16>
 800f122:	2201      	movs	r2, #1
 800f124:	e000      	b.n	800f128 <prvGetNextExpireTime+0x18>
 800f126:	2200      	movs	r2, #0
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d105      	bne.n	800f140 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f134:	4b07      	ldr	r3, [pc, #28]	; (800f154 <prvGetNextExpireTime+0x44>)
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	68db      	ldr	r3, [r3, #12]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	60fb      	str	r3, [r7, #12]
 800f13e:	e001      	b.n	800f144 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f140:	2300      	movs	r3, #0
 800f142:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f144:	68fb      	ldr	r3, [r7, #12]
}
 800f146:	4618      	mov	r0, r3
 800f148:	3714      	adds	r7, #20
 800f14a:	46bd      	mov	sp, r7
 800f14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f150:	4770      	bx	lr
 800f152:	bf00      	nop
 800f154:	20000f64 	.word	0x20000f64

0800f158 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b084      	sub	sp, #16
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f160:	f7ff f916 	bl	800e390 <xTaskGetTickCount>
 800f164:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f166:	4b0b      	ldr	r3, [pc, #44]	; (800f194 <prvSampleTimeNow+0x3c>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	68fa      	ldr	r2, [r7, #12]
 800f16c:	429a      	cmp	r2, r3
 800f16e:	d205      	bcs.n	800f17c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f170:	f000 f918 	bl	800f3a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	2201      	movs	r2, #1
 800f178:	601a      	str	r2, [r3, #0]
 800f17a:	e002      	b.n	800f182 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2200      	movs	r2, #0
 800f180:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f182:	4a04      	ldr	r2, [pc, #16]	; (800f194 <prvSampleTimeNow+0x3c>)
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f188:	68fb      	ldr	r3, [r7, #12]
}
 800f18a:	4618      	mov	r0, r3
 800f18c:	3710      	adds	r7, #16
 800f18e:	46bd      	mov	sp, r7
 800f190:	bd80      	pop	{r7, pc}
 800f192:	bf00      	nop
 800f194:	20000f74 	.word	0x20000f74

0800f198 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b086      	sub	sp, #24
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	60f8      	str	r0, [r7, #12]
 800f1a0:	60b9      	str	r1, [r7, #8]
 800f1a2:	607a      	str	r2, [r7, #4]
 800f1a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	68ba      	ldr	r2, [r7, #8]
 800f1ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	68fa      	ldr	r2, [r7, #12]
 800f1b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f1b6:	68ba      	ldr	r2, [r7, #8]
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	429a      	cmp	r2, r3
 800f1bc:	d812      	bhi.n	800f1e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1be:	687a      	ldr	r2, [r7, #4]
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	1ad2      	subs	r2, r2, r3
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	699b      	ldr	r3, [r3, #24]
 800f1c8:	429a      	cmp	r2, r3
 800f1ca:	d302      	bcc.n	800f1d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f1cc:	2301      	movs	r3, #1
 800f1ce:	617b      	str	r3, [r7, #20]
 800f1d0:	e01b      	b.n	800f20a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f1d2:	4b10      	ldr	r3, [pc, #64]	; (800f214 <prvInsertTimerInActiveList+0x7c>)
 800f1d4:	681a      	ldr	r2, [r3, #0]
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	3304      	adds	r3, #4
 800f1da:	4619      	mov	r1, r3
 800f1dc:	4610      	mov	r0, r2
 800f1de:	f7fd fd9e 	bl	800cd1e <vListInsert>
 800f1e2:	e012      	b.n	800f20a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f1e4:	687a      	ldr	r2, [r7, #4]
 800f1e6:	683b      	ldr	r3, [r7, #0]
 800f1e8:	429a      	cmp	r2, r3
 800f1ea:	d206      	bcs.n	800f1fa <prvInsertTimerInActiveList+0x62>
 800f1ec:	68ba      	ldr	r2, [r7, #8]
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	429a      	cmp	r2, r3
 800f1f2:	d302      	bcc.n	800f1fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	617b      	str	r3, [r7, #20]
 800f1f8:	e007      	b.n	800f20a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f1fa:	4b07      	ldr	r3, [pc, #28]	; (800f218 <prvInsertTimerInActiveList+0x80>)
 800f1fc:	681a      	ldr	r2, [r3, #0]
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	3304      	adds	r3, #4
 800f202:	4619      	mov	r1, r3
 800f204:	4610      	mov	r0, r2
 800f206:	f7fd fd8a 	bl	800cd1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f20a:	697b      	ldr	r3, [r7, #20]
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	3718      	adds	r7, #24
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}
 800f214:	20000f68 	.word	0x20000f68
 800f218:	20000f64 	.word	0x20000f64

0800f21c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b08c      	sub	sp, #48	; 0x30
 800f220:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f222:	e0ac      	b.n	800f37e <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	2b00      	cmp	r3, #0
 800f228:	f2c0 80a8 	blt.w	800f37c <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f22c:	693b      	ldr	r3, [r7, #16]
 800f22e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f232:	695b      	ldr	r3, [r3, #20]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d004      	beq.n	800f242 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f23a:	3304      	adds	r3, #4
 800f23c:	4618      	mov	r0, r3
 800f23e:	f7fd fda7 	bl	800cd90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f242:	1d3b      	adds	r3, r7, #4
 800f244:	4618      	mov	r0, r3
 800f246:	f7ff ff87 	bl	800f158 <prvSampleTimeNow>
 800f24a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800f24c:	68bb      	ldr	r3, [r7, #8]
 800f24e:	2b09      	cmp	r3, #9
 800f250:	f200 8095 	bhi.w	800f37e <prvProcessReceivedCommands+0x162>
 800f254:	a201      	add	r2, pc, #4	; (adr r2, 800f25c <prvProcessReceivedCommands+0x40>)
 800f256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f25a:	bf00      	nop
 800f25c:	0800f285 	.word	0x0800f285
 800f260:	0800f285 	.word	0x0800f285
 800f264:	0800f285 	.word	0x0800f285
 800f268:	0800f2f7 	.word	0x0800f2f7
 800f26c:	0800f30b 	.word	0x0800f30b
 800f270:	0800f353 	.word	0x0800f353
 800f274:	0800f285 	.word	0x0800f285
 800f278:	0800f285 	.word	0x0800f285
 800f27c:	0800f2f7 	.word	0x0800f2f7
 800f280:	0800f30b 	.word	0x0800f30b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f286:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f28a:	f043 0301 	orr.w	r3, r3, #1
 800f28e:	b2da      	uxtb	r2, r3
 800f290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f292:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f296:	68fa      	ldr	r2, [r7, #12]
 800f298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f29a:	699b      	ldr	r3, [r3, #24]
 800f29c:	18d1      	adds	r1, r2, r3
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	6a3a      	ldr	r2, [r7, #32]
 800f2a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f2a4:	f7ff ff78 	bl	800f198 <prvInsertTimerInActiveList>
 800f2a8:	4603      	mov	r3, r0
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d067      	beq.n	800f37e <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2b0:	6a1b      	ldr	r3, [r3, #32]
 800f2b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f2b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f2bc:	f003 0304 	and.w	r3, r3, #4
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d05c      	beq.n	800f37e <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f2c4:	68fa      	ldr	r2, [r7, #12]
 800f2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2c8:	699b      	ldr	r3, [r3, #24]
 800f2ca:	441a      	add	r2, r3
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	9300      	str	r3, [sp, #0]
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	2100      	movs	r1, #0
 800f2d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f2d6:	f7ff fe23 	bl	800ef20 <xTimerGenericCommand>
 800f2da:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800f2dc:	69fb      	ldr	r3, [r7, #28]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d14d      	bne.n	800f37e <prvProcessReceivedCommands+0x162>
 800f2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2e6:	f383 8811 	msr	BASEPRI, r3
 800f2ea:	f3bf 8f6f 	isb	sy
 800f2ee:	f3bf 8f4f 	dsb	sy
 800f2f2:	61bb      	str	r3, [r7, #24]
 800f2f4:	e7fe      	b.n	800f2f4 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f2fc:	f023 0301 	bic.w	r3, r3, #1
 800f300:	b2da      	uxtb	r2, r3
 800f302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f304:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f308:	e039      	b.n	800f37e <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f30c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f310:	f043 0301 	orr.w	r3, r3, #1
 800f314:	b2da      	uxtb	r2, r3
 800f316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f318:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f31c:	68fa      	ldr	r2, [r7, #12]
 800f31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f320:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f324:	699b      	ldr	r3, [r3, #24]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d109      	bne.n	800f33e <prvProcessReceivedCommands+0x122>
 800f32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f32e:	f383 8811 	msr	BASEPRI, r3
 800f332:	f3bf 8f6f 	isb	sy
 800f336:	f3bf 8f4f 	dsb	sy
 800f33a:	617b      	str	r3, [r7, #20]
 800f33c:	e7fe      	b.n	800f33c <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f340:	699a      	ldr	r2, [r3, #24]
 800f342:	6a3b      	ldr	r3, [r7, #32]
 800f344:	18d1      	adds	r1, r2, r3
 800f346:	6a3b      	ldr	r3, [r7, #32]
 800f348:	6a3a      	ldr	r2, [r7, #32]
 800f34a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f34c:	f7ff ff24 	bl	800f198 <prvInsertTimerInActiveList>
					break;
 800f350:	e015      	b.n	800f37e <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f354:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f358:	f003 0302 	and.w	r3, r3, #2
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d103      	bne.n	800f368 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 800f360:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f362:	f000 fbcb 	bl	800fafc <vPortFree>
 800f366:	e00a      	b.n	800f37e <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f36a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f36e:	f023 0301 	bic.w	r3, r3, #1
 800f372:	b2da      	uxtb	r2, r3
 800f374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f376:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f37a:	e000      	b.n	800f37e <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f37c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f37e:	4b08      	ldr	r3, [pc, #32]	; (800f3a0 <prvProcessReceivedCommands+0x184>)
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	f107 0108 	add.w	r1, r7, #8
 800f386:	2200      	movs	r2, #0
 800f388:	4618      	mov	r0, r3
 800f38a:	f7fe f933 	bl	800d5f4 <xQueueReceive>
 800f38e:	4603      	mov	r3, r0
 800f390:	2b00      	cmp	r3, #0
 800f392:	f47f af47 	bne.w	800f224 <prvProcessReceivedCommands+0x8>
	}
}
 800f396:	bf00      	nop
 800f398:	3728      	adds	r7, #40	; 0x28
 800f39a:	46bd      	mov	sp, r7
 800f39c:	bd80      	pop	{r7, pc}
 800f39e:	bf00      	nop
 800f3a0:	20000f6c 	.word	0x20000f6c

0800f3a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b088      	sub	sp, #32
 800f3a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f3aa:	e047      	b.n	800f43c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f3ac:	4b2d      	ldr	r3, [pc, #180]	; (800f464 <prvSwitchTimerLists+0xc0>)
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	68db      	ldr	r3, [r3, #12]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3b6:	4b2b      	ldr	r3, [pc, #172]	; (800f464 <prvSwitchTimerLists+0xc0>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	68db      	ldr	r3, [r3, #12]
 800f3bc:	68db      	ldr	r3, [r3, #12]
 800f3be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	3304      	adds	r3, #4
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f7fd fce3 	bl	800cd90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	6a1b      	ldr	r3, [r3, #32]
 800f3ce:	68f8      	ldr	r0, [r7, #12]
 800f3d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f3d8:	f003 0304 	and.w	r3, r3, #4
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d02d      	beq.n	800f43c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	699b      	ldr	r3, [r3, #24]
 800f3e4:	693a      	ldr	r2, [r7, #16]
 800f3e6:	4413      	add	r3, r2
 800f3e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f3ea:	68ba      	ldr	r2, [r7, #8]
 800f3ec:	693b      	ldr	r3, [r7, #16]
 800f3ee:	429a      	cmp	r2, r3
 800f3f0:	d90e      	bls.n	800f410 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	68ba      	ldr	r2, [r7, #8]
 800f3f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	68fa      	ldr	r2, [r7, #12]
 800f3fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f3fe:	4b19      	ldr	r3, [pc, #100]	; (800f464 <prvSwitchTimerLists+0xc0>)
 800f400:	681a      	ldr	r2, [r3, #0]
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	3304      	adds	r3, #4
 800f406:	4619      	mov	r1, r3
 800f408:	4610      	mov	r0, r2
 800f40a:	f7fd fc88 	bl	800cd1e <vListInsert>
 800f40e:	e015      	b.n	800f43c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f410:	2300      	movs	r3, #0
 800f412:	9300      	str	r3, [sp, #0]
 800f414:	2300      	movs	r3, #0
 800f416:	693a      	ldr	r2, [r7, #16]
 800f418:	2100      	movs	r1, #0
 800f41a:	68f8      	ldr	r0, [r7, #12]
 800f41c:	f7ff fd80 	bl	800ef20 <xTimerGenericCommand>
 800f420:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d109      	bne.n	800f43c <prvSwitchTimerLists+0x98>
 800f428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f42c:	f383 8811 	msr	BASEPRI, r3
 800f430:	f3bf 8f6f 	isb	sy
 800f434:	f3bf 8f4f 	dsb	sy
 800f438:	603b      	str	r3, [r7, #0]
 800f43a:	e7fe      	b.n	800f43a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f43c:	4b09      	ldr	r3, [pc, #36]	; (800f464 <prvSwitchTimerLists+0xc0>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d1b2      	bne.n	800f3ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f446:	4b07      	ldr	r3, [pc, #28]	; (800f464 <prvSwitchTimerLists+0xc0>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f44c:	4b06      	ldr	r3, [pc, #24]	; (800f468 <prvSwitchTimerLists+0xc4>)
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	4a04      	ldr	r2, [pc, #16]	; (800f464 <prvSwitchTimerLists+0xc0>)
 800f452:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f454:	4a04      	ldr	r2, [pc, #16]	; (800f468 <prvSwitchTimerLists+0xc4>)
 800f456:	697b      	ldr	r3, [r7, #20]
 800f458:	6013      	str	r3, [r2, #0]
}
 800f45a:	bf00      	nop
 800f45c:	3718      	adds	r7, #24
 800f45e:	46bd      	mov	sp, r7
 800f460:	bd80      	pop	{r7, pc}
 800f462:	bf00      	nop
 800f464:	20000f64 	.word	0x20000f64
 800f468:	20000f68 	.word	0x20000f68

0800f46c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b082      	sub	sp, #8
 800f470:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f472:	f000 f963 	bl	800f73c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f476:	4b15      	ldr	r3, [pc, #84]	; (800f4cc <prvCheckForValidListAndQueue+0x60>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d120      	bne.n	800f4c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f47e:	4814      	ldr	r0, [pc, #80]	; (800f4d0 <prvCheckForValidListAndQueue+0x64>)
 800f480:	f7fd fbfc 	bl	800cc7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f484:	4813      	ldr	r0, [pc, #76]	; (800f4d4 <prvCheckForValidListAndQueue+0x68>)
 800f486:	f7fd fbf9 	bl	800cc7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f48a:	4b13      	ldr	r3, [pc, #76]	; (800f4d8 <prvCheckForValidListAndQueue+0x6c>)
 800f48c:	4a10      	ldr	r2, [pc, #64]	; (800f4d0 <prvCheckForValidListAndQueue+0x64>)
 800f48e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f490:	4b12      	ldr	r3, [pc, #72]	; (800f4dc <prvCheckForValidListAndQueue+0x70>)
 800f492:	4a10      	ldr	r2, [pc, #64]	; (800f4d4 <prvCheckForValidListAndQueue+0x68>)
 800f494:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f496:	2300      	movs	r3, #0
 800f498:	9300      	str	r3, [sp, #0]
 800f49a:	4b11      	ldr	r3, [pc, #68]	; (800f4e0 <prvCheckForValidListAndQueue+0x74>)
 800f49c:	4a11      	ldr	r2, [pc, #68]	; (800f4e4 <prvCheckForValidListAndQueue+0x78>)
 800f49e:	210c      	movs	r1, #12
 800f4a0:	200a      	movs	r0, #10
 800f4a2:	f7fd fd07 	bl	800ceb4 <xQueueGenericCreateStatic>
 800f4a6:	4602      	mov	r2, r0
 800f4a8:	4b08      	ldr	r3, [pc, #32]	; (800f4cc <prvCheckForValidListAndQueue+0x60>)
 800f4aa:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f4ac:	4b07      	ldr	r3, [pc, #28]	; (800f4cc <prvCheckForValidListAndQueue+0x60>)
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d005      	beq.n	800f4c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f4b4:	4b05      	ldr	r3, [pc, #20]	; (800f4cc <prvCheckForValidListAndQueue+0x60>)
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	490b      	ldr	r1, [pc, #44]	; (800f4e8 <prvCheckForValidListAndQueue+0x7c>)
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f7fe fc24 	bl	800dd08 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f4c0:	f000 f96a 	bl	800f798 <vPortExitCritical>
}
 800f4c4:	bf00      	nop
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	bd80      	pop	{r7, pc}
 800f4ca:	bf00      	nop
 800f4cc:	20000f6c 	.word	0x20000f6c
 800f4d0:	20000f3c 	.word	0x20000f3c
 800f4d4:	20000f50 	.word	0x20000f50
 800f4d8:	20000f64 	.word	0x20000f64
 800f4dc:	20000f68 	.word	0x20000f68
 800f4e0:	20000ff0 	.word	0x20000ff0
 800f4e4:	20000f78 	.word	0x20000f78
 800f4e8:	08011528 	.word	0x08011528

0800f4ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f4ec:	b480      	push	{r7}
 800f4ee:	b085      	sub	sp, #20
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	60f8      	str	r0, [r7, #12]
 800f4f4:	60b9      	str	r1, [r7, #8]
 800f4f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	3b04      	subs	r3, #4
 800f4fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f504:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	3b04      	subs	r3, #4
 800f50a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f50c:	68bb      	ldr	r3, [r7, #8]
 800f50e:	f023 0201 	bic.w	r2, r3, #1
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	3b04      	subs	r3, #4
 800f51a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f51c:	4a0c      	ldr	r2, [pc, #48]	; (800f550 <pxPortInitialiseStack+0x64>)
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	3b14      	subs	r3, #20
 800f526:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f528:	687a      	ldr	r2, [r7, #4]
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	3b04      	subs	r3, #4
 800f532:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	f06f 0202 	mvn.w	r2, #2
 800f53a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	3b20      	subs	r3, #32
 800f540:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f542:	68fb      	ldr	r3, [r7, #12]
}
 800f544:	4618      	mov	r0, r3
 800f546:	3714      	adds	r7, #20
 800f548:	46bd      	mov	sp, r7
 800f54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54e:	4770      	bx	lr
 800f550:	0800f555 	.word	0x0800f555

0800f554 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f554:	b480      	push	{r7}
 800f556:	b085      	sub	sp, #20
 800f558:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f55a:	2300      	movs	r3, #0
 800f55c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f55e:	4b11      	ldr	r3, [pc, #68]	; (800f5a4 <prvTaskExitError+0x50>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f566:	d009      	beq.n	800f57c <prvTaskExitError+0x28>
 800f568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f56c:	f383 8811 	msr	BASEPRI, r3
 800f570:	f3bf 8f6f 	isb	sy
 800f574:	f3bf 8f4f 	dsb	sy
 800f578:	60fb      	str	r3, [r7, #12]
 800f57a:	e7fe      	b.n	800f57a <prvTaskExitError+0x26>
 800f57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f580:	f383 8811 	msr	BASEPRI, r3
 800f584:	f3bf 8f6f 	isb	sy
 800f588:	f3bf 8f4f 	dsb	sy
 800f58c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f58e:	bf00      	nop
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d0fc      	beq.n	800f590 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f596:	bf00      	nop
 800f598:	3714      	adds	r7, #20
 800f59a:	46bd      	mov	sp, r7
 800f59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a0:	4770      	bx	lr
 800f5a2:	bf00      	nop
 800f5a4:	20000650 	.word	0x20000650
	...

0800f5b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f5b0:	4b07      	ldr	r3, [pc, #28]	; (800f5d0 <pxCurrentTCBConst2>)
 800f5b2:	6819      	ldr	r1, [r3, #0]
 800f5b4:	6808      	ldr	r0, [r1, #0]
 800f5b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5ba:	f380 8809 	msr	PSP, r0
 800f5be:	f3bf 8f6f 	isb	sy
 800f5c2:	f04f 0000 	mov.w	r0, #0
 800f5c6:	f380 8811 	msr	BASEPRI, r0
 800f5ca:	4770      	bx	lr
 800f5cc:	f3af 8000 	nop.w

0800f5d0 <pxCurrentTCBConst2>:
 800f5d0:	20000e08 	.word	0x20000e08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f5d4:	bf00      	nop
 800f5d6:	bf00      	nop

0800f5d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f5d8:	4808      	ldr	r0, [pc, #32]	; (800f5fc <prvPortStartFirstTask+0x24>)
 800f5da:	6800      	ldr	r0, [r0, #0]
 800f5dc:	6800      	ldr	r0, [r0, #0]
 800f5de:	f380 8808 	msr	MSP, r0
 800f5e2:	f04f 0000 	mov.w	r0, #0
 800f5e6:	f380 8814 	msr	CONTROL, r0
 800f5ea:	b662      	cpsie	i
 800f5ec:	b661      	cpsie	f
 800f5ee:	f3bf 8f4f 	dsb	sy
 800f5f2:	f3bf 8f6f 	isb	sy
 800f5f6:	df00      	svc	0
 800f5f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f5fa:	bf00      	nop
 800f5fc:	e000ed08 	.word	0xe000ed08

0800f600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b086      	sub	sp, #24
 800f604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f606:	4b44      	ldr	r3, [pc, #272]	; (800f718 <xPortStartScheduler+0x118>)
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	4a44      	ldr	r2, [pc, #272]	; (800f71c <xPortStartScheduler+0x11c>)
 800f60c:	4293      	cmp	r3, r2
 800f60e:	d109      	bne.n	800f624 <xPortStartScheduler+0x24>
 800f610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f614:	f383 8811 	msr	BASEPRI, r3
 800f618:	f3bf 8f6f 	isb	sy
 800f61c:	f3bf 8f4f 	dsb	sy
 800f620:	613b      	str	r3, [r7, #16]
 800f622:	e7fe      	b.n	800f622 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f624:	4b3c      	ldr	r3, [pc, #240]	; (800f718 <xPortStartScheduler+0x118>)
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	4a3d      	ldr	r2, [pc, #244]	; (800f720 <xPortStartScheduler+0x120>)
 800f62a:	4293      	cmp	r3, r2
 800f62c:	d109      	bne.n	800f642 <xPortStartScheduler+0x42>
 800f62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f632:	f383 8811 	msr	BASEPRI, r3
 800f636:	f3bf 8f6f 	isb	sy
 800f63a:	f3bf 8f4f 	dsb	sy
 800f63e:	60fb      	str	r3, [r7, #12]
 800f640:	e7fe      	b.n	800f640 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f642:	4b38      	ldr	r3, [pc, #224]	; (800f724 <xPortStartScheduler+0x124>)
 800f644:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f646:	697b      	ldr	r3, [r7, #20]
 800f648:	781b      	ldrb	r3, [r3, #0]
 800f64a:	b2db      	uxtb	r3, r3
 800f64c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f64e:	697b      	ldr	r3, [r7, #20]
 800f650:	22ff      	movs	r2, #255	; 0xff
 800f652:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f654:	697b      	ldr	r3, [r7, #20]
 800f656:	781b      	ldrb	r3, [r3, #0]
 800f658:	b2db      	uxtb	r3, r3
 800f65a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f65c:	78fb      	ldrb	r3, [r7, #3]
 800f65e:	b2db      	uxtb	r3, r3
 800f660:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f664:	b2da      	uxtb	r2, r3
 800f666:	4b30      	ldr	r3, [pc, #192]	; (800f728 <xPortStartScheduler+0x128>)
 800f668:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f66a:	4b30      	ldr	r3, [pc, #192]	; (800f72c <xPortStartScheduler+0x12c>)
 800f66c:	2207      	movs	r2, #7
 800f66e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f670:	e009      	b.n	800f686 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800f672:	4b2e      	ldr	r3, [pc, #184]	; (800f72c <xPortStartScheduler+0x12c>)
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	3b01      	subs	r3, #1
 800f678:	4a2c      	ldr	r2, [pc, #176]	; (800f72c <xPortStartScheduler+0x12c>)
 800f67a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f67c:	78fb      	ldrb	r3, [r7, #3]
 800f67e:	b2db      	uxtb	r3, r3
 800f680:	005b      	lsls	r3, r3, #1
 800f682:	b2db      	uxtb	r3, r3
 800f684:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f686:	78fb      	ldrb	r3, [r7, #3]
 800f688:	b2db      	uxtb	r3, r3
 800f68a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f68e:	2b80      	cmp	r3, #128	; 0x80
 800f690:	d0ef      	beq.n	800f672 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f692:	4b26      	ldr	r3, [pc, #152]	; (800f72c <xPortStartScheduler+0x12c>)
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	f1c3 0307 	rsb	r3, r3, #7
 800f69a:	2b04      	cmp	r3, #4
 800f69c:	d009      	beq.n	800f6b2 <xPortStartScheduler+0xb2>
 800f69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6a2:	f383 8811 	msr	BASEPRI, r3
 800f6a6:	f3bf 8f6f 	isb	sy
 800f6aa:	f3bf 8f4f 	dsb	sy
 800f6ae:	60bb      	str	r3, [r7, #8]
 800f6b0:	e7fe      	b.n	800f6b0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f6b2:	4b1e      	ldr	r3, [pc, #120]	; (800f72c <xPortStartScheduler+0x12c>)
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	021b      	lsls	r3, r3, #8
 800f6b8:	4a1c      	ldr	r2, [pc, #112]	; (800f72c <xPortStartScheduler+0x12c>)
 800f6ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f6bc:	4b1b      	ldr	r3, [pc, #108]	; (800f72c <xPortStartScheduler+0x12c>)
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f6c4:	4a19      	ldr	r2, [pc, #100]	; (800f72c <xPortStartScheduler+0x12c>)
 800f6c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	b2da      	uxtb	r2, r3
 800f6cc:	697b      	ldr	r3, [r7, #20]
 800f6ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f6d0:	4b17      	ldr	r3, [pc, #92]	; (800f730 <xPortStartScheduler+0x130>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	4a16      	ldr	r2, [pc, #88]	; (800f730 <xPortStartScheduler+0x130>)
 800f6d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f6da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f6dc:	4b14      	ldr	r3, [pc, #80]	; (800f730 <xPortStartScheduler+0x130>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	4a13      	ldr	r2, [pc, #76]	; (800f730 <xPortStartScheduler+0x130>)
 800f6e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f6e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f6e8:	f000 f8d6 	bl	800f898 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f6ec:	4b11      	ldr	r3, [pc, #68]	; (800f734 <xPortStartScheduler+0x134>)
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f6f2:	f000 f8f5 	bl	800f8e0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f6f6:	4b10      	ldr	r3, [pc, #64]	; (800f738 <xPortStartScheduler+0x138>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	4a0f      	ldr	r2, [pc, #60]	; (800f738 <xPortStartScheduler+0x138>)
 800f6fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f700:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f702:	f7ff ff69 	bl	800f5d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f706:	f7fe ff13 	bl	800e530 <vTaskSwitchContext>
	prvTaskExitError();
 800f70a:	f7ff ff23 	bl	800f554 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f70e:	2300      	movs	r3, #0
}
 800f710:	4618      	mov	r0, r3
 800f712:	3718      	adds	r7, #24
 800f714:	46bd      	mov	sp, r7
 800f716:	bd80      	pop	{r7, pc}
 800f718:	e000ed00 	.word	0xe000ed00
 800f71c:	410fc271 	.word	0x410fc271
 800f720:	410fc270 	.word	0x410fc270
 800f724:	e000e400 	.word	0xe000e400
 800f728:	20001040 	.word	0x20001040
 800f72c:	20001044 	.word	0x20001044
 800f730:	e000ed20 	.word	0xe000ed20
 800f734:	20000650 	.word	0x20000650
 800f738:	e000ef34 	.word	0xe000ef34

0800f73c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f73c:	b480      	push	{r7}
 800f73e:	b083      	sub	sp, #12
 800f740:	af00      	add	r7, sp, #0
 800f742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f746:	f383 8811 	msr	BASEPRI, r3
 800f74a:	f3bf 8f6f 	isb	sy
 800f74e:	f3bf 8f4f 	dsb	sy
 800f752:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f754:	4b0e      	ldr	r3, [pc, #56]	; (800f790 <vPortEnterCritical+0x54>)
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	3301      	adds	r3, #1
 800f75a:	4a0d      	ldr	r2, [pc, #52]	; (800f790 <vPortEnterCritical+0x54>)
 800f75c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f75e:	4b0c      	ldr	r3, [pc, #48]	; (800f790 <vPortEnterCritical+0x54>)
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	2b01      	cmp	r3, #1
 800f764:	d10e      	bne.n	800f784 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f766:	4b0b      	ldr	r3, [pc, #44]	; (800f794 <vPortEnterCritical+0x58>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	b2db      	uxtb	r3, r3
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d009      	beq.n	800f784 <vPortEnterCritical+0x48>
 800f770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f774:	f383 8811 	msr	BASEPRI, r3
 800f778:	f3bf 8f6f 	isb	sy
 800f77c:	f3bf 8f4f 	dsb	sy
 800f780:	603b      	str	r3, [r7, #0]
 800f782:	e7fe      	b.n	800f782 <vPortEnterCritical+0x46>
	}
}
 800f784:	bf00      	nop
 800f786:	370c      	adds	r7, #12
 800f788:	46bd      	mov	sp, r7
 800f78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78e:	4770      	bx	lr
 800f790:	20000650 	.word	0x20000650
 800f794:	e000ed04 	.word	0xe000ed04

0800f798 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f798:	b480      	push	{r7}
 800f79a:	b083      	sub	sp, #12
 800f79c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f79e:	4b11      	ldr	r3, [pc, #68]	; (800f7e4 <vPortExitCritical+0x4c>)
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d109      	bne.n	800f7ba <vPortExitCritical+0x22>
 800f7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7aa:	f383 8811 	msr	BASEPRI, r3
 800f7ae:	f3bf 8f6f 	isb	sy
 800f7b2:	f3bf 8f4f 	dsb	sy
 800f7b6:	607b      	str	r3, [r7, #4]
 800f7b8:	e7fe      	b.n	800f7b8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800f7ba:	4b0a      	ldr	r3, [pc, #40]	; (800f7e4 <vPortExitCritical+0x4c>)
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	3b01      	subs	r3, #1
 800f7c0:	4a08      	ldr	r2, [pc, #32]	; (800f7e4 <vPortExitCritical+0x4c>)
 800f7c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f7c4:	4b07      	ldr	r3, [pc, #28]	; (800f7e4 <vPortExitCritical+0x4c>)
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d104      	bne.n	800f7d6 <vPortExitCritical+0x3e>
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800f7d6:	bf00      	nop
 800f7d8:	370c      	adds	r7, #12
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e0:	4770      	bx	lr
 800f7e2:	bf00      	nop
 800f7e4:	20000650 	.word	0x20000650
	...

0800f7f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f7f0:	f3ef 8009 	mrs	r0, PSP
 800f7f4:	f3bf 8f6f 	isb	sy
 800f7f8:	4b15      	ldr	r3, [pc, #84]	; (800f850 <pxCurrentTCBConst>)
 800f7fa:	681a      	ldr	r2, [r3, #0]
 800f7fc:	f01e 0f10 	tst.w	lr, #16
 800f800:	bf08      	it	eq
 800f802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f80a:	6010      	str	r0, [r2, #0]
 800f80c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f810:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f814:	f380 8811 	msr	BASEPRI, r0
 800f818:	f3bf 8f4f 	dsb	sy
 800f81c:	f3bf 8f6f 	isb	sy
 800f820:	f7fe fe86 	bl	800e530 <vTaskSwitchContext>
 800f824:	f04f 0000 	mov.w	r0, #0
 800f828:	f380 8811 	msr	BASEPRI, r0
 800f82c:	bc09      	pop	{r0, r3}
 800f82e:	6819      	ldr	r1, [r3, #0]
 800f830:	6808      	ldr	r0, [r1, #0]
 800f832:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f836:	f01e 0f10 	tst.w	lr, #16
 800f83a:	bf08      	it	eq
 800f83c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f840:	f380 8809 	msr	PSP, r0
 800f844:	f3bf 8f6f 	isb	sy
 800f848:	4770      	bx	lr
 800f84a:	bf00      	nop
 800f84c:	f3af 8000 	nop.w

0800f850 <pxCurrentTCBConst>:
 800f850:	20000e08 	.word	0x20000e08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f854:	bf00      	nop
 800f856:	bf00      	nop

0800f858 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	b082      	sub	sp, #8
 800f85c:	af00      	add	r7, sp, #0
	__asm volatile
 800f85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f862:	f383 8811 	msr	BASEPRI, r3
 800f866:	f3bf 8f6f 	isb	sy
 800f86a:	f3bf 8f4f 	dsb	sy
 800f86e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f870:	f7fe fd9e 	bl	800e3b0 <xTaskIncrementTick>
 800f874:	4603      	mov	r3, r0
 800f876:	2b00      	cmp	r3, #0
 800f878:	d003      	beq.n	800f882 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f87a:	4b06      	ldr	r3, [pc, #24]	; (800f894 <xPortSysTickHandler+0x3c>)
 800f87c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f880:	601a      	str	r2, [r3, #0]
 800f882:	2300      	movs	r3, #0
 800f884:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f886:	683b      	ldr	r3, [r7, #0]
 800f888:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800f88c:	bf00      	nop
 800f88e:	3708      	adds	r7, #8
 800f890:	46bd      	mov	sp, r7
 800f892:	bd80      	pop	{r7, pc}
 800f894:	e000ed04 	.word	0xe000ed04

0800f898 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f898:	b480      	push	{r7}
 800f89a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f89c:	4b0b      	ldr	r3, [pc, #44]	; (800f8cc <vPortSetupTimerInterrupt+0x34>)
 800f89e:	2200      	movs	r2, #0
 800f8a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f8a2:	4b0b      	ldr	r3, [pc, #44]	; (800f8d0 <vPortSetupTimerInterrupt+0x38>)
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f8a8:	4b0a      	ldr	r3, [pc, #40]	; (800f8d4 <vPortSetupTimerInterrupt+0x3c>)
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	4a0a      	ldr	r2, [pc, #40]	; (800f8d8 <vPortSetupTimerInterrupt+0x40>)
 800f8ae:	fba2 2303 	umull	r2, r3, r2, r3
 800f8b2:	099b      	lsrs	r3, r3, #6
 800f8b4:	4a09      	ldr	r2, [pc, #36]	; (800f8dc <vPortSetupTimerInterrupt+0x44>)
 800f8b6:	3b01      	subs	r3, #1
 800f8b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f8ba:	4b04      	ldr	r3, [pc, #16]	; (800f8cc <vPortSetupTimerInterrupt+0x34>)
 800f8bc:	2207      	movs	r2, #7
 800f8be:	601a      	str	r2, [r3, #0]
}
 800f8c0:	bf00      	nop
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c8:	4770      	bx	lr
 800f8ca:	bf00      	nop
 800f8cc:	e000e010 	.word	0xe000e010
 800f8d0:	e000e018 	.word	0xe000e018
 800f8d4:	200001c8 	.word	0x200001c8
 800f8d8:	10624dd3 	.word	0x10624dd3
 800f8dc:	e000e014 	.word	0xe000e014

0800f8e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f8e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f8f0 <vPortEnableVFP+0x10>
 800f8e4:	6801      	ldr	r1, [r0, #0]
 800f8e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f8ea:	6001      	str	r1, [r0, #0]
 800f8ec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f8ee:	bf00      	nop
 800f8f0:	e000ed88 	.word	0xe000ed88

0800f8f4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f8f4:	b480      	push	{r7}
 800f8f6:	b085      	sub	sp, #20
 800f8f8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f8fa:	f3ef 8305 	mrs	r3, IPSR
 800f8fe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	2b0f      	cmp	r3, #15
 800f904:	d913      	bls.n	800f92e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f906:	4a16      	ldr	r2, [pc, #88]	; (800f960 <vPortValidateInterruptPriority+0x6c>)
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	4413      	add	r3, r2
 800f90c:	781b      	ldrb	r3, [r3, #0]
 800f90e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f910:	4b14      	ldr	r3, [pc, #80]	; (800f964 <vPortValidateInterruptPriority+0x70>)
 800f912:	781b      	ldrb	r3, [r3, #0]
 800f914:	7afa      	ldrb	r2, [r7, #11]
 800f916:	429a      	cmp	r2, r3
 800f918:	d209      	bcs.n	800f92e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800f91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f91e:	f383 8811 	msr	BASEPRI, r3
 800f922:	f3bf 8f6f 	isb	sy
 800f926:	f3bf 8f4f 	dsb	sy
 800f92a:	607b      	str	r3, [r7, #4]
 800f92c:	e7fe      	b.n	800f92c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f92e:	4b0e      	ldr	r3, [pc, #56]	; (800f968 <vPortValidateInterruptPriority+0x74>)
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f936:	4b0d      	ldr	r3, [pc, #52]	; (800f96c <vPortValidateInterruptPriority+0x78>)
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	429a      	cmp	r2, r3
 800f93c:	d909      	bls.n	800f952 <vPortValidateInterruptPriority+0x5e>
 800f93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f942:	f383 8811 	msr	BASEPRI, r3
 800f946:	f3bf 8f6f 	isb	sy
 800f94a:	f3bf 8f4f 	dsb	sy
 800f94e:	603b      	str	r3, [r7, #0]
 800f950:	e7fe      	b.n	800f950 <vPortValidateInterruptPriority+0x5c>
	}
 800f952:	bf00      	nop
 800f954:	3714      	adds	r7, #20
 800f956:	46bd      	mov	sp, r7
 800f958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95c:	4770      	bx	lr
 800f95e:	bf00      	nop
 800f960:	e000e3f0 	.word	0xe000e3f0
 800f964:	20001040 	.word	0x20001040
 800f968:	e000ed0c 	.word	0xe000ed0c
 800f96c:	20001044 	.word	0x20001044

0800f970 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b08a      	sub	sp, #40	; 0x28
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f978:	2300      	movs	r3, #0
 800f97a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f97c:	f7fe fc5e 	bl	800e23c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f980:	4b59      	ldr	r3, [pc, #356]	; (800fae8 <pvPortMalloc+0x178>)
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d101      	bne.n	800f98c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f988:	f000 f910 	bl	800fbac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f98c:	4b57      	ldr	r3, [pc, #348]	; (800faec <pvPortMalloc+0x17c>)
 800f98e:	681a      	ldr	r2, [r3, #0]
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	4013      	ands	r3, r2
 800f994:	2b00      	cmp	r3, #0
 800f996:	f040 808c 	bne.w	800fab2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d01c      	beq.n	800f9da <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800f9a0:	2208      	movs	r2, #8
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	4413      	add	r3, r2
 800f9a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	f003 0307 	and.w	r3, r3, #7
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d013      	beq.n	800f9da <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	f023 0307 	bic.w	r3, r3, #7
 800f9b8:	3308      	adds	r3, #8
 800f9ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	f003 0307 	and.w	r3, r3, #7
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d009      	beq.n	800f9da <pvPortMalloc+0x6a>
 800f9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9ca:	f383 8811 	msr	BASEPRI, r3
 800f9ce:	f3bf 8f6f 	isb	sy
 800f9d2:	f3bf 8f4f 	dsb	sy
 800f9d6:	617b      	str	r3, [r7, #20]
 800f9d8:	e7fe      	b.n	800f9d8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d068      	beq.n	800fab2 <pvPortMalloc+0x142>
 800f9e0:	4b43      	ldr	r3, [pc, #268]	; (800faf0 <pvPortMalloc+0x180>)
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	687a      	ldr	r2, [r7, #4]
 800f9e6:	429a      	cmp	r2, r3
 800f9e8:	d863      	bhi.n	800fab2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f9ea:	4b42      	ldr	r3, [pc, #264]	; (800faf4 <pvPortMalloc+0x184>)
 800f9ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f9ee:	4b41      	ldr	r3, [pc, #260]	; (800faf4 <pvPortMalloc+0x184>)
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f9f4:	e004      	b.n	800fa00 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800f9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fa00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa02:	685b      	ldr	r3, [r3, #4]
 800fa04:	687a      	ldr	r2, [r7, #4]
 800fa06:	429a      	cmp	r2, r3
 800fa08:	d903      	bls.n	800fa12 <pvPortMalloc+0xa2>
 800fa0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d1f1      	bne.n	800f9f6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fa12:	4b35      	ldr	r3, [pc, #212]	; (800fae8 <pvPortMalloc+0x178>)
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa18:	429a      	cmp	r2, r3
 800fa1a:	d04a      	beq.n	800fab2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fa1c:	6a3b      	ldr	r3, [r7, #32]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	2208      	movs	r2, #8
 800fa22:	4413      	add	r3, r2
 800fa24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fa26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa28:	681a      	ldr	r2, [r3, #0]
 800fa2a:	6a3b      	ldr	r3, [r7, #32]
 800fa2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fa2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa30:	685a      	ldr	r2, [r3, #4]
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	1ad2      	subs	r2, r2, r3
 800fa36:	2308      	movs	r3, #8
 800fa38:	005b      	lsls	r3, r3, #1
 800fa3a:	429a      	cmp	r2, r3
 800fa3c:	d91e      	bls.n	800fa7c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fa3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	4413      	add	r3, r2
 800fa44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fa46:	69bb      	ldr	r3, [r7, #24]
 800fa48:	f003 0307 	and.w	r3, r3, #7
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d009      	beq.n	800fa64 <pvPortMalloc+0xf4>
 800fa50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa54:	f383 8811 	msr	BASEPRI, r3
 800fa58:	f3bf 8f6f 	isb	sy
 800fa5c:	f3bf 8f4f 	dsb	sy
 800fa60:	613b      	str	r3, [r7, #16]
 800fa62:	e7fe      	b.n	800fa62 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fa64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa66:	685a      	ldr	r2, [r3, #4]
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	1ad2      	subs	r2, r2, r3
 800fa6c:	69bb      	ldr	r3, [r7, #24]
 800fa6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fa70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa72:	687a      	ldr	r2, [r7, #4]
 800fa74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fa76:	69b8      	ldr	r0, [r7, #24]
 800fa78:	f000 f8fa 	bl	800fc70 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fa7c:	4b1c      	ldr	r3, [pc, #112]	; (800faf0 <pvPortMalloc+0x180>)
 800fa7e:	681a      	ldr	r2, [r3, #0]
 800fa80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa82:	685b      	ldr	r3, [r3, #4]
 800fa84:	1ad3      	subs	r3, r2, r3
 800fa86:	4a1a      	ldr	r2, [pc, #104]	; (800faf0 <pvPortMalloc+0x180>)
 800fa88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fa8a:	4b19      	ldr	r3, [pc, #100]	; (800faf0 <pvPortMalloc+0x180>)
 800fa8c:	681a      	ldr	r2, [r3, #0]
 800fa8e:	4b1a      	ldr	r3, [pc, #104]	; (800faf8 <pvPortMalloc+0x188>)
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	429a      	cmp	r2, r3
 800fa94:	d203      	bcs.n	800fa9e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fa96:	4b16      	ldr	r3, [pc, #88]	; (800faf0 <pvPortMalloc+0x180>)
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	4a17      	ldr	r2, [pc, #92]	; (800faf8 <pvPortMalloc+0x188>)
 800fa9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fa9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faa0:	685a      	ldr	r2, [r3, #4]
 800faa2:	4b12      	ldr	r3, [pc, #72]	; (800faec <pvPortMalloc+0x17c>)
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	431a      	orrs	r2, r3
 800faa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faaa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800faac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faae:	2200      	movs	r2, #0
 800fab0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fab2:	f7fe fbd1 	bl	800e258 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800fab6:	69fb      	ldr	r3, [r7, #28]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d101      	bne.n	800fac0 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800fabc:	f7f0 ff59 	bl	8000972 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fac0:	69fb      	ldr	r3, [r7, #28]
 800fac2:	f003 0307 	and.w	r3, r3, #7
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d009      	beq.n	800fade <pvPortMalloc+0x16e>
 800faca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800face:	f383 8811 	msr	BASEPRI, r3
 800fad2:	f3bf 8f6f 	isb	sy
 800fad6:	f3bf 8f4f 	dsb	sy
 800fada:	60fb      	str	r3, [r7, #12]
 800fadc:	e7fe      	b.n	800fadc <pvPortMalloc+0x16c>
	return pvReturn;
 800fade:	69fb      	ldr	r3, [r7, #28]
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	3728      	adds	r7, #40	; 0x28
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd80      	pop	{r7, pc}
 800fae8:	20002f90 	.word	0x20002f90
 800faec:	20002f9c 	.word	0x20002f9c
 800faf0:	20002f94 	.word	0x20002f94
 800faf4:	20002f88 	.word	0x20002f88
 800faf8:	20002f98 	.word	0x20002f98

0800fafc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b086      	sub	sp, #24
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d046      	beq.n	800fb9c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fb0e:	2308      	movs	r3, #8
 800fb10:	425b      	negs	r3, r3
 800fb12:	697a      	ldr	r2, [r7, #20]
 800fb14:	4413      	add	r3, r2
 800fb16:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fb18:	697b      	ldr	r3, [r7, #20]
 800fb1a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fb1c:	693b      	ldr	r3, [r7, #16]
 800fb1e:	685a      	ldr	r2, [r3, #4]
 800fb20:	4b20      	ldr	r3, [pc, #128]	; (800fba4 <vPortFree+0xa8>)
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	4013      	ands	r3, r2
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d109      	bne.n	800fb3e <vPortFree+0x42>
 800fb2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb2e:	f383 8811 	msr	BASEPRI, r3
 800fb32:	f3bf 8f6f 	isb	sy
 800fb36:	f3bf 8f4f 	dsb	sy
 800fb3a:	60fb      	str	r3, [r7, #12]
 800fb3c:	e7fe      	b.n	800fb3c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fb3e:	693b      	ldr	r3, [r7, #16]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d009      	beq.n	800fb5a <vPortFree+0x5e>
 800fb46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb4a:	f383 8811 	msr	BASEPRI, r3
 800fb4e:	f3bf 8f6f 	isb	sy
 800fb52:	f3bf 8f4f 	dsb	sy
 800fb56:	60bb      	str	r3, [r7, #8]
 800fb58:	e7fe      	b.n	800fb58 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fb5a:	693b      	ldr	r3, [r7, #16]
 800fb5c:	685a      	ldr	r2, [r3, #4]
 800fb5e:	4b11      	ldr	r3, [pc, #68]	; (800fba4 <vPortFree+0xa8>)
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	4013      	ands	r3, r2
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d019      	beq.n	800fb9c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fb68:	693b      	ldr	r3, [r7, #16]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d115      	bne.n	800fb9c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fb70:	693b      	ldr	r3, [r7, #16]
 800fb72:	685a      	ldr	r2, [r3, #4]
 800fb74:	4b0b      	ldr	r3, [pc, #44]	; (800fba4 <vPortFree+0xa8>)
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	43db      	mvns	r3, r3
 800fb7a:	401a      	ands	r2, r3
 800fb7c:	693b      	ldr	r3, [r7, #16]
 800fb7e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fb80:	f7fe fb5c 	bl	800e23c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fb84:	693b      	ldr	r3, [r7, #16]
 800fb86:	685a      	ldr	r2, [r3, #4]
 800fb88:	4b07      	ldr	r3, [pc, #28]	; (800fba8 <vPortFree+0xac>)
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	4413      	add	r3, r2
 800fb8e:	4a06      	ldr	r2, [pc, #24]	; (800fba8 <vPortFree+0xac>)
 800fb90:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fb92:	6938      	ldr	r0, [r7, #16]
 800fb94:	f000 f86c 	bl	800fc70 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800fb98:	f7fe fb5e 	bl	800e258 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fb9c:	bf00      	nop
 800fb9e:	3718      	adds	r7, #24
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}
 800fba4:	20002f9c 	.word	0x20002f9c
 800fba8:	20002f94 	.word	0x20002f94

0800fbac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fbac:	b480      	push	{r7}
 800fbae:	b085      	sub	sp, #20
 800fbb0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fbb2:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800fbb6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fbb8:	4b27      	ldr	r3, [pc, #156]	; (800fc58 <prvHeapInit+0xac>)
 800fbba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	f003 0307 	and.w	r3, r3, #7
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d00c      	beq.n	800fbe0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	3307      	adds	r3, #7
 800fbca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	f023 0307 	bic.w	r3, r3, #7
 800fbd2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fbd4:	68ba      	ldr	r2, [r7, #8]
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	1ad3      	subs	r3, r2, r3
 800fbda:	4a1f      	ldr	r2, [pc, #124]	; (800fc58 <prvHeapInit+0xac>)
 800fbdc:	4413      	add	r3, r2
 800fbde:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fbe4:	4a1d      	ldr	r2, [pc, #116]	; (800fc5c <prvHeapInit+0xb0>)
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fbea:	4b1c      	ldr	r3, [pc, #112]	; (800fc5c <prvHeapInit+0xb0>)
 800fbec:	2200      	movs	r2, #0
 800fbee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	68ba      	ldr	r2, [r7, #8]
 800fbf4:	4413      	add	r3, r2
 800fbf6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fbf8:	2208      	movs	r2, #8
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	1a9b      	subs	r3, r3, r2
 800fbfe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	f023 0307 	bic.w	r3, r3, #7
 800fc06:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	4a15      	ldr	r2, [pc, #84]	; (800fc60 <prvHeapInit+0xb4>)
 800fc0c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fc0e:	4b14      	ldr	r3, [pc, #80]	; (800fc60 <prvHeapInit+0xb4>)
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	2200      	movs	r2, #0
 800fc14:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fc16:	4b12      	ldr	r3, [pc, #72]	; (800fc60 <prvHeapInit+0xb4>)
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fc22:	683b      	ldr	r3, [r7, #0]
 800fc24:	68fa      	ldr	r2, [r7, #12]
 800fc26:	1ad2      	subs	r2, r2, r3
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fc2c:	4b0c      	ldr	r3, [pc, #48]	; (800fc60 <prvHeapInit+0xb4>)
 800fc2e:	681a      	ldr	r2, [r3, #0]
 800fc30:	683b      	ldr	r3, [r7, #0]
 800fc32:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fc34:	683b      	ldr	r3, [r7, #0]
 800fc36:	685b      	ldr	r3, [r3, #4]
 800fc38:	4a0a      	ldr	r2, [pc, #40]	; (800fc64 <prvHeapInit+0xb8>)
 800fc3a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fc3c:	683b      	ldr	r3, [r7, #0]
 800fc3e:	685b      	ldr	r3, [r3, #4]
 800fc40:	4a09      	ldr	r2, [pc, #36]	; (800fc68 <prvHeapInit+0xbc>)
 800fc42:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fc44:	4b09      	ldr	r3, [pc, #36]	; (800fc6c <prvHeapInit+0xc0>)
 800fc46:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fc4a:	601a      	str	r2, [r3, #0]
}
 800fc4c:	bf00      	nop
 800fc4e:	3714      	adds	r7, #20
 800fc50:	46bd      	mov	sp, r7
 800fc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc56:	4770      	bx	lr
 800fc58:	20001048 	.word	0x20001048
 800fc5c:	20002f88 	.word	0x20002f88
 800fc60:	20002f90 	.word	0x20002f90
 800fc64:	20002f98 	.word	0x20002f98
 800fc68:	20002f94 	.word	0x20002f94
 800fc6c:	20002f9c 	.word	0x20002f9c

0800fc70 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fc70:	b480      	push	{r7}
 800fc72:	b085      	sub	sp, #20
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fc78:	4b28      	ldr	r3, [pc, #160]	; (800fd1c <prvInsertBlockIntoFreeList+0xac>)
 800fc7a:	60fb      	str	r3, [r7, #12]
 800fc7c:	e002      	b.n	800fc84 <prvInsertBlockIntoFreeList+0x14>
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	60fb      	str	r3, [r7, #12]
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	687a      	ldr	r2, [r7, #4]
 800fc8a:	429a      	cmp	r2, r3
 800fc8c:	d8f7      	bhi.n	800fc7e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	685b      	ldr	r3, [r3, #4]
 800fc96:	68ba      	ldr	r2, [r7, #8]
 800fc98:	4413      	add	r3, r2
 800fc9a:	687a      	ldr	r2, [r7, #4]
 800fc9c:	429a      	cmp	r2, r3
 800fc9e:	d108      	bne.n	800fcb2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	685a      	ldr	r2, [r3, #4]
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	685b      	ldr	r3, [r3, #4]
 800fca8:	441a      	add	r2, r3
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	685b      	ldr	r3, [r3, #4]
 800fcba:	68ba      	ldr	r2, [r7, #8]
 800fcbc:	441a      	add	r2, r3
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	429a      	cmp	r2, r3
 800fcc4:	d118      	bne.n	800fcf8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	681a      	ldr	r2, [r3, #0]
 800fcca:	4b15      	ldr	r3, [pc, #84]	; (800fd20 <prvInsertBlockIntoFreeList+0xb0>)
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	429a      	cmp	r2, r3
 800fcd0:	d00d      	beq.n	800fcee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	685a      	ldr	r2, [r3, #4]
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	685b      	ldr	r3, [r3, #4]
 800fcdc:	441a      	add	r2, r3
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	681a      	ldr	r2, [r3, #0]
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	601a      	str	r2, [r3, #0]
 800fcec:	e008      	b.n	800fd00 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fcee:	4b0c      	ldr	r3, [pc, #48]	; (800fd20 <prvInsertBlockIntoFreeList+0xb0>)
 800fcf0:	681a      	ldr	r2, [r3, #0]
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	601a      	str	r2, [r3, #0]
 800fcf6:	e003      	b.n	800fd00 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	681a      	ldr	r2, [r3, #0]
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fd00:	68fa      	ldr	r2, [r7, #12]
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	429a      	cmp	r2, r3
 800fd06:	d002      	beq.n	800fd0e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	687a      	ldr	r2, [r7, #4]
 800fd0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fd0e:	bf00      	nop
 800fd10:	3714      	adds	r7, #20
 800fd12:	46bd      	mov	sp, r7
 800fd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd18:	4770      	bx	lr
 800fd1a:	bf00      	nop
 800fd1c:	20002f88 	.word	0x20002f88
 800fd20:	20002f90 	.word	0x20002f90

0800fd24 <trunc>:
 800fd24:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 800fd28:	ec5c bb10 	vmov	fp, ip, d0
 800fd2c:	f3cc 500a 	ubfx	r0, ip, #20, #11
 800fd30:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 800fd34:	2913      	cmp	r1, #19
 800fd36:	4664      	mov	r4, ip
 800fd38:	dc11      	bgt.n	800fd5e <trunc+0x3a>
 800fd3a:	2900      	cmp	r1, #0
 800fd3c:	bfa7      	ittee	ge
 800fd3e:	4b15      	ldrge	r3, [pc, #84]	; (800fd94 <trunc+0x70>)
 800fd40:	fa43 f101 	asrge.w	r1, r3, r1
 800fd44:	2200      	movlt	r2, #0
 800fd46:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 800fd4a:	bfa4      	itt	ge
 800fd4c:	2200      	movge	r2, #0
 800fd4e:	ea2c 0301 	bicge.w	r3, ip, r1
 800fd52:	4693      	mov	fp, r2
 800fd54:	469c      	mov	ip, r3
 800fd56:	ec4c bb10 	vmov	d0, fp, ip
 800fd5a:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 800fd5e:	2933      	cmp	r1, #51	; 0x33
 800fd60:	dd0d      	ble.n	800fd7e <trunc+0x5a>
 800fd62:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800fd66:	d1f6      	bne.n	800fd56 <trunc+0x32>
 800fd68:	4663      	mov	r3, ip
 800fd6a:	ee10 2a10 	vmov	r2, s0
 800fd6e:	ee10 0a10 	vmov	r0, s0
 800fd72:	4621      	mov	r1, r4
 800fd74:	f7f0 fa82 	bl	800027c <__adddf3>
 800fd78:	4683      	mov	fp, r0
 800fd7a:	468c      	mov	ip, r1
 800fd7c:	e7eb      	b.n	800fd56 <trunc+0x32>
 800fd7e:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 800fd82:	f04f 33ff 	mov.w	r3, #4294967295
 800fd86:	fa23 f000 	lsr.w	r0, r3, r0
 800fd8a:	ea2b 0600 	bic.w	r6, fp, r0
 800fd8e:	46b3      	mov	fp, r6
 800fd90:	46a4      	mov	ip, r4
 800fd92:	e7e0      	b.n	800fd56 <trunc+0x32>
 800fd94:	000fffff 	.word	0x000fffff

0800fd98 <__errno>:
 800fd98:	4b01      	ldr	r3, [pc, #4]	; (800fda0 <__errno+0x8>)
 800fd9a:	6818      	ldr	r0, [r3, #0]
 800fd9c:	4770      	bx	lr
 800fd9e:	bf00      	nop
 800fda0:	20000654 	.word	0x20000654

0800fda4 <__libc_init_array>:
 800fda4:	b570      	push	{r4, r5, r6, lr}
 800fda6:	4e0d      	ldr	r6, [pc, #52]	; (800fddc <__libc_init_array+0x38>)
 800fda8:	4c0d      	ldr	r4, [pc, #52]	; (800fde0 <__libc_init_array+0x3c>)
 800fdaa:	1ba4      	subs	r4, r4, r6
 800fdac:	10a4      	asrs	r4, r4, #2
 800fdae:	2500      	movs	r5, #0
 800fdb0:	42a5      	cmp	r5, r4
 800fdb2:	d109      	bne.n	800fdc8 <__libc_init_array+0x24>
 800fdb4:	4e0b      	ldr	r6, [pc, #44]	; (800fde4 <__libc_init_array+0x40>)
 800fdb6:	4c0c      	ldr	r4, [pc, #48]	; (800fde8 <__libc_init_array+0x44>)
 800fdb8:	f000 fff2 	bl	8010da0 <_init>
 800fdbc:	1ba4      	subs	r4, r4, r6
 800fdbe:	10a4      	asrs	r4, r4, #2
 800fdc0:	2500      	movs	r5, #0
 800fdc2:	42a5      	cmp	r5, r4
 800fdc4:	d105      	bne.n	800fdd2 <__libc_init_array+0x2e>
 800fdc6:	bd70      	pop	{r4, r5, r6, pc}
 800fdc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fdcc:	4798      	blx	r3
 800fdce:	3501      	adds	r5, #1
 800fdd0:	e7ee      	b.n	800fdb0 <__libc_init_array+0xc>
 800fdd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fdd6:	4798      	blx	r3
 800fdd8:	3501      	adds	r5, #1
 800fdda:	e7f2      	b.n	800fdc2 <__libc_init_array+0x1e>
 800fddc:	08011618 	.word	0x08011618
 800fde0:	08011618 	.word	0x08011618
 800fde4:	08011618 	.word	0x08011618
 800fde8:	0801161c 	.word	0x0801161c

0800fdec <memcpy>:
 800fdec:	b510      	push	{r4, lr}
 800fdee:	1e43      	subs	r3, r0, #1
 800fdf0:	440a      	add	r2, r1
 800fdf2:	4291      	cmp	r1, r2
 800fdf4:	d100      	bne.n	800fdf8 <memcpy+0xc>
 800fdf6:	bd10      	pop	{r4, pc}
 800fdf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fdfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fe00:	e7f7      	b.n	800fdf2 <memcpy+0x6>

0800fe02 <memset>:
 800fe02:	4402      	add	r2, r0
 800fe04:	4603      	mov	r3, r0
 800fe06:	4293      	cmp	r3, r2
 800fe08:	d100      	bne.n	800fe0c <memset+0xa>
 800fe0a:	4770      	bx	lr
 800fe0c:	f803 1b01 	strb.w	r1, [r3], #1
 800fe10:	e7f9      	b.n	800fe06 <memset+0x4>
	...

0800fe14 <_puts_r>:
 800fe14:	b570      	push	{r4, r5, r6, lr}
 800fe16:	460e      	mov	r6, r1
 800fe18:	4605      	mov	r5, r0
 800fe1a:	b118      	cbz	r0, 800fe24 <_puts_r+0x10>
 800fe1c:	6983      	ldr	r3, [r0, #24]
 800fe1e:	b90b      	cbnz	r3, 800fe24 <_puts_r+0x10>
 800fe20:	f000 fa48 	bl	80102b4 <__sinit>
 800fe24:	69ab      	ldr	r3, [r5, #24]
 800fe26:	68ac      	ldr	r4, [r5, #8]
 800fe28:	b913      	cbnz	r3, 800fe30 <_puts_r+0x1c>
 800fe2a:	4628      	mov	r0, r5
 800fe2c:	f000 fa42 	bl	80102b4 <__sinit>
 800fe30:	4b23      	ldr	r3, [pc, #140]	; (800fec0 <_puts_r+0xac>)
 800fe32:	429c      	cmp	r4, r3
 800fe34:	d117      	bne.n	800fe66 <_puts_r+0x52>
 800fe36:	686c      	ldr	r4, [r5, #4]
 800fe38:	89a3      	ldrh	r3, [r4, #12]
 800fe3a:	071b      	lsls	r3, r3, #28
 800fe3c:	d51d      	bpl.n	800fe7a <_puts_r+0x66>
 800fe3e:	6923      	ldr	r3, [r4, #16]
 800fe40:	b1db      	cbz	r3, 800fe7a <_puts_r+0x66>
 800fe42:	3e01      	subs	r6, #1
 800fe44:	68a3      	ldr	r3, [r4, #8]
 800fe46:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fe4a:	3b01      	subs	r3, #1
 800fe4c:	60a3      	str	r3, [r4, #8]
 800fe4e:	b9e9      	cbnz	r1, 800fe8c <_puts_r+0x78>
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	da2e      	bge.n	800feb2 <_puts_r+0x9e>
 800fe54:	4622      	mov	r2, r4
 800fe56:	210a      	movs	r1, #10
 800fe58:	4628      	mov	r0, r5
 800fe5a:	f000 f87b 	bl	800ff54 <__swbuf_r>
 800fe5e:	3001      	adds	r0, #1
 800fe60:	d011      	beq.n	800fe86 <_puts_r+0x72>
 800fe62:	200a      	movs	r0, #10
 800fe64:	e011      	b.n	800fe8a <_puts_r+0x76>
 800fe66:	4b17      	ldr	r3, [pc, #92]	; (800fec4 <_puts_r+0xb0>)
 800fe68:	429c      	cmp	r4, r3
 800fe6a:	d101      	bne.n	800fe70 <_puts_r+0x5c>
 800fe6c:	68ac      	ldr	r4, [r5, #8]
 800fe6e:	e7e3      	b.n	800fe38 <_puts_r+0x24>
 800fe70:	4b15      	ldr	r3, [pc, #84]	; (800fec8 <_puts_r+0xb4>)
 800fe72:	429c      	cmp	r4, r3
 800fe74:	bf08      	it	eq
 800fe76:	68ec      	ldreq	r4, [r5, #12]
 800fe78:	e7de      	b.n	800fe38 <_puts_r+0x24>
 800fe7a:	4621      	mov	r1, r4
 800fe7c:	4628      	mov	r0, r5
 800fe7e:	f000 f8bb 	bl	800fff8 <__swsetup_r>
 800fe82:	2800      	cmp	r0, #0
 800fe84:	d0dd      	beq.n	800fe42 <_puts_r+0x2e>
 800fe86:	f04f 30ff 	mov.w	r0, #4294967295
 800fe8a:	bd70      	pop	{r4, r5, r6, pc}
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	da04      	bge.n	800fe9a <_puts_r+0x86>
 800fe90:	69a2      	ldr	r2, [r4, #24]
 800fe92:	429a      	cmp	r2, r3
 800fe94:	dc06      	bgt.n	800fea4 <_puts_r+0x90>
 800fe96:	290a      	cmp	r1, #10
 800fe98:	d004      	beq.n	800fea4 <_puts_r+0x90>
 800fe9a:	6823      	ldr	r3, [r4, #0]
 800fe9c:	1c5a      	adds	r2, r3, #1
 800fe9e:	6022      	str	r2, [r4, #0]
 800fea0:	7019      	strb	r1, [r3, #0]
 800fea2:	e7cf      	b.n	800fe44 <_puts_r+0x30>
 800fea4:	4622      	mov	r2, r4
 800fea6:	4628      	mov	r0, r5
 800fea8:	f000 f854 	bl	800ff54 <__swbuf_r>
 800feac:	3001      	adds	r0, #1
 800feae:	d1c9      	bne.n	800fe44 <_puts_r+0x30>
 800feb0:	e7e9      	b.n	800fe86 <_puts_r+0x72>
 800feb2:	6823      	ldr	r3, [r4, #0]
 800feb4:	200a      	movs	r0, #10
 800feb6:	1c5a      	adds	r2, r3, #1
 800feb8:	6022      	str	r2, [r4, #0]
 800feba:	7018      	strb	r0, [r3, #0]
 800febc:	e7e5      	b.n	800fe8a <_puts_r+0x76>
 800febe:	bf00      	nop
 800fec0:	0801159c 	.word	0x0801159c
 800fec4:	080115bc 	.word	0x080115bc
 800fec8:	0801157c 	.word	0x0801157c

0800fecc <puts>:
 800fecc:	4b02      	ldr	r3, [pc, #8]	; (800fed8 <puts+0xc>)
 800fece:	4601      	mov	r1, r0
 800fed0:	6818      	ldr	r0, [r3, #0]
 800fed2:	f7ff bf9f 	b.w	800fe14 <_puts_r>
 800fed6:	bf00      	nop
 800fed8:	20000654 	.word	0x20000654

0800fedc <sniprintf>:
 800fedc:	b40c      	push	{r2, r3}
 800fede:	b530      	push	{r4, r5, lr}
 800fee0:	4b17      	ldr	r3, [pc, #92]	; (800ff40 <sniprintf+0x64>)
 800fee2:	1e0c      	subs	r4, r1, #0
 800fee4:	b09d      	sub	sp, #116	; 0x74
 800fee6:	681d      	ldr	r5, [r3, #0]
 800fee8:	da08      	bge.n	800fefc <sniprintf+0x20>
 800feea:	238b      	movs	r3, #139	; 0x8b
 800feec:	602b      	str	r3, [r5, #0]
 800feee:	f04f 30ff 	mov.w	r0, #4294967295
 800fef2:	b01d      	add	sp, #116	; 0x74
 800fef4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fef8:	b002      	add	sp, #8
 800fefa:	4770      	bx	lr
 800fefc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ff00:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ff04:	bf14      	ite	ne
 800ff06:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ff0a:	4623      	moveq	r3, r4
 800ff0c:	9304      	str	r3, [sp, #16]
 800ff0e:	9307      	str	r3, [sp, #28]
 800ff10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ff14:	9002      	str	r0, [sp, #8]
 800ff16:	9006      	str	r0, [sp, #24]
 800ff18:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ff1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ff1e:	ab21      	add	r3, sp, #132	; 0x84
 800ff20:	a902      	add	r1, sp, #8
 800ff22:	4628      	mov	r0, r5
 800ff24:	9301      	str	r3, [sp, #4]
 800ff26:	f000 fbb5 	bl	8010694 <_svfiprintf_r>
 800ff2a:	1c43      	adds	r3, r0, #1
 800ff2c:	bfbc      	itt	lt
 800ff2e:	238b      	movlt	r3, #139	; 0x8b
 800ff30:	602b      	strlt	r3, [r5, #0]
 800ff32:	2c00      	cmp	r4, #0
 800ff34:	d0dd      	beq.n	800fef2 <sniprintf+0x16>
 800ff36:	9b02      	ldr	r3, [sp, #8]
 800ff38:	2200      	movs	r2, #0
 800ff3a:	701a      	strb	r2, [r3, #0]
 800ff3c:	e7d9      	b.n	800fef2 <sniprintf+0x16>
 800ff3e:	bf00      	nop
 800ff40:	20000654 	.word	0x20000654

0800ff44 <strcpy>:
 800ff44:	4603      	mov	r3, r0
 800ff46:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ff4a:	f803 2b01 	strb.w	r2, [r3], #1
 800ff4e:	2a00      	cmp	r2, #0
 800ff50:	d1f9      	bne.n	800ff46 <strcpy+0x2>
 800ff52:	4770      	bx	lr

0800ff54 <__swbuf_r>:
 800ff54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff56:	460e      	mov	r6, r1
 800ff58:	4614      	mov	r4, r2
 800ff5a:	4605      	mov	r5, r0
 800ff5c:	b118      	cbz	r0, 800ff66 <__swbuf_r+0x12>
 800ff5e:	6983      	ldr	r3, [r0, #24]
 800ff60:	b90b      	cbnz	r3, 800ff66 <__swbuf_r+0x12>
 800ff62:	f000 f9a7 	bl	80102b4 <__sinit>
 800ff66:	4b21      	ldr	r3, [pc, #132]	; (800ffec <__swbuf_r+0x98>)
 800ff68:	429c      	cmp	r4, r3
 800ff6a:	d12a      	bne.n	800ffc2 <__swbuf_r+0x6e>
 800ff6c:	686c      	ldr	r4, [r5, #4]
 800ff6e:	69a3      	ldr	r3, [r4, #24]
 800ff70:	60a3      	str	r3, [r4, #8]
 800ff72:	89a3      	ldrh	r3, [r4, #12]
 800ff74:	071a      	lsls	r2, r3, #28
 800ff76:	d52e      	bpl.n	800ffd6 <__swbuf_r+0x82>
 800ff78:	6923      	ldr	r3, [r4, #16]
 800ff7a:	b363      	cbz	r3, 800ffd6 <__swbuf_r+0x82>
 800ff7c:	6923      	ldr	r3, [r4, #16]
 800ff7e:	6820      	ldr	r0, [r4, #0]
 800ff80:	1ac0      	subs	r0, r0, r3
 800ff82:	6963      	ldr	r3, [r4, #20]
 800ff84:	b2f6      	uxtb	r6, r6
 800ff86:	4283      	cmp	r3, r0
 800ff88:	4637      	mov	r7, r6
 800ff8a:	dc04      	bgt.n	800ff96 <__swbuf_r+0x42>
 800ff8c:	4621      	mov	r1, r4
 800ff8e:	4628      	mov	r0, r5
 800ff90:	f000 f926 	bl	80101e0 <_fflush_r>
 800ff94:	bb28      	cbnz	r0, 800ffe2 <__swbuf_r+0x8e>
 800ff96:	68a3      	ldr	r3, [r4, #8]
 800ff98:	3b01      	subs	r3, #1
 800ff9a:	60a3      	str	r3, [r4, #8]
 800ff9c:	6823      	ldr	r3, [r4, #0]
 800ff9e:	1c5a      	adds	r2, r3, #1
 800ffa0:	6022      	str	r2, [r4, #0]
 800ffa2:	701e      	strb	r6, [r3, #0]
 800ffa4:	6963      	ldr	r3, [r4, #20]
 800ffa6:	3001      	adds	r0, #1
 800ffa8:	4283      	cmp	r3, r0
 800ffaa:	d004      	beq.n	800ffb6 <__swbuf_r+0x62>
 800ffac:	89a3      	ldrh	r3, [r4, #12]
 800ffae:	07db      	lsls	r3, r3, #31
 800ffb0:	d519      	bpl.n	800ffe6 <__swbuf_r+0x92>
 800ffb2:	2e0a      	cmp	r6, #10
 800ffb4:	d117      	bne.n	800ffe6 <__swbuf_r+0x92>
 800ffb6:	4621      	mov	r1, r4
 800ffb8:	4628      	mov	r0, r5
 800ffba:	f000 f911 	bl	80101e0 <_fflush_r>
 800ffbe:	b190      	cbz	r0, 800ffe6 <__swbuf_r+0x92>
 800ffc0:	e00f      	b.n	800ffe2 <__swbuf_r+0x8e>
 800ffc2:	4b0b      	ldr	r3, [pc, #44]	; (800fff0 <__swbuf_r+0x9c>)
 800ffc4:	429c      	cmp	r4, r3
 800ffc6:	d101      	bne.n	800ffcc <__swbuf_r+0x78>
 800ffc8:	68ac      	ldr	r4, [r5, #8]
 800ffca:	e7d0      	b.n	800ff6e <__swbuf_r+0x1a>
 800ffcc:	4b09      	ldr	r3, [pc, #36]	; (800fff4 <__swbuf_r+0xa0>)
 800ffce:	429c      	cmp	r4, r3
 800ffd0:	bf08      	it	eq
 800ffd2:	68ec      	ldreq	r4, [r5, #12]
 800ffd4:	e7cb      	b.n	800ff6e <__swbuf_r+0x1a>
 800ffd6:	4621      	mov	r1, r4
 800ffd8:	4628      	mov	r0, r5
 800ffda:	f000 f80d 	bl	800fff8 <__swsetup_r>
 800ffde:	2800      	cmp	r0, #0
 800ffe0:	d0cc      	beq.n	800ff7c <__swbuf_r+0x28>
 800ffe2:	f04f 37ff 	mov.w	r7, #4294967295
 800ffe6:	4638      	mov	r0, r7
 800ffe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ffea:	bf00      	nop
 800ffec:	0801159c 	.word	0x0801159c
 800fff0:	080115bc 	.word	0x080115bc
 800fff4:	0801157c 	.word	0x0801157c

0800fff8 <__swsetup_r>:
 800fff8:	4b32      	ldr	r3, [pc, #200]	; (80100c4 <__swsetup_r+0xcc>)
 800fffa:	b570      	push	{r4, r5, r6, lr}
 800fffc:	681d      	ldr	r5, [r3, #0]
 800fffe:	4606      	mov	r6, r0
 8010000:	460c      	mov	r4, r1
 8010002:	b125      	cbz	r5, 801000e <__swsetup_r+0x16>
 8010004:	69ab      	ldr	r3, [r5, #24]
 8010006:	b913      	cbnz	r3, 801000e <__swsetup_r+0x16>
 8010008:	4628      	mov	r0, r5
 801000a:	f000 f953 	bl	80102b4 <__sinit>
 801000e:	4b2e      	ldr	r3, [pc, #184]	; (80100c8 <__swsetup_r+0xd0>)
 8010010:	429c      	cmp	r4, r3
 8010012:	d10f      	bne.n	8010034 <__swsetup_r+0x3c>
 8010014:	686c      	ldr	r4, [r5, #4]
 8010016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801001a:	b29a      	uxth	r2, r3
 801001c:	0715      	lsls	r5, r2, #28
 801001e:	d42c      	bmi.n	801007a <__swsetup_r+0x82>
 8010020:	06d0      	lsls	r0, r2, #27
 8010022:	d411      	bmi.n	8010048 <__swsetup_r+0x50>
 8010024:	2209      	movs	r2, #9
 8010026:	6032      	str	r2, [r6, #0]
 8010028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801002c:	81a3      	strh	r3, [r4, #12]
 801002e:	f04f 30ff 	mov.w	r0, #4294967295
 8010032:	e03e      	b.n	80100b2 <__swsetup_r+0xba>
 8010034:	4b25      	ldr	r3, [pc, #148]	; (80100cc <__swsetup_r+0xd4>)
 8010036:	429c      	cmp	r4, r3
 8010038:	d101      	bne.n	801003e <__swsetup_r+0x46>
 801003a:	68ac      	ldr	r4, [r5, #8]
 801003c:	e7eb      	b.n	8010016 <__swsetup_r+0x1e>
 801003e:	4b24      	ldr	r3, [pc, #144]	; (80100d0 <__swsetup_r+0xd8>)
 8010040:	429c      	cmp	r4, r3
 8010042:	bf08      	it	eq
 8010044:	68ec      	ldreq	r4, [r5, #12]
 8010046:	e7e6      	b.n	8010016 <__swsetup_r+0x1e>
 8010048:	0751      	lsls	r1, r2, #29
 801004a:	d512      	bpl.n	8010072 <__swsetup_r+0x7a>
 801004c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801004e:	b141      	cbz	r1, 8010062 <__swsetup_r+0x6a>
 8010050:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010054:	4299      	cmp	r1, r3
 8010056:	d002      	beq.n	801005e <__swsetup_r+0x66>
 8010058:	4630      	mov	r0, r6
 801005a:	f000 fa19 	bl	8010490 <_free_r>
 801005e:	2300      	movs	r3, #0
 8010060:	6363      	str	r3, [r4, #52]	; 0x34
 8010062:	89a3      	ldrh	r3, [r4, #12]
 8010064:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010068:	81a3      	strh	r3, [r4, #12]
 801006a:	2300      	movs	r3, #0
 801006c:	6063      	str	r3, [r4, #4]
 801006e:	6923      	ldr	r3, [r4, #16]
 8010070:	6023      	str	r3, [r4, #0]
 8010072:	89a3      	ldrh	r3, [r4, #12]
 8010074:	f043 0308 	orr.w	r3, r3, #8
 8010078:	81a3      	strh	r3, [r4, #12]
 801007a:	6923      	ldr	r3, [r4, #16]
 801007c:	b94b      	cbnz	r3, 8010092 <__swsetup_r+0x9a>
 801007e:	89a3      	ldrh	r3, [r4, #12]
 8010080:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010088:	d003      	beq.n	8010092 <__swsetup_r+0x9a>
 801008a:	4621      	mov	r1, r4
 801008c:	4630      	mov	r0, r6
 801008e:	f000 f9bf 	bl	8010410 <__smakebuf_r>
 8010092:	89a2      	ldrh	r2, [r4, #12]
 8010094:	f012 0301 	ands.w	r3, r2, #1
 8010098:	d00c      	beq.n	80100b4 <__swsetup_r+0xbc>
 801009a:	2300      	movs	r3, #0
 801009c:	60a3      	str	r3, [r4, #8]
 801009e:	6963      	ldr	r3, [r4, #20]
 80100a0:	425b      	negs	r3, r3
 80100a2:	61a3      	str	r3, [r4, #24]
 80100a4:	6923      	ldr	r3, [r4, #16]
 80100a6:	b953      	cbnz	r3, 80100be <__swsetup_r+0xc6>
 80100a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80100ac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80100b0:	d1ba      	bne.n	8010028 <__swsetup_r+0x30>
 80100b2:	bd70      	pop	{r4, r5, r6, pc}
 80100b4:	0792      	lsls	r2, r2, #30
 80100b6:	bf58      	it	pl
 80100b8:	6963      	ldrpl	r3, [r4, #20]
 80100ba:	60a3      	str	r3, [r4, #8]
 80100bc:	e7f2      	b.n	80100a4 <__swsetup_r+0xac>
 80100be:	2000      	movs	r0, #0
 80100c0:	e7f7      	b.n	80100b2 <__swsetup_r+0xba>
 80100c2:	bf00      	nop
 80100c4:	20000654 	.word	0x20000654
 80100c8:	0801159c 	.word	0x0801159c
 80100cc:	080115bc 	.word	0x080115bc
 80100d0:	0801157c 	.word	0x0801157c

080100d4 <__sflush_r>:
 80100d4:	898a      	ldrh	r2, [r1, #12]
 80100d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100da:	4605      	mov	r5, r0
 80100dc:	0710      	lsls	r0, r2, #28
 80100de:	460c      	mov	r4, r1
 80100e0:	d458      	bmi.n	8010194 <__sflush_r+0xc0>
 80100e2:	684b      	ldr	r3, [r1, #4]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	dc05      	bgt.n	80100f4 <__sflush_r+0x20>
 80100e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	dc02      	bgt.n	80100f4 <__sflush_r+0x20>
 80100ee:	2000      	movs	r0, #0
 80100f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80100f6:	2e00      	cmp	r6, #0
 80100f8:	d0f9      	beq.n	80100ee <__sflush_r+0x1a>
 80100fa:	2300      	movs	r3, #0
 80100fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010100:	682f      	ldr	r7, [r5, #0]
 8010102:	6a21      	ldr	r1, [r4, #32]
 8010104:	602b      	str	r3, [r5, #0]
 8010106:	d032      	beq.n	801016e <__sflush_r+0x9a>
 8010108:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801010a:	89a3      	ldrh	r3, [r4, #12]
 801010c:	075a      	lsls	r2, r3, #29
 801010e:	d505      	bpl.n	801011c <__sflush_r+0x48>
 8010110:	6863      	ldr	r3, [r4, #4]
 8010112:	1ac0      	subs	r0, r0, r3
 8010114:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010116:	b10b      	cbz	r3, 801011c <__sflush_r+0x48>
 8010118:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801011a:	1ac0      	subs	r0, r0, r3
 801011c:	2300      	movs	r3, #0
 801011e:	4602      	mov	r2, r0
 8010120:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010122:	6a21      	ldr	r1, [r4, #32]
 8010124:	4628      	mov	r0, r5
 8010126:	47b0      	blx	r6
 8010128:	1c43      	adds	r3, r0, #1
 801012a:	89a3      	ldrh	r3, [r4, #12]
 801012c:	d106      	bne.n	801013c <__sflush_r+0x68>
 801012e:	6829      	ldr	r1, [r5, #0]
 8010130:	291d      	cmp	r1, #29
 8010132:	d848      	bhi.n	80101c6 <__sflush_r+0xf2>
 8010134:	4a29      	ldr	r2, [pc, #164]	; (80101dc <__sflush_r+0x108>)
 8010136:	40ca      	lsrs	r2, r1
 8010138:	07d6      	lsls	r6, r2, #31
 801013a:	d544      	bpl.n	80101c6 <__sflush_r+0xf2>
 801013c:	2200      	movs	r2, #0
 801013e:	6062      	str	r2, [r4, #4]
 8010140:	04d9      	lsls	r1, r3, #19
 8010142:	6922      	ldr	r2, [r4, #16]
 8010144:	6022      	str	r2, [r4, #0]
 8010146:	d504      	bpl.n	8010152 <__sflush_r+0x7e>
 8010148:	1c42      	adds	r2, r0, #1
 801014a:	d101      	bne.n	8010150 <__sflush_r+0x7c>
 801014c:	682b      	ldr	r3, [r5, #0]
 801014e:	b903      	cbnz	r3, 8010152 <__sflush_r+0x7e>
 8010150:	6560      	str	r0, [r4, #84]	; 0x54
 8010152:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010154:	602f      	str	r7, [r5, #0]
 8010156:	2900      	cmp	r1, #0
 8010158:	d0c9      	beq.n	80100ee <__sflush_r+0x1a>
 801015a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801015e:	4299      	cmp	r1, r3
 8010160:	d002      	beq.n	8010168 <__sflush_r+0x94>
 8010162:	4628      	mov	r0, r5
 8010164:	f000 f994 	bl	8010490 <_free_r>
 8010168:	2000      	movs	r0, #0
 801016a:	6360      	str	r0, [r4, #52]	; 0x34
 801016c:	e7c0      	b.n	80100f0 <__sflush_r+0x1c>
 801016e:	2301      	movs	r3, #1
 8010170:	4628      	mov	r0, r5
 8010172:	47b0      	blx	r6
 8010174:	1c41      	adds	r1, r0, #1
 8010176:	d1c8      	bne.n	801010a <__sflush_r+0x36>
 8010178:	682b      	ldr	r3, [r5, #0]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d0c5      	beq.n	801010a <__sflush_r+0x36>
 801017e:	2b1d      	cmp	r3, #29
 8010180:	d001      	beq.n	8010186 <__sflush_r+0xb2>
 8010182:	2b16      	cmp	r3, #22
 8010184:	d101      	bne.n	801018a <__sflush_r+0xb6>
 8010186:	602f      	str	r7, [r5, #0]
 8010188:	e7b1      	b.n	80100ee <__sflush_r+0x1a>
 801018a:	89a3      	ldrh	r3, [r4, #12]
 801018c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010190:	81a3      	strh	r3, [r4, #12]
 8010192:	e7ad      	b.n	80100f0 <__sflush_r+0x1c>
 8010194:	690f      	ldr	r7, [r1, #16]
 8010196:	2f00      	cmp	r7, #0
 8010198:	d0a9      	beq.n	80100ee <__sflush_r+0x1a>
 801019a:	0793      	lsls	r3, r2, #30
 801019c:	680e      	ldr	r6, [r1, #0]
 801019e:	bf08      	it	eq
 80101a0:	694b      	ldreq	r3, [r1, #20]
 80101a2:	600f      	str	r7, [r1, #0]
 80101a4:	bf18      	it	ne
 80101a6:	2300      	movne	r3, #0
 80101a8:	eba6 0807 	sub.w	r8, r6, r7
 80101ac:	608b      	str	r3, [r1, #8]
 80101ae:	f1b8 0f00 	cmp.w	r8, #0
 80101b2:	dd9c      	ble.n	80100ee <__sflush_r+0x1a>
 80101b4:	4643      	mov	r3, r8
 80101b6:	463a      	mov	r2, r7
 80101b8:	6a21      	ldr	r1, [r4, #32]
 80101ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80101bc:	4628      	mov	r0, r5
 80101be:	47b0      	blx	r6
 80101c0:	2800      	cmp	r0, #0
 80101c2:	dc06      	bgt.n	80101d2 <__sflush_r+0xfe>
 80101c4:	89a3      	ldrh	r3, [r4, #12]
 80101c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80101ca:	81a3      	strh	r3, [r4, #12]
 80101cc:	f04f 30ff 	mov.w	r0, #4294967295
 80101d0:	e78e      	b.n	80100f0 <__sflush_r+0x1c>
 80101d2:	4407      	add	r7, r0
 80101d4:	eba8 0800 	sub.w	r8, r8, r0
 80101d8:	e7e9      	b.n	80101ae <__sflush_r+0xda>
 80101da:	bf00      	nop
 80101dc:	20400001 	.word	0x20400001

080101e0 <_fflush_r>:
 80101e0:	b538      	push	{r3, r4, r5, lr}
 80101e2:	690b      	ldr	r3, [r1, #16]
 80101e4:	4605      	mov	r5, r0
 80101e6:	460c      	mov	r4, r1
 80101e8:	b1db      	cbz	r3, 8010222 <_fflush_r+0x42>
 80101ea:	b118      	cbz	r0, 80101f4 <_fflush_r+0x14>
 80101ec:	6983      	ldr	r3, [r0, #24]
 80101ee:	b90b      	cbnz	r3, 80101f4 <_fflush_r+0x14>
 80101f0:	f000 f860 	bl	80102b4 <__sinit>
 80101f4:	4b0c      	ldr	r3, [pc, #48]	; (8010228 <_fflush_r+0x48>)
 80101f6:	429c      	cmp	r4, r3
 80101f8:	d109      	bne.n	801020e <_fflush_r+0x2e>
 80101fa:	686c      	ldr	r4, [r5, #4]
 80101fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010200:	b17b      	cbz	r3, 8010222 <_fflush_r+0x42>
 8010202:	4621      	mov	r1, r4
 8010204:	4628      	mov	r0, r5
 8010206:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801020a:	f7ff bf63 	b.w	80100d4 <__sflush_r>
 801020e:	4b07      	ldr	r3, [pc, #28]	; (801022c <_fflush_r+0x4c>)
 8010210:	429c      	cmp	r4, r3
 8010212:	d101      	bne.n	8010218 <_fflush_r+0x38>
 8010214:	68ac      	ldr	r4, [r5, #8]
 8010216:	e7f1      	b.n	80101fc <_fflush_r+0x1c>
 8010218:	4b05      	ldr	r3, [pc, #20]	; (8010230 <_fflush_r+0x50>)
 801021a:	429c      	cmp	r4, r3
 801021c:	bf08      	it	eq
 801021e:	68ec      	ldreq	r4, [r5, #12]
 8010220:	e7ec      	b.n	80101fc <_fflush_r+0x1c>
 8010222:	2000      	movs	r0, #0
 8010224:	bd38      	pop	{r3, r4, r5, pc}
 8010226:	bf00      	nop
 8010228:	0801159c 	.word	0x0801159c
 801022c:	080115bc 	.word	0x080115bc
 8010230:	0801157c 	.word	0x0801157c

08010234 <std>:
 8010234:	2300      	movs	r3, #0
 8010236:	b510      	push	{r4, lr}
 8010238:	4604      	mov	r4, r0
 801023a:	e9c0 3300 	strd	r3, r3, [r0]
 801023e:	6083      	str	r3, [r0, #8]
 8010240:	8181      	strh	r1, [r0, #12]
 8010242:	6643      	str	r3, [r0, #100]	; 0x64
 8010244:	81c2      	strh	r2, [r0, #14]
 8010246:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801024a:	6183      	str	r3, [r0, #24]
 801024c:	4619      	mov	r1, r3
 801024e:	2208      	movs	r2, #8
 8010250:	305c      	adds	r0, #92	; 0x5c
 8010252:	f7ff fdd6 	bl	800fe02 <memset>
 8010256:	4b05      	ldr	r3, [pc, #20]	; (801026c <std+0x38>)
 8010258:	6263      	str	r3, [r4, #36]	; 0x24
 801025a:	4b05      	ldr	r3, [pc, #20]	; (8010270 <std+0x3c>)
 801025c:	62a3      	str	r3, [r4, #40]	; 0x28
 801025e:	4b05      	ldr	r3, [pc, #20]	; (8010274 <std+0x40>)
 8010260:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010262:	4b05      	ldr	r3, [pc, #20]	; (8010278 <std+0x44>)
 8010264:	6224      	str	r4, [r4, #32]
 8010266:	6323      	str	r3, [r4, #48]	; 0x30
 8010268:	bd10      	pop	{r4, pc}
 801026a:	bf00      	nop
 801026c:	08010bb5 	.word	0x08010bb5
 8010270:	08010bd7 	.word	0x08010bd7
 8010274:	08010c0f 	.word	0x08010c0f
 8010278:	08010c33 	.word	0x08010c33

0801027c <_cleanup_r>:
 801027c:	4901      	ldr	r1, [pc, #4]	; (8010284 <_cleanup_r+0x8>)
 801027e:	f000 b885 	b.w	801038c <_fwalk_reent>
 8010282:	bf00      	nop
 8010284:	080101e1 	.word	0x080101e1

08010288 <__sfmoreglue>:
 8010288:	b570      	push	{r4, r5, r6, lr}
 801028a:	1e4a      	subs	r2, r1, #1
 801028c:	2568      	movs	r5, #104	; 0x68
 801028e:	4355      	muls	r5, r2
 8010290:	460e      	mov	r6, r1
 8010292:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010296:	f000 f949 	bl	801052c <_malloc_r>
 801029a:	4604      	mov	r4, r0
 801029c:	b140      	cbz	r0, 80102b0 <__sfmoreglue+0x28>
 801029e:	2100      	movs	r1, #0
 80102a0:	e9c0 1600 	strd	r1, r6, [r0]
 80102a4:	300c      	adds	r0, #12
 80102a6:	60a0      	str	r0, [r4, #8]
 80102a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80102ac:	f7ff fda9 	bl	800fe02 <memset>
 80102b0:	4620      	mov	r0, r4
 80102b2:	bd70      	pop	{r4, r5, r6, pc}

080102b4 <__sinit>:
 80102b4:	6983      	ldr	r3, [r0, #24]
 80102b6:	b510      	push	{r4, lr}
 80102b8:	4604      	mov	r4, r0
 80102ba:	bb33      	cbnz	r3, 801030a <__sinit+0x56>
 80102bc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80102c0:	6503      	str	r3, [r0, #80]	; 0x50
 80102c2:	4b12      	ldr	r3, [pc, #72]	; (801030c <__sinit+0x58>)
 80102c4:	4a12      	ldr	r2, [pc, #72]	; (8010310 <__sinit+0x5c>)
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	6282      	str	r2, [r0, #40]	; 0x28
 80102ca:	4298      	cmp	r0, r3
 80102cc:	bf04      	itt	eq
 80102ce:	2301      	moveq	r3, #1
 80102d0:	6183      	streq	r3, [r0, #24]
 80102d2:	f000 f81f 	bl	8010314 <__sfp>
 80102d6:	6060      	str	r0, [r4, #4]
 80102d8:	4620      	mov	r0, r4
 80102da:	f000 f81b 	bl	8010314 <__sfp>
 80102de:	60a0      	str	r0, [r4, #8]
 80102e0:	4620      	mov	r0, r4
 80102e2:	f000 f817 	bl	8010314 <__sfp>
 80102e6:	2200      	movs	r2, #0
 80102e8:	60e0      	str	r0, [r4, #12]
 80102ea:	2104      	movs	r1, #4
 80102ec:	6860      	ldr	r0, [r4, #4]
 80102ee:	f7ff ffa1 	bl	8010234 <std>
 80102f2:	2201      	movs	r2, #1
 80102f4:	2109      	movs	r1, #9
 80102f6:	68a0      	ldr	r0, [r4, #8]
 80102f8:	f7ff ff9c 	bl	8010234 <std>
 80102fc:	2202      	movs	r2, #2
 80102fe:	2112      	movs	r1, #18
 8010300:	68e0      	ldr	r0, [r4, #12]
 8010302:	f7ff ff97 	bl	8010234 <std>
 8010306:	2301      	movs	r3, #1
 8010308:	61a3      	str	r3, [r4, #24]
 801030a:	bd10      	pop	{r4, pc}
 801030c:	08011578 	.word	0x08011578
 8010310:	0801027d 	.word	0x0801027d

08010314 <__sfp>:
 8010314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010316:	4b1b      	ldr	r3, [pc, #108]	; (8010384 <__sfp+0x70>)
 8010318:	681e      	ldr	r6, [r3, #0]
 801031a:	69b3      	ldr	r3, [r6, #24]
 801031c:	4607      	mov	r7, r0
 801031e:	b913      	cbnz	r3, 8010326 <__sfp+0x12>
 8010320:	4630      	mov	r0, r6
 8010322:	f7ff ffc7 	bl	80102b4 <__sinit>
 8010326:	3648      	adds	r6, #72	; 0x48
 8010328:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801032c:	3b01      	subs	r3, #1
 801032e:	d503      	bpl.n	8010338 <__sfp+0x24>
 8010330:	6833      	ldr	r3, [r6, #0]
 8010332:	b133      	cbz	r3, 8010342 <__sfp+0x2e>
 8010334:	6836      	ldr	r6, [r6, #0]
 8010336:	e7f7      	b.n	8010328 <__sfp+0x14>
 8010338:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801033c:	b16d      	cbz	r5, 801035a <__sfp+0x46>
 801033e:	3468      	adds	r4, #104	; 0x68
 8010340:	e7f4      	b.n	801032c <__sfp+0x18>
 8010342:	2104      	movs	r1, #4
 8010344:	4638      	mov	r0, r7
 8010346:	f7ff ff9f 	bl	8010288 <__sfmoreglue>
 801034a:	6030      	str	r0, [r6, #0]
 801034c:	2800      	cmp	r0, #0
 801034e:	d1f1      	bne.n	8010334 <__sfp+0x20>
 8010350:	230c      	movs	r3, #12
 8010352:	603b      	str	r3, [r7, #0]
 8010354:	4604      	mov	r4, r0
 8010356:	4620      	mov	r0, r4
 8010358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801035a:	4b0b      	ldr	r3, [pc, #44]	; (8010388 <__sfp+0x74>)
 801035c:	6665      	str	r5, [r4, #100]	; 0x64
 801035e:	e9c4 5500 	strd	r5, r5, [r4]
 8010362:	60a5      	str	r5, [r4, #8]
 8010364:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010368:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801036c:	2208      	movs	r2, #8
 801036e:	4629      	mov	r1, r5
 8010370:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010374:	f7ff fd45 	bl	800fe02 <memset>
 8010378:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801037c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010380:	e7e9      	b.n	8010356 <__sfp+0x42>
 8010382:	bf00      	nop
 8010384:	08011578 	.word	0x08011578
 8010388:	ffff0001 	.word	0xffff0001

0801038c <_fwalk_reent>:
 801038c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010390:	4680      	mov	r8, r0
 8010392:	4689      	mov	r9, r1
 8010394:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010398:	2600      	movs	r6, #0
 801039a:	b914      	cbnz	r4, 80103a2 <_fwalk_reent+0x16>
 801039c:	4630      	mov	r0, r6
 801039e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103a2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80103a6:	3f01      	subs	r7, #1
 80103a8:	d501      	bpl.n	80103ae <_fwalk_reent+0x22>
 80103aa:	6824      	ldr	r4, [r4, #0]
 80103ac:	e7f5      	b.n	801039a <_fwalk_reent+0xe>
 80103ae:	89ab      	ldrh	r3, [r5, #12]
 80103b0:	2b01      	cmp	r3, #1
 80103b2:	d907      	bls.n	80103c4 <_fwalk_reent+0x38>
 80103b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80103b8:	3301      	adds	r3, #1
 80103ba:	d003      	beq.n	80103c4 <_fwalk_reent+0x38>
 80103bc:	4629      	mov	r1, r5
 80103be:	4640      	mov	r0, r8
 80103c0:	47c8      	blx	r9
 80103c2:	4306      	orrs	r6, r0
 80103c4:	3568      	adds	r5, #104	; 0x68
 80103c6:	e7ee      	b.n	80103a6 <_fwalk_reent+0x1a>

080103c8 <__swhatbuf_r>:
 80103c8:	b570      	push	{r4, r5, r6, lr}
 80103ca:	460e      	mov	r6, r1
 80103cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103d0:	2900      	cmp	r1, #0
 80103d2:	b096      	sub	sp, #88	; 0x58
 80103d4:	4614      	mov	r4, r2
 80103d6:	461d      	mov	r5, r3
 80103d8:	da07      	bge.n	80103ea <__swhatbuf_r+0x22>
 80103da:	2300      	movs	r3, #0
 80103dc:	602b      	str	r3, [r5, #0]
 80103de:	89b3      	ldrh	r3, [r6, #12]
 80103e0:	061a      	lsls	r2, r3, #24
 80103e2:	d410      	bmi.n	8010406 <__swhatbuf_r+0x3e>
 80103e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103e8:	e00e      	b.n	8010408 <__swhatbuf_r+0x40>
 80103ea:	466a      	mov	r2, sp
 80103ec:	f000 fc48 	bl	8010c80 <_fstat_r>
 80103f0:	2800      	cmp	r0, #0
 80103f2:	dbf2      	blt.n	80103da <__swhatbuf_r+0x12>
 80103f4:	9a01      	ldr	r2, [sp, #4]
 80103f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80103fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80103fe:	425a      	negs	r2, r3
 8010400:	415a      	adcs	r2, r3
 8010402:	602a      	str	r2, [r5, #0]
 8010404:	e7ee      	b.n	80103e4 <__swhatbuf_r+0x1c>
 8010406:	2340      	movs	r3, #64	; 0x40
 8010408:	2000      	movs	r0, #0
 801040a:	6023      	str	r3, [r4, #0]
 801040c:	b016      	add	sp, #88	; 0x58
 801040e:	bd70      	pop	{r4, r5, r6, pc}

08010410 <__smakebuf_r>:
 8010410:	898b      	ldrh	r3, [r1, #12]
 8010412:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010414:	079d      	lsls	r5, r3, #30
 8010416:	4606      	mov	r6, r0
 8010418:	460c      	mov	r4, r1
 801041a:	d507      	bpl.n	801042c <__smakebuf_r+0x1c>
 801041c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010420:	6023      	str	r3, [r4, #0]
 8010422:	6123      	str	r3, [r4, #16]
 8010424:	2301      	movs	r3, #1
 8010426:	6163      	str	r3, [r4, #20]
 8010428:	b002      	add	sp, #8
 801042a:	bd70      	pop	{r4, r5, r6, pc}
 801042c:	ab01      	add	r3, sp, #4
 801042e:	466a      	mov	r2, sp
 8010430:	f7ff ffca 	bl	80103c8 <__swhatbuf_r>
 8010434:	9900      	ldr	r1, [sp, #0]
 8010436:	4605      	mov	r5, r0
 8010438:	4630      	mov	r0, r6
 801043a:	f000 f877 	bl	801052c <_malloc_r>
 801043e:	b948      	cbnz	r0, 8010454 <__smakebuf_r+0x44>
 8010440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010444:	059a      	lsls	r2, r3, #22
 8010446:	d4ef      	bmi.n	8010428 <__smakebuf_r+0x18>
 8010448:	f023 0303 	bic.w	r3, r3, #3
 801044c:	f043 0302 	orr.w	r3, r3, #2
 8010450:	81a3      	strh	r3, [r4, #12]
 8010452:	e7e3      	b.n	801041c <__smakebuf_r+0xc>
 8010454:	4b0d      	ldr	r3, [pc, #52]	; (801048c <__smakebuf_r+0x7c>)
 8010456:	62b3      	str	r3, [r6, #40]	; 0x28
 8010458:	89a3      	ldrh	r3, [r4, #12]
 801045a:	6020      	str	r0, [r4, #0]
 801045c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010460:	81a3      	strh	r3, [r4, #12]
 8010462:	9b00      	ldr	r3, [sp, #0]
 8010464:	6163      	str	r3, [r4, #20]
 8010466:	9b01      	ldr	r3, [sp, #4]
 8010468:	6120      	str	r0, [r4, #16]
 801046a:	b15b      	cbz	r3, 8010484 <__smakebuf_r+0x74>
 801046c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010470:	4630      	mov	r0, r6
 8010472:	f000 fc17 	bl	8010ca4 <_isatty_r>
 8010476:	b128      	cbz	r0, 8010484 <__smakebuf_r+0x74>
 8010478:	89a3      	ldrh	r3, [r4, #12]
 801047a:	f023 0303 	bic.w	r3, r3, #3
 801047e:	f043 0301 	orr.w	r3, r3, #1
 8010482:	81a3      	strh	r3, [r4, #12]
 8010484:	89a3      	ldrh	r3, [r4, #12]
 8010486:	431d      	orrs	r5, r3
 8010488:	81a5      	strh	r5, [r4, #12]
 801048a:	e7cd      	b.n	8010428 <__smakebuf_r+0x18>
 801048c:	0801027d 	.word	0x0801027d

08010490 <_free_r>:
 8010490:	b538      	push	{r3, r4, r5, lr}
 8010492:	4605      	mov	r5, r0
 8010494:	2900      	cmp	r1, #0
 8010496:	d045      	beq.n	8010524 <_free_r+0x94>
 8010498:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801049c:	1f0c      	subs	r4, r1, #4
 801049e:	2b00      	cmp	r3, #0
 80104a0:	bfb8      	it	lt
 80104a2:	18e4      	addlt	r4, r4, r3
 80104a4:	f000 fc39 	bl	8010d1a <__malloc_lock>
 80104a8:	4a1f      	ldr	r2, [pc, #124]	; (8010528 <_free_r+0x98>)
 80104aa:	6813      	ldr	r3, [r2, #0]
 80104ac:	4610      	mov	r0, r2
 80104ae:	b933      	cbnz	r3, 80104be <_free_r+0x2e>
 80104b0:	6063      	str	r3, [r4, #4]
 80104b2:	6014      	str	r4, [r2, #0]
 80104b4:	4628      	mov	r0, r5
 80104b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80104ba:	f000 bc2f 	b.w	8010d1c <__malloc_unlock>
 80104be:	42a3      	cmp	r3, r4
 80104c0:	d90c      	bls.n	80104dc <_free_r+0x4c>
 80104c2:	6821      	ldr	r1, [r4, #0]
 80104c4:	1862      	adds	r2, r4, r1
 80104c6:	4293      	cmp	r3, r2
 80104c8:	bf04      	itt	eq
 80104ca:	681a      	ldreq	r2, [r3, #0]
 80104cc:	685b      	ldreq	r3, [r3, #4]
 80104ce:	6063      	str	r3, [r4, #4]
 80104d0:	bf04      	itt	eq
 80104d2:	1852      	addeq	r2, r2, r1
 80104d4:	6022      	streq	r2, [r4, #0]
 80104d6:	6004      	str	r4, [r0, #0]
 80104d8:	e7ec      	b.n	80104b4 <_free_r+0x24>
 80104da:	4613      	mov	r3, r2
 80104dc:	685a      	ldr	r2, [r3, #4]
 80104de:	b10a      	cbz	r2, 80104e4 <_free_r+0x54>
 80104e0:	42a2      	cmp	r2, r4
 80104e2:	d9fa      	bls.n	80104da <_free_r+0x4a>
 80104e4:	6819      	ldr	r1, [r3, #0]
 80104e6:	1858      	adds	r0, r3, r1
 80104e8:	42a0      	cmp	r0, r4
 80104ea:	d10b      	bne.n	8010504 <_free_r+0x74>
 80104ec:	6820      	ldr	r0, [r4, #0]
 80104ee:	4401      	add	r1, r0
 80104f0:	1858      	adds	r0, r3, r1
 80104f2:	4282      	cmp	r2, r0
 80104f4:	6019      	str	r1, [r3, #0]
 80104f6:	d1dd      	bne.n	80104b4 <_free_r+0x24>
 80104f8:	6810      	ldr	r0, [r2, #0]
 80104fa:	6852      	ldr	r2, [r2, #4]
 80104fc:	605a      	str	r2, [r3, #4]
 80104fe:	4401      	add	r1, r0
 8010500:	6019      	str	r1, [r3, #0]
 8010502:	e7d7      	b.n	80104b4 <_free_r+0x24>
 8010504:	d902      	bls.n	801050c <_free_r+0x7c>
 8010506:	230c      	movs	r3, #12
 8010508:	602b      	str	r3, [r5, #0]
 801050a:	e7d3      	b.n	80104b4 <_free_r+0x24>
 801050c:	6820      	ldr	r0, [r4, #0]
 801050e:	1821      	adds	r1, r4, r0
 8010510:	428a      	cmp	r2, r1
 8010512:	bf04      	itt	eq
 8010514:	6811      	ldreq	r1, [r2, #0]
 8010516:	6852      	ldreq	r2, [r2, #4]
 8010518:	6062      	str	r2, [r4, #4]
 801051a:	bf04      	itt	eq
 801051c:	1809      	addeq	r1, r1, r0
 801051e:	6021      	streq	r1, [r4, #0]
 8010520:	605c      	str	r4, [r3, #4]
 8010522:	e7c7      	b.n	80104b4 <_free_r+0x24>
 8010524:	bd38      	pop	{r3, r4, r5, pc}
 8010526:	bf00      	nop
 8010528:	20002fa0 	.word	0x20002fa0

0801052c <_malloc_r>:
 801052c:	b570      	push	{r4, r5, r6, lr}
 801052e:	1ccd      	adds	r5, r1, #3
 8010530:	f025 0503 	bic.w	r5, r5, #3
 8010534:	3508      	adds	r5, #8
 8010536:	2d0c      	cmp	r5, #12
 8010538:	bf38      	it	cc
 801053a:	250c      	movcc	r5, #12
 801053c:	2d00      	cmp	r5, #0
 801053e:	4606      	mov	r6, r0
 8010540:	db01      	blt.n	8010546 <_malloc_r+0x1a>
 8010542:	42a9      	cmp	r1, r5
 8010544:	d903      	bls.n	801054e <_malloc_r+0x22>
 8010546:	230c      	movs	r3, #12
 8010548:	6033      	str	r3, [r6, #0]
 801054a:	2000      	movs	r0, #0
 801054c:	bd70      	pop	{r4, r5, r6, pc}
 801054e:	f000 fbe4 	bl	8010d1a <__malloc_lock>
 8010552:	4a21      	ldr	r2, [pc, #132]	; (80105d8 <_malloc_r+0xac>)
 8010554:	6814      	ldr	r4, [r2, #0]
 8010556:	4621      	mov	r1, r4
 8010558:	b991      	cbnz	r1, 8010580 <_malloc_r+0x54>
 801055a:	4c20      	ldr	r4, [pc, #128]	; (80105dc <_malloc_r+0xb0>)
 801055c:	6823      	ldr	r3, [r4, #0]
 801055e:	b91b      	cbnz	r3, 8010568 <_malloc_r+0x3c>
 8010560:	4630      	mov	r0, r6
 8010562:	f000 fb17 	bl	8010b94 <_sbrk_r>
 8010566:	6020      	str	r0, [r4, #0]
 8010568:	4629      	mov	r1, r5
 801056a:	4630      	mov	r0, r6
 801056c:	f000 fb12 	bl	8010b94 <_sbrk_r>
 8010570:	1c43      	adds	r3, r0, #1
 8010572:	d124      	bne.n	80105be <_malloc_r+0x92>
 8010574:	230c      	movs	r3, #12
 8010576:	6033      	str	r3, [r6, #0]
 8010578:	4630      	mov	r0, r6
 801057a:	f000 fbcf 	bl	8010d1c <__malloc_unlock>
 801057e:	e7e4      	b.n	801054a <_malloc_r+0x1e>
 8010580:	680b      	ldr	r3, [r1, #0]
 8010582:	1b5b      	subs	r3, r3, r5
 8010584:	d418      	bmi.n	80105b8 <_malloc_r+0x8c>
 8010586:	2b0b      	cmp	r3, #11
 8010588:	d90f      	bls.n	80105aa <_malloc_r+0x7e>
 801058a:	600b      	str	r3, [r1, #0]
 801058c:	50cd      	str	r5, [r1, r3]
 801058e:	18cc      	adds	r4, r1, r3
 8010590:	4630      	mov	r0, r6
 8010592:	f000 fbc3 	bl	8010d1c <__malloc_unlock>
 8010596:	f104 000b 	add.w	r0, r4, #11
 801059a:	1d23      	adds	r3, r4, #4
 801059c:	f020 0007 	bic.w	r0, r0, #7
 80105a0:	1ac3      	subs	r3, r0, r3
 80105a2:	d0d3      	beq.n	801054c <_malloc_r+0x20>
 80105a4:	425a      	negs	r2, r3
 80105a6:	50e2      	str	r2, [r4, r3]
 80105a8:	e7d0      	b.n	801054c <_malloc_r+0x20>
 80105aa:	428c      	cmp	r4, r1
 80105ac:	684b      	ldr	r3, [r1, #4]
 80105ae:	bf16      	itet	ne
 80105b0:	6063      	strne	r3, [r4, #4]
 80105b2:	6013      	streq	r3, [r2, #0]
 80105b4:	460c      	movne	r4, r1
 80105b6:	e7eb      	b.n	8010590 <_malloc_r+0x64>
 80105b8:	460c      	mov	r4, r1
 80105ba:	6849      	ldr	r1, [r1, #4]
 80105bc:	e7cc      	b.n	8010558 <_malloc_r+0x2c>
 80105be:	1cc4      	adds	r4, r0, #3
 80105c0:	f024 0403 	bic.w	r4, r4, #3
 80105c4:	42a0      	cmp	r0, r4
 80105c6:	d005      	beq.n	80105d4 <_malloc_r+0xa8>
 80105c8:	1a21      	subs	r1, r4, r0
 80105ca:	4630      	mov	r0, r6
 80105cc:	f000 fae2 	bl	8010b94 <_sbrk_r>
 80105d0:	3001      	adds	r0, #1
 80105d2:	d0cf      	beq.n	8010574 <_malloc_r+0x48>
 80105d4:	6025      	str	r5, [r4, #0]
 80105d6:	e7db      	b.n	8010590 <_malloc_r+0x64>
 80105d8:	20002fa0 	.word	0x20002fa0
 80105dc:	20002fa4 	.word	0x20002fa4

080105e0 <__ssputs_r>:
 80105e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105e4:	688e      	ldr	r6, [r1, #8]
 80105e6:	429e      	cmp	r6, r3
 80105e8:	4682      	mov	sl, r0
 80105ea:	460c      	mov	r4, r1
 80105ec:	4690      	mov	r8, r2
 80105ee:	4699      	mov	r9, r3
 80105f0:	d837      	bhi.n	8010662 <__ssputs_r+0x82>
 80105f2:	898a      	ldrh	r2, [r1, #12]
 80105f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80105f8:	d031      	beq.n	801065e <__ssputs_r+0x7e>
 80105fa:	6825      	ldr	r5, [r4, #0]
 80105fc:	6909      	ldr	r1, [r1, #16]
 80105fe:	1a6f      	subs	r7, r5, r1
 8010600:	6965      	ldr	r5, [r4, #20]
 8010602:	2302      	movs	r3, #2
 8010604:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010608:	fb95 f5f3 	sdiv	r5, r5, r3
 801060c:	f109 0301 	add.w	r3, r9, #1
 8010610:	443b      	add	r3, r7
 8010612:	429d      	cmp	r5, r3
 8010614:	bf38      	it	cc
 8010616:	461d      	movcc	r5, r3
 8010618:	0553      	lsls	r3, r2, #21
 801061a:	d530      	bpl.n	801067e <__ssputs_r+0x9e>
 801061c:	4629      	mov	r1, r5
 801061e:	f7ff ff85 	bl	801052c <_malloc_r>
 8010622:	4606      	mov	r6, r0
 8010624:	b950      	cbnz	r0, 801063c <__ssputs_r+0x5c>
 8010626:	230c      	movs	r3, #12
 8010628:	f8ca 3000 	str.w	r3, [sl]
 801062c:	89a3      	ldrh	r3, [r4, #12]
 801062e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010632:	81a3      	strh	r3, [r4, #12]
 8010634:	f04f 30ff 	mov.w	r0, #4294967295
 8010638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801063c:	463a      	mov	r2, r7
 801063e:	6921      	ldr	r1, [r4, #16]
 8010640:	f7ff fbd4 	bl	800fdec <memcpy>
 8010644:	89a3      	ldrh	r3, [r4, #12]
 8010646:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801064a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801064e:	81a3      	strh	r3, [r4, #12]
 8010650:	6126      	str	r6, [r4, #16]
 8010652:	6165      	str	r5, [r4, #20]
 8010654:	443e      	add	r6, r7
 8010656:	1bed      	subs	r5, r5, r7
 8010658:	6026      	str	r6, [r4, #0]
 801065a:	60a5      	str	r5, [r4, #8]
 801065c:	464e      	mov	r6, r9
 801065e:	454e      	cmp	r6, r9
 8010660:	d900      	bls.n	8010664 <__ssputs_r+0x84>
 8010662:	464e      	mov	r6, r9
 8010664:	4632      	mov	r2, r6
 8010666:	4641      	mov	r1, r8
 8010668:	6820      	ldr	r0, [r4, #0]
 801066a:	f000 fb3d 	bl	8010ce8 <memmove>
 801066e:	68a3      	ldr	r3, [r4, #8]
 8010670:	1b9b      	subs	r3, r3, r6
 8010672:	60a3      	str	r3, [r4, #8]
 8010674:	6823      	ldr	r3, [r4, #0]
 8010676:	441e      	add	r6, r3
 8010678:	6026      	str	r6, [r4, #0]
 801067a:	2000      	movs	r0, #0
 801067c:	e7dc      	b.n	8010638 <__ssputs_r+0x58>
 801067e:	462a      	mov	r2, r5
 8010680:	f000 fb4d 	bl	8010d1e <_realloc_r>
 8010684:	4606      	mov	r6, r0
 8010686:	2800      	cmp	r0, #0
 8010688:	d1e2      	bne.n	8010650 <__ssputs_r+0x70>
 801068a:	6921      	ldr	r1, [r4, #16]
 801068c:	4650      	mov	r0, sl
 801068e:	f7ff feff 	bl	8010490 <_free_r>
 8010692:	e7c8      	b.n	8010626 <__ssputs_r+0x46>

08010694 <_svfiprintf_r>:
 8010694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010698:	461d      	mov	r5, r3
 801069a:	898b      	ldrh	r3, [r1, #12]
 801069c:	061f      	lsls	r7, r3, #24
 801069e:	b09d      	sub	sp, #116	; 0x74
 80106a0:	4680      	mov	r8, r0
 80106a2:	460c      	mov	r4, r1
 80106a4:	4616      	mov	r6, r2
 80106a6:	d50f      	bpl.n	80106c8 <_svfiprintf_r+0x34>
 80106a8:	690b      	ldr	r3, [r1, #16]
 80106aa:	b96b      	cbnz	r3, 80106c8 <_svfiprintf_r+0x34>
 80106ac:	2140      	movs	r1, #64	; 0x40
 80106ae:	f7ff ff3d 	bl	801052c <_malloc_r>
 80106b2:	6020      	str	r0, [r4, #0]
 80106b4:	6120      	str	r0, [r4, #16]
 80106b6:	b928      	cbnz	r0, 80106c4 <_svfiprintf_r+0x30>
 80106b8:	230c      	movs	r3, #12
 80106ba:	f8c8 3000 	str.w	r3, [r8]
 80106be:	f04f 30ff 	mov.w	r0, #4294967295
 80106c2:	e0c8      	b.n	8010856 <_svfiprintf_r+0x1c2>
 80106c4:	2340      	movs	r3, #64	; 0x40
 80106c6:	6163      	str	r3, [r4, #20]
 80106c8:	2300      	movs	r3, #0
 80106ca:	9309      	str	r3, [sp, #36]	; 0x24
 80106cc:	2320      	movs	r3, #32
 80106ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80106d2:	2330      	movs	r3, #48	; 0x30
 80106d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80106d8:	9503      	str	r5, [sp, #12]
 80106da:	f04f 0b01 	mov.w	fp, #1
 80106de:	4637      	mov	r7, r6
 80106e0:	463d      	mov	r5, r7
 80106e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80106e6:	b10b      	cbz	r3, 80106ec <_svfiprintf_r+0x58>
 80106e8:	2b25      	cmp	r3, #37	; 0x25
 80106ea:	d13e      	bne.n	801076a <_svfiprintf_r+0xd6>
 80106ec:	ebb7 0a06 	subs.w	sl, r7, r6
 80106f0:	d00b      	beq.n	801070a <_svfiprintf_r+0x76>
 80106f2:	4653      	mov	r3, sl
 80106f4:	4632      	mov	r2, r6
 80106f6:	4621      	mov	r1, r4
 80106f8:	4640      	mov	r0, r8
 80106fa:	f7ff ff71 	bl	80105e0 <__ssputs_r>
 80106fe:	3001      	adds	r0, #1
 8010700:	f000 80a4 	beq.w	801084c <_svfiprintf_r+0x1b8>
 8010704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010706:	4453      	add	r3, sl
 8010708:	9309      	str	r3, [sp, #36]	; 0x24
 801070a:	783b      	ldrb	r3, [r7, #0]
 801070c:	2b00      	cmp	r3, #0
 801070e:	f000 809d 	beq.w	801084c <_svfiprintf_r+0x1b8>
 8010712:	2300      	movs	r3, #0
 8010714:	f04f 32ff 	mov.w	r2, #4294967295
 8010718:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801071c:	9304      	str	r3, [sp, #16]
 801071e:	9307      	str	r3, [sp, #28]
 8010720:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010724:	931a      	str	r3, [sp, #104]	; 0x68
 8010726:	462f      	mov	r7, r5
 8010728:	2205      	movs	r2, #5
 801072a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801072e:	4850      	ldr	r0, [pc, #320]	; (8010870 <_svfiprintf_r+0x1dc>)
 8010730:	f7ef fd4e 	bl	80001d0 <memchr>
 8010734:	9b04      	ldr	r3, [sp, #16]
 8010736:	b9d0      	cbnz	r0, 801076e <_svfiprintf_r+0xda>
 8010738:	06d9      	lsls	r1, r3, #27
 801073a:	bf44      	itt	mi
 801073c:	2220      	movmi	r2, #32
 801073e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010742:	071a      	lsls	r2, r3, #28
 8010744:	bf44      	itt	mi
 8010746:	222b      	movmi	r2, #43	; 0x2b
 8010748:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801074c:	782a      	ldrb	r2, [r5, #0]
 801074e:	2a2a      	cmp	r2, #42	; 0x2a
 8010750:	d015      	beq.n	801077e <_svfiprintf_r+0xea>
 8010752:	9a07      	ldr	r2, [sp, #28]
 8010754:	462f      	mov	r7, r5
 8010756:	2000      	movs	r0, #0
 8010758:	250a      	movs	r5, #10
 801075a:	4639      	mov	r1, r7
 801075c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010760:	3b30      	subs	r3, #48	; 0x30
 8010762:	2b09      	cmp	r3, #9
 8010764:	d94d      	bls.n	8010802 <_svfiprintf_r+0x16e>
 8010766:	b1b8      	cbz	r0, 8010798 <_svfiprintf_r+0x104>
 8010768:	e00f      	b.n	801078a <_svfiprintf_r+0xf6>
 801076a:	462f      	mov	r7, r5
 801076c:	e7b8      	b.n	80106e0 <_svfiprintf_r+0x4c>
 801076e:	4a40      	ldr	r2, [pc, #256]	; (8010870 <_svfiprintf_r+0x1dc>)
 8010770:	1a80      	subs	r0, r0, r2
 8010772:	fa0b f000 	lsl.w	r0, fp, r0
 8010776:	4318      	orrs	r0, r3
 8010778:	9004      	str	r0, [sp, #16]
 801077a:	463d      	mov	r5, r7
 801077c:	e7d3      	b.n	8010726 <_svfiprintf_r+0x92>
 801077e:	9a03      	ldr	r2, [sp, #12]
 8010780:	1d11      	adds	r1, r2, #4
 8010782:	6812      	ldr	r2, [r2, #0]
 8010784:	9103      	str	r1, [sp, #12]
 8010786:	2a00      	cmp	r2, #0
 8010788:	db01      	blt.n	801078e <_svfiprintf_r+0xfa>
 801078a:	9207      	str	r2, [sp, #28]
 801078c:	e004      	b.n	8010798 <_svfiprintf_r+0x104>
 801078e:	4252      	negs	r2, r2
 8010790:	f043 0302 	orr.w	r3, r3, #2
 8010794:	9207      	str	r2, [sp, #28]
 8010796:	9304      	str	r3, [sp, #16]
 8010798:	783b      	ldrb	r3, [r7, #0]
 801079a:	2b2e      	cmp	r3, #46	; 0x2e
 801079c:	d10c      	bne.n	80107b8 <_svfiprintf_r+0x124>
 801079e:	787b      	ldrb	r3, [r7, #1]
 80107a0:	2b2a      	cmp	r3, #42	; 0x2a
 80107a2:	d133      	bne.n	801080c <_svfiprintf_r+0x178>
 80107a4:	9b03      	ldr	r3, [sp, #12]
 80107a6:	1d1a      	adds	r2, r3, #4
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	9203      	str	r2, [sp, #12]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	bfb8      	it	lt
 80107b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80107b4:	3702      	adds	r7, #2
 80107b6:	9305      	str	r3, [sp, #20]
 80107b8:	4d2e      	ldr	r5, [pc, #184]	; (8010874 <_svfiprintf_r+0x1e0>)
 80107ba:	7839      	ldrb	r1, [r7, #0]
 80107bc:	2203      	movs	r2, #3
 80107be:	4628      	mov	r0, r5
 80107c0:	f7ef fd06 	bl	80001d0 <memchr>
 80107c4:	b138      	cbz	r0, 80107d6 <_svfiprintf_r+0x142>
 80107c6:	2340      	movs	r3, #64	; 0x40
 80107c8:	1b40      	subs	r0, r0, r5
 80107ca:	fa03 f000 	lsl.w	r0, r3, r0
 80107ce:	9b04      	ldr	r3, [sp, #16]
 80107d0:	4303      	orrs	r3, r0
 80107d2:	3701      	adds	r7, #1
 80107d4:	9304      	str	r3, [sp, #16]
 80107d6:	7839      	ldrb	r1, [r7, #0]
 80107d8:	4827      	ldr	r0, [pc, #156]	; (8010878 <_svfiprintf_r+0x1e4>)
 80107da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80107de:	2206      	movs	r2, #6
 80107e0:	1c7e      	adds	r6, r7, #1
 80107e2:	f7ef fcf5 	bl	80001d0 <memchr>
 80107e6:	2800      	cmp	r0, #0
 80107e8:	d038      	beq.n	801085c <_svfiprintf_r+0x1c8>
 80107ea:	4b24      	ldr	r3, [pc, #144]	; (801087c <_svfiprintf_r+0x1e8>)
 80107ec:	bb13      	cbnz	r3, 8010834 <_svfiprintf_r+0x1a0>
 80107ee:	9b03      	ldr	r3, [sp, #12]
 80107f0:	3307      	adds	r3, #7
 80107f2:	f023 0307 	bic.w	r3, r3, #7
 80107f6:	3308      	adds	r3, #8
 80107f8:	9303      	str	r3, [sp, #12]
 80107fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107fc:	444b      	add	r3, r9
 80107fe:	9309      	str	r3, [sp, #36]	; 0x24
 8010800:	e76d      	b.n	80106de <_svfiprintf_r+0x4a>
 8010802:	fb05 3202 	mla	r2, r5, r2, r3
 8010806:	2001      	movs	r0, #1
 8010808:	460f      	mov	r7, r1
 801080a:	e7a6      	b.n	801075a <_svfiprintf_r+0xc6>
 801080c:	2300      	movs	r3, #0
 801080e:	3701      	adds	r7, #1
 8010810:	9305      	str	r3, [sp, #20]
 8010812:	4619      	mov	r1, r3
 8010814:	250a      	movs	r5, #10
 8010816:	4638      	mov	r0, r7
 8010818:	f810 2b01 	ldrb.w	r2, [r0], #1
 801081c:	3a30      	subs	r2, #48	; 0x30
 801081e:	2a09      	cmp	r2, #9
 8010820:	d903      	bls.n	801082a <_svfiprintf_r+0x196>
 8010822:	2b00      	cmp	r3, #0
 8010824:	d0c8      	beq.n	80107b8 <_svfiprintf_r+0x124>
 8010826:	9105      	str	r1, [sp, #20]
 8010828:	e7c6      	b.n	80107b8 <_svfiprintf_r+0x124>
 801082a:	fb05 2101 	mla	r1, r5, r1, r2
 801082e:	2301      	movs	r3, #1
 8010830:	4607      	mov	r7, r0
 8010832:	e7f0      	b.n	8010816 <_svfiprintf_r+0x182>
 8010834:	ab03      	add	r3, sp, #12
 8010836:	9300      	str	r3, [sp, #0]
 8010838:	4622      	mov	r2, r4
 801083a:	4b11      	ldr	r3, [pc, #68]	; (8010880 <_svfiprintf_r+0x1ec>)
 801083c:	a904      	add	r1, sp, #16
 801083e:	4640      	mov	r0, r8
 8010840:	f3af 8000 	nop.w
 8010844:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010848:	4681      	mov	r9, r0
 801084a:	d1d6      	bne.n	80107fa <_svfiprintf_r+0x166>
 801084c:	89a3      	ldrh	r3, [r4, #12]
 801084e:	065b      	lsls	r3, r3, #25
 8010850:	f53f af35 	bmi.w	80106be <_svfiprintf_r+0x2a>
 8010854:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010856:	b01d      	add	sp, #116	; 0x74
 8010858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801085c:	ab03      	add	r3, sp, #12
 801085e:	9300      	str	r3, [sp, #0]
 8010860:	4622      	mov	r2, r4
 8010862:	4b07      	ldr	r3, [pc, #28]	; (8010880 <_svfiprintf_r+0x1ec>)
 8010864:	a904      	add	r1, sp, #16
 8010866:	4640      	mov	r0, r8
 8010868:	f000 f882 	bl	8010970 <_printf_i>
 801086c:	e7ea      	b.n	8010844 <_svfiprintf_r+0x1b0>
 801086e:	bf00      	nop
 8010870:	080115dc 	.word	0x080115dc
 8010874:	080115e2 	.word	0x080115e2
 8010878:	080115e6 	.word	0x080115e6
 801087c:	00000000 	.word	0x00000000
 8010880:	080105e1 	.word	0x080105e1

08010884 <_printf_common>:
 8010884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010888:	4691      	mov	r9, r2
 801088a:	461f      	mov	r7, r3
 801088c:	688a      	ldr	r2, [r1, #8]
 801088e:	690b      	ldr	r3, [r1, #16]
 8010890:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010894:	4293      	cmp	r3, r2
 8010896:	bfb8      	it	lt
 8010898:	4613      	movlt	r3, r2
 801089a:	f8c9 3000 	str.w	r3, [r9]
 801089e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80108a2:	4606      	mov	r6, r0
 80108a4:	460c      	mov	r4, r1
 80108a6:	b112      	cbz	r2, 80108ae <_printf_common+0x2a>
 80108a8:	3301      	adds	r3, #1
 80108aa:	f8c9 3000 	str.w	r3, [r9]
 80108ae:	6823      	ldr	r3, [r4, #0]
 80108b0:	0699      	lsls	r1, r3, #26
 80108b2:	bf42      	ittt	mi
 80108b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80108b8:	3302      	addmi	r3, #2
 80108ba:	f8c9 3000 	strmi.w	r3, [r9]
 80108be:	6825      	ldr	r5, [r4, #0]
 80108c0:	f015 0506 	ands.w	r5, r5, #6
 80108c4:	d107      	bne.n	80108d6 <_printf_common+0x52>
 80108c6:	f104 0a19 	add.w	sl, r4, #25
 80108ca:	68e3      	ldr	r3, [r4, #12]
 80108cc:	f8d9 2000 	ldr.w	r2, [r9]
 80108d0:	1a9b      	subs	r3, r3, r2
 80108d2:	42ab      	cmp	r3, r5
 80108d4:	dc28      	bgt.n	8010928 <_printf_common+0xa4>
 80108d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80108da:	6822      	ldr	r2, [r4, #0]
 80108dc:	3300      	adds	r3, #0
 80108de:	bf18      	it	ne
 80108e0:	2301      	movne	r3, #1
 80108e2:	0692      	lsls	r2, r2, #26
 80108e4:	d42d      	bmi.n	8010942 <_printf_common+0xbe>
 80108e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80108ea:	4639      	mov	r1, r7
 80108ec:	4630      	mov	r0, r6
 80108ee:	47c0      	blx	r8
 80108f0:	3001      	adds	r0, #1
 80108f2:	d020      	beq.n	8010936 <_printf_common+0xb2>
 80108f4:	6823      	ldr	r3, [r4, #0]
 80108f6:	68e5      	ldr	r5, [r4, #12]
 80108f8:	f8d9 2000 	ldr.w	r2, [r9]
 80108fc:	f003 0306 	and.w	r3, r3, #6
 8010900:	2b04      	cmp	r3, #4
 8010902:	bf08      	it	eq
 8010904:	1aad      	subeq	r5, r5, r2
 8010906:	68a3      	ldr	r3, [r4, #8]
 8010908:	6922      	ldr	r2, [r4, #16]
 801090a:	bf0c      	ite	eq
 801090c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010910:	2500      	movne	r5, #0
 8010912:	4293      	cmp	r3, r2
 8010914:	bfc4      	itt	gt
 8010916:	1a9b      	subgt	r3, r3, r2
 8010918:	18ed      	addgt	r5, r5, r3
 801091a:	f04f 0900 	mov.w	r9, #0
 801091e:	341a      	adds	r4, #26
 8010920:	454d      	cmp	r5, r9
 8010922:	d11a      	bne.n	801095a <_printf_common+0xd6>
 8010924:	2000      	movs	r0, #0
 8010926:	e008      	b.n	801093a <_printf_common+0xb6>
 8010928:	2301      	movs	r3, #1
 801092a:	4652      	mov	r2, sl
 801092c:	4639      	mov	r1, r7
 801092e:	4630      	mov	r0, r6
 8010930:	47c0      	blx	r8
 8010932:	3001      	adds	r0, #1
 8010934:	d103      	bne.n	801093e <_printf_common+0xba>
 8010936:	f04f 30ff 	mov.w	r0, #4294967295
 801093a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801093e:	3501      	adds	r5, #1
 8010940:	e7c3      	b.n	80108ca <_printf_common+0x46>
 8010942:	18e1      	adds	r1, r4, r3
 8010944:	1c5a      	adds	r2, r3, #1
 8010946:	2030      	movs	r0, #48	; 0x30
 8010948:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801094c:	4422      	add	r2, r4
 801094e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010952:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010956:	3302      	adds	r3, #2
 8010958:	e7c5      	b.n	80108e6 <_printf_common+0x62>
 801095a:	2301      	movs	r3, #1
 801095c:	4622      	mov	r2, r4
 801095e:	4639      	mov	r1, r7
 8010960:	4630      	mov	r0, r6
 8010962:	47c0      	blx	r8
 8010964:	3001      	adds	r0, #1
 8010966:	d0e6      	beq.n	8010936 <_printf_common+0xb2>
 8010968:	f109 0901 	add.w	r9, r9, #1
 801096c:	e7d8      	b.n	8010920 <_printf_common+0x9c>
	...

08010970 <_printf_i>:
 8010970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010974:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010978:	460c      	mov	r4, r1
 801097a:	7e09      	ldrb	r1, [r1, #24]
 801097c:	b085      	sub	sp, #20
 801097e:	296e      	cmp	r1, #110	; 0x6e
 8010980:	4617      	mov	r7, r2
 8010982:	4606      	mov	r6, r0
 8010984:	4698      	mov	r8, r3
 8010986:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010988:	f000 80b3 	beq.w	8010af2 <_printf_i+0x182>
 801098c:	d822      	bhi.n	80109d4 <_printf_i+0x64>
 801098e:	2963      	cmp	r1, #99	; 0x63
 8010990:	d036      	beq.n	8010a00 <_printf_i+0x90>
 8010992:	d80a      	bhi.n	80109aa <_printf_i+0x3a>
 8010994:	2900      	cmp	r1, #0
 8010996:	f000 80b9 	beq.w	8010b0c <_printf_i+0x19c>
 801099a:	2958      	cmp	r1, #88	; 0x58
 801099c:	f000 8083 	beq.w	8010aa6 <_printf_i+0x136>
 80109a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80109a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80109a8:	e032      	b.n	8010a10 <_printf_i+0xa0>
 80109aa:	2964      	cmp	r1, #100	; 0x64
 80109ac:	d001      	beq.n	80109b2 <_printf_i+0x42>
 80109ae:	2969      	cmp	r1, #105	; 0x69
 80109b0:	d1f6      	bne.n	80109a0 <_printf_i+0x30>
 80109b2:	6820      	ldr	r0, [r4, #0]
 80109b4:	6813      	ldr	r3, [r2, #0]
 80109b6:	0605      	lsls	r5, r0, #24
 80109b8:	f103 0104 	add.w	r1, r3, #4
 80109bc:	d52a      	bpl.n	8010a14 <_printf_i+0xa4>
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	6011      	str	r1, [r2, #0]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	da03      	bge.n	80109ce <_printf_i+0x5e>
 80109c6:	222d      	movs	r2, #45	; 0x2d
 80109c8:	425b      	negs	r3, r3
 80109ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80109ce:	486f      	ldr	r0, [pc, #444]	; (8010b8c <_printf_i+0x21c>)
 80109d0:	220a      	movs	r2, #10
 80109d2:	e039      	b.n	8010a48 <_printf_i+0xd8>
 80109d4:	2973      	cmp	r1, #115	; 0x73
 80109d6:	f000 809d 	beq.w	8010b14 <_printf_i+0x1a4>
 80109da:	d808      	bhi.n	80109ee <_printf_i+0x7e>
 80109dc:	296f      	cmp	r1, #111	; 0x6f
 80109de:	d020      	beq.n	8010a22 <_printf_i+0xb2>
 80109e0:	2970      	cmp	r1, #112	; 0x70
 80109e2:	d1dd      	bne.n	80109a0 <_printf_i+0x30>
 80109e4:	6823      	ldr	r3, [r4, #0]
 80109e6:	f043 0320 	orr.w	r3, r3, #32
 80109ea:	6023      	str	r3, [r4, #0]
 80109ec:	e003      	b.n	80109f6 <_printf_i+0x86>
 80109ee:	2975      	cmp	r1, #117	; 0x75
 80109f0:	d017      	beq.n	8010a22 <_printf_i+0xb2>
 80109f2:	2978      	cmp	r1, #120	; 0x78
 80109f4:	d1d4      	bne.n	80109a0 <_printf_i+0x30>
 80109f6:	2378      	movs	r3, #120	; 0x78
 80109f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80109fc:	4864      	ldr	r0, [pc, #400]	; (8010b90 <_printf_i+0x220>)
 80109fe:	e055      	b.n	8010aac <_printf_i+0x13c>
 8010a00:	6813      	ldr	r3, [r2, #0]
 8010a02:	1d19      	adds	r1, r3, #4
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	6011      	str	r1, [r2, #0]
 8010a08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010a0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010a10:	2301      	movs	r3, #1
 8010a12:	e08c      	b.n	8010b2e <_printf_i+0x1be>
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	6011      	str	r1, [r2, #0]
 8010a18:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010a1c:	bf18      	it	ne
 8010a1e:	b21b      	sxthne	r3, r3
 8010a20:	e7cf      	b.n	80109c2 <_printf_i+0x52>
 8010a22:	6813      	ldr	r3, [r2, #0]
 8010a24:	6825      	ldr	r5, [r4, #0]
 8010a26:	1d18      	adds	r0, r3, #4
 8010a28:	6010      	str	r0, [r2, #0]
 8010a2a:	0628      	lsls	r0, r5, #24
 8010a2c:	d501      	bpl.n	8010a32 <_printf_i+0xc2>
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	e002      	b.n	8010a38 <_printf_i+0xc8>
 8010a32:	0668      	lsls	r0, r5, #25
 8010a34:	d5fb      	bpl.n	8010a2e <_printf_i+0xbe>
 8010a36:	881b      	ldrh	r3, [r3, #0]
 8010a38:	4854      	ldr	r0, [pc, #336]	; (8010b8c <_printf_i+0x21c>)
 8010a3a:	296f      	cmp	r1, #111	; 0x6f
 8010a3c:	bf14      	ite	ne
 8010a3e:	220a      	movne	r2, #10
 8010a40:	2208      	moveq	r2, #8
 8010a42:	2100      	movs	r1, #0
 8010a44:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010a48:	6865      	ldr	r5, [r4, #4]
 8010a4a:	60a5      	str	r5, [r4, #8]
 8010a4c:	2d00      	cmp	r5, #0
 8010a4e:	f2c0 8095 	blt.w	8010b7c <_printf_i+0x20c>
 8010a52:	6821      	ldr	r1, [r4, #0]
 8010a54:	f021 0104 	bic.w	r1, r1, #4
 8010a58:	6021      	str	r1, [r4, #0]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d13d      	bne.n	8010ada <_printf_i+0x16a>
 8010a5e:	2d00      	cmp	r5, #0
 8010a60:	f040 808e 	bne.w	8010b80 <_printf_i+0x210>
 8010a64:	4665      	mov	r5, ip
 8010a66:	2a08      	cmp	r2, #8
 8010a68:	d10b      	bne.n	8010a82 <_printf_i+0x112>
 8010a6a:	6823      	ldr	r3, [r4, #0]
 8010a6c:	07db      	lsls	r3, r3, #31
 8010a6e:	d508      	bpl.n	8010a82 <_printf_i+0x112>
 8010a70:	6923      	ldr	r3, [r4, #16]
 8010a72:	6862      	ldr	r2, [r4, #4]
 8010a74:	429a      	cmp	r2, r3
 8010a76:	bfde      	ittt	le
 8010a78:	2330      	movle	r3, #48	; 0x30
 8010a7a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010a7e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010a82:	ebac 0305 	sub.w	r3, ip, r5
 8010a86:	6123      	str	r3, [r4, #16]
 8010a88:	f8cd 8000 	str.w	r8, [sp]
 8010a8c:	463b      	mov	r3, r7
 8010a8e:	aa03      	add	r2, sp, #12
 8010a90:	4621      	mov	r1, r4
 8010a92:	4630      	mov	r0, r6
 8010a94:	f7ff fef6 	bl	8010884 <_printf_common>
 8010a98:	3001      	adds	r0, #1
 8010a9a:	d14d      	bne.n	8010b38 <_printf_i+0x1c8>
 8010a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8010aa0:	b005      	add	sp, #20
 8010aa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010aa6:	4839      	ldr	r0, [pc, #228]	; (8010b8c <_printf_i+0x21c>)
 8010aa8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010aac:	6813      	ldr	r3, [r2, #0]
 8010aae:	6821      	ldr	r1, [r4, #0]
 8010ab0:	1d1d      	adds	r5, r3, #4
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	6015      	str	r5, [r2, #0]
 8010ab6:	060a      	lsls	r2, r1, #24
 8010ab8:	d50b      	bpl.n	8010ad2 <_printf_i+0x162>
 8010aba:	07ca      	lsls	r2, r1, #31
 8010abc:	bf44      	itt	mi
 8010abe:	f041 0120 	orrmi.w	r1, r1, #32
 8010ac2:	6021      	strmi	r1, [r4, #0]
 8010ac4:	b91b      	cbnz	r3, 8010ace <_printf_i+0x15e>
 8010ac6:	6822      	ldr	r2, [r4, #0]
 8010ac8:	f022 0220 	bic.w	r2, r2, #32
 8010acc:	6022      	str	r2, [r4, #0]
 8010ace:	2210      	movs	r2, #16
 8010ad0:	e7b7      	b.n	8010a42 <_printf_i+0xd2>
 8010ad2:	064d      	lsls	r5, r1, #25
 8010ad4:	bf48      	it	mi
 8010ad6:	b29b      	uxthmi	r3, r3
 8010ad8:	e7ef      	b.n	8010aba <_printf_i+0x14a>
 8010ada:	4665      	mov	r5, ip
 8010adc:	fbb3 f1f2 	udiv	r1, r3, r2
 8010ae0:	fb02 3311 	mls	r3, r2, r1, r3
 8010ae4:	5cc3      	ldrb	r3, [r0, r3]
 8010ae6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010aea:	460b      	mov	r3, r1
 8010aec:	2900      	cmp	r1, #0
 8010aee:	d1f5      	bne.n	8010adc <_printf_i+0x16c>
 8010af0:	e7b9      	b.n	8010a66 <_printf_i+0xf6>
 8010af2:	6813      	ldr	r3, [r2, #0]
 8010af4:	6825      	ldr	r5, [r4, #0]
 8010af6:	6961      	ldr	r1, [r4, #20]
 8010af8:	1d18      	adds	r0, r3, #4
 8010afa:	6010      	str	r0, [r2, #0]
 8010afc:	0628      	lsls	r0, r5, #24
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	d501      	bpl.n	8010b06 <_printf_i+0x196>
 8010b02:	6019      	str	r1, [r3, #0]
 8010b04:	e002      	b.n	8010b0c <_printf_i+0x19c>
 8010b06:	066a      	lsls	r2, r5, #25
 8010b08:	d5fb      	bpl.n	8010b02 <_printf_i+0x192>
 8010b0a:	8019      	strh	r1, [r3, #0]
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	6123      	str	r3, [r4, #16]
 8010b10:	4665      	mov	r5, ip
 8010b12:	e7b9      	b.n	8010a88 <_printf_i+0x118>
 8010b14:	6813      	ldr	r3, [r2, #0]
 8010b16:	1d19      	adds	r1, r3, #4
 8010b18:	6011      	str	r1, [r2, #0]
 8010b1a:	681d      	ldr	r5, [r3, #0]
 8010b1c:	6862      	ldr	r2, [r4, #4]
 8010b1e:	2100      	movs	r1, #0
 8010b20:	4628      	mov	r0, r5
 8010b22:	f7ef fb55 	bl	80001d0 <memchr>
 8010b26:	b108      	cbz	r0, 8010b2c <_printf_i+0x1bc>
 8010b28:	1b40      	subs	r0, r0, r5
 8010b2a:	6060      	str	r0, [r4, #4]
 8010b2c:	6863      	ldr	r3, [r4, #4]
 8010b2e:	6123      	str	r3, [r4, #16]
 8010b30:	2300      	movs	r3, #0
 8010b32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b36:	e7a7      	b.n	8010a88 <_printf_i+0x118>
 8010b38:	6923      	ldr	r3, [r4, #16]
 8010b3a:	462a      	mov	r2, r5
 8010b3c:	4639      	mov	r1, r7
 8010b3e:	4630      	mov	r0, r6
 8010b40:	47c0      	blx	r8
 8010b42:	3001      	adds	r0, #1
 8010b44:	d0aa      	beq.n	8010a9c <_printf_i+0x12c>
 8010b46:	6823      	ldr	r3, [r4, #0]
 8010b48:	079b      	lsls	r3, r3, #30
 8010b4a:	d413      	bmi.n	8010b74 <_printf_i+0x204>
 8010b4c:	68e0      	ldr	r0, [r4, #12]
 8010b4e:	9b03      	ldr	r3, [sp, #12]
 8010b50:	4298      	cmp	r0, r3
 8010b52:	bfb8      	it	lt
 8010b54:	4618      	movlt	r0, r3
 8010b56:	e7a3      	b.n	8010aa0 <_printf_i+0x130>
 8010b58:	2301      	movs	r3, #1
 8010b5a:	464a      	mov	r2, r9
 8010b5c:	4639      	mov	r1, r7
 8010b5e:	4630      	mov	r0, r6
 8010b60:	47c0      	blx	r8
 8010b62:	3001      	adds	r0, #1
 8010b64:	d09a      	beq.n	8010a9c <_printf_i+0x12c>
 8010b66:	3501      	adds	r5, #1
 8010b68:	68e3      	ldr	r3, [r4, #12]
 8010b6a:	9a03      	ldr	r2, [sp, #12]
 8010b6c:	1a9b      	subs	r3, r3, r2
 8010b6e:	42ab      	cmp	r3, r5
 8010b70:	dcf2      	bgt.n	8010b58 <_printf_i+0x1e8>
 8010b72:	e7eb      	b.n	8010b4c <_printf_i+0x1dc>
 8010b74:	2500      	movs	r5, #0
 8010b76:	f104 0919 	add.w	r9, r4, #25
 8010b7a:	e7f5      	b.n	8010b68 <_printf_i+0x1f8>
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d1ac      	bne.n	8010ada <_printf_i+0x16a>
 8010b80:	7803      	ldrb	r3, [r0, #0]
 8010b82:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010b86:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010b8a:	e76c      	b.n	8010a66 <_printf_i+0xf6>
 8010b8c:	080115ed 	.word	0x080115ed
 8010b90:	080115fe 	.word	0x080115fe

08010b94 <_sbrk_r>:
 8010b94:	b538      	push	{r3, r4, r5, lr}
 8010b96:	4c06      	ldr	r4, [pc, #24]	; (8010bb0 <_sbrk_r+0x1c>)
 8010b98:	2300      	movs	r3, #0
 8010b9a:	4605      	mov	r5, r0
 8010b9c:	4608      	mov	r0, r1
 8010b9e:	6023      	str	r3, [r4, #0]
 8010ba0:	f7f1 fa58 	bl	8002054 <_sbrk>
 8010ba4:	1c43      	adds	r3, r0, #1
 8010ba6:	d102      	bne.n	8010bae <_sbrk_r+0x1a>
 8010ba8:	6823      	ldr	r3, [r4, #0]
 8010baa:	b103      	cbz	r3, 8010bae <_sbrk_r+0x1a>
 8010bac:	602b      	str	r3, [r5, #0]
 8010bae:	bd38      	pop	{r3, r4, r5, pc}
 8010bb0:	20003844 	.word	0x20003844

08010bb4 <__sread>:
 8010bb4:	b510      	push	{r4, lr}
 8010bb6:	460c      	mov	r4, r1
 8010bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bbc:	f000 f8d6 	bl	8010d6c <_read_r>
 8010bc0:	2800      	cmp	r0, #0
 8010bc2:	bfab      	itete	ge
 8010bc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010bc6:	89a3      	ldrhlt	r3, [r4, #12]
 8010bc8:	181b      	addge	r3, r3, r0
 8010bca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010bce:	bfac      	ite	ge
 8010bd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8010bd2:	81a3      	strhlt	r3, [r4, #12]
 8010bd4:	bd10      	pop	{r4, pc}

08010bd6 <__swrite>:
 8010bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bda:	461f      	mov	r7, r3
 8010bdc:	898b      	ldrh	r3, [r1, #12]
 8010bde:	05db      	lsls	r3, r3, #23
 8010be0:	4605      	mov	r5, r0
 8010be2:	460c      	mov	r4, r1
 8010be4:	4616      	mov	r6, r2
 8010be6:	d505      	bpl.n	8010bf4 <__swrite+0x1e>
 8010be8:	2302      	movs	r3, #2
 8010bea:	2200      	movs	r2, #0
 8010bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bf0:	f000 f868 	bl	8010cc4 <_lseek_r>
 8010bf4:	89a3      	ldrh	r3, [r4, #12]
 8010bf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010bfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010bfe:	81a3      	strh	r3, [r4, #12]
 8010c00:	4632      	mov	r2, r6
 8010c02:	463b      	mov	r3, r7
 8010c04:	4628      	mov	r0, r5
 8010c06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010c0a:	f000 b817 	b.w	8010c3c <_write_r>

08010c0e <__sseek>:
 8010c0e:	b510      	push	{r4, lr}
 8010c10:	460c      	mov	r4, r1
 8010c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c16:	f000 f855 	bl	8010cc4 <_lseek_r>
 8010c1a:	1c43      	adds	r3, r0, #1
 8010c1c:	89a3      	ldrh	r3, [r4, #12]
 8010c1e:	bf15      	itete	ne
 8010c20:	6560      	strne	r0, [r4, #84]	; 0x54
 8010c22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010c26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010c2a:	81a3      	strheq	r3, [r4, #12]
 8010c2c:	bf18      	it	ne
 8010c2e:	81a3      	strhne	r3, [r4, #12]
 8010c30:	bd10      	pop	{r4, pc}

08010c32 <__sclose>:
 8010c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c36:	f000 b813 	b.w	8010c60 <_close_r>
	...

08010c3c <_write_r>:
 8010c3c:	b538      	push	{r3, r4, r5, lr}
 8010c3e:	4c07      	ldr	r4, [pc, #28]	; (8010c5c <_write_r+0x20>)
 8010c40:	4605      	mov	r5, r0
 8010c42:	4608      	mov	r0, r1
 8010c44:	4611      	mov	r1, r2
 8010c46:	2200      	movs	r2, #0
 8010c48:	6022      	str	r2, [r4, #0]
 8010c4a:	461a      	mov	r2, r3
 8010c4c:	f7f1 f9b1 	bl	8001fb2 <_write>
 8010c50:	1c43      	adds	r3, r0, #1
 8010c52:	d102      	bne.n	8010c5a <_write_r+0x1e>
 8010c54:	6823      	ldr	r3, [r4, #0]
 8010c56:	b103      	cbz	r3, 8010c5a <_write_r+0x1e>
 8010c58:	602b      	str	r3, [r5, #0]
 8010c5a:	bd38      	pop	{r3, r4, r5, pc}
 8010c5c:	20003844 	.word	0x20003844

08010c60 <_close_r>:
 8010c60:	b538      	push	{r3, r4, r5, lr}
 8010c62:	4c06      	ldr	r4, [pc, #24]	; (8010c7c <_close_r+0x1c>)
 8010c64:	2300      	movs	r3, #0
 8010c66:	4605      	mov	r5, r0
 8010c68:	4608      	mov	r0, r1
 8010c6a:	6023      	str	r3, [r4, #0]
 8010c6c:	f7f1 f9bd 	bl	8001fea <_close>
 8010c70:	1c43      	adds	r3, r0, #1
 8010c72:	d102      	bne.n	8010c7a <_close_r+0x1a>
 8010c74:	6823      	ldr	r3, [r4, #0]
 8010c76:	b103      	cbz	r3, 8010c7a <_close_r+0x1a>
 8010c78:	602b      	str	r3, [r5, #0]
 8010c7a:	bd38      	pop	{r3, r4, r5, pc}
 8010c7c:	20003844 	.word	0x20003844

08010c80 <_fstat_r>:
 8010c80:	b538      	push	{r3, r4, r5, lr}
 8010c82:	4c07      	ldr	r4, [pc, #28]	; (8010ca0 <_fstat_r+0x20>)
 8010c84:	2300      	movs	r3, #0
 8010c86:	4605      	mov	r5, r0
 8010c88:	4608      	mov	r0, r1
 8010c8a:	4611      	mov	r1, r2
 8010c8c:	6023      	str	r3, [r4, #0]
 8010c8e:	f7f1 f9b8 	bl	8002002 <_fstat>
 8010c92:	1c43      	adds	r3, r0, #1
 8010c94:	d102      	bne.n	8010c9c <_fstat_r+0x1c>
 8010c96:	6823      	ldr	r3, [r4, #0]
 8010c98:	b103      	cbz	r3, 8010c9c <_fstat_r+0x1c>
 8010c9a:	602b      	str	r3, [r5, #0]
 8010c9c:	bd38      	pop	{r3, r4, r5, pc}
 8010c9e:	bf00      	nop
 8010ca0:	20003844 	.word	0x20003844

08010ca4 <_isatty_r>:
 8010ca4:	b538      	push	{r3, r4, r5, lr}
 8010ca6:	4c06      	ldr	r4, [pc, #24]	; (8010cc0 <_isatty_r+0x1c>)
 8010ca8:	2300      	movs	r3, #0
 8010caa:	4605      	mov	r5, r0
 8010cac:	4608      	mov	r0, r1
 8010cae:	6023      	str	r3, [r4, #0]
 8010cb0:	f7f1 f9b7 	bl	8002022 <_isatty>
 8010cb4:	1c43      	adds	r3, r0, #1
 8010cb6:	d102      	bne.n	8010cbe <_isatty_r+0x1a>
 8010cb8:	6823      	ldr	r3, [r4, #0]
 8010cba:	b103      	cbz	r3, 8010cbe <_isatty_r+0x1a>
 8010cbc:	602b      	str	r3, [r5, #0]
 8010cbe:	bd38      	pop	{r3, r4, r5, pc}
 8010cc0:	20003844 	.word	0x20003844

08010cc4 <_lseek_r>:
 8010cc4:	b538      	push	{r3, r4, r5, lr}
 8010cc6:	4c07      	ldr	r4, [pc, #28]	; (8010ce4 <_lseek_r+0x20>)
 8010cc8:	4605      	mov	r5, r0
 8010cca:	4608      	mov	r0, r1
 8010ccc:	4611      	mov	r1, r2
 8010cce:	2200      	movs	r2, #0
 8010cd0:	6022      	str	r2, [r4, #0]
 8010cd2:	461a      	mov	r2, r3
 8010cd4:	f7f1 f9b0 	bl	8002038 <_lseek>
 8010cd8:	1c43      	adds	r3, r0, #1
 8010cda:	d102      	bne.n	8010ce2 <_lseek_r+0x1e>
 8010cdc:	6823      	ldr	r3, [r4, #0]
 8010cde:	b103      	cbz	r3, 8010ce2 <_lseek_r+0x1e>
 8010ce0:	602b      	str	r3, [r5, #0]
 8010ce2:	bd38      	pop	{r3, r4, r5, pc}
 8010ce4:	20003844 	.word	0x20003844

08010ce8 <memmove>:
 8010ce8:	4288      	cmp	r0, r1
 8010cea:	b510      	push	{r4, lr}
 8010cec:	eb01 0302 	add.w	r3, r1, r2
 8010cf0:	d807      	bhi.n	8010d02 <memmove+0x1a>
 8010cf2:	1e42      	subs	r2, r0, #1
 8010cf4:	4299      	cmp	r1, r3
 8010cf6:	d00a      	beq.n	8010d0e <memmove+0x26>
 8010cf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010cfc:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010d00:	e7f8      	b.n	8010cf4 <memmove+0xc>
 8010d02:	4283      	cmp	r3, r0
 8010d04:	d9f5      	bls.n	8010cf2 <memmove+0xa>
 8010d06:	1881      	adds	r1, r0, r2
 8010d08:	1ad2      	subs	r2, r2, r3
 8010d0a:	42d3      	cmn	r3, r2
 8010d0c:	d100      	bne.n	8010d10 <memmove+0x28>
 8010d0e:	bd10      	pop	{r4, pc}
 8010d10:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010d14:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010d18:	e7f7      	b.n	8010d0a <memmove+0x22>

08010d1a <__malloc_lock>:
 8010d1a:	4770      	bx	lr

08010d1c <__malloc_unlock>:
 8010d1c:	4770      	bx	lr

08010d1e <_realloc_r>:
 8010d1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d20:	4607      	mov	r7, r0
 8010d22:	4614      	mov	r4, r2
 8010d24:	460e      	mov	r6, r1
 8010d26:	b921      	cbnz	r1, 8010d32 <_realloc_r+0x14>
 8010d28:	4611      	mov	r1, r2
 8010d2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010d2e:	f7ff bbfd 	b.w	801052c <_malloc_r>
 8010d32:	b922      	cbnz	r2, 8010d3e <_realloc_r+0x20>
 8010d34:	f7ff fbac 	bl	8010490 <_free_r>
 8010d38:	4625      	mov	r5, r4
 8010d3a:	4628      	mov	r0, r5
 8010d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d3e:	f000 f827 	bl	8010d90 <_malloc_usable_size_r>
 8010d42:	42a0      	cmp	r0, r4
 8010d44:	d20f      	bcs.n	8010d66 <_realloc_r+0x48>
 8010d46:	4621      	mov	r1, r4
 8010d48:	4638      	mov	r0, r7
 8010d4a:	f7ff fbef 	bl	801052c <_malloc_r>
 8010d4e:	4605      	mov	r5, r0
 8010d50:	2800      	cmp	r0, #0
 8010d52:	d0f2      	beq.n	8010d3a <_realloc_r+0x1c>
 8010d54:	4631      	mov	r1, r6
 8010d56:	4622      	mov	r2, r4
 8010d58:	f7ff f848 	bl	800fdec <memcpy>
 8010d5c:	4631      	mov	r1, r6
 8010d5e:	4638      	mov	r0, r7
 8010d60:	f7ff fb96 	bl	8010490 <_free_r>
 8010d64:	e7e9      	b.n	8010d3a <_realloc_r+0x1c>
 8010d66:	4635      	mov	r5, r6
 8010d68:	e7e7      	b.n	8010d3a <_realloc_r+0x1c>
	...

08010d6c <_read_r>:
 8010d6c:	b538      	push	{r3, r4, r5, lr}
 8010d6e:	4c07      	ldr	r4, [pc, #28]	; (8010d8c <_read_r+0x20>)
 8010d70:	4605      	mov	r5, r0
 8010d72:	4608      	mov	r0, r1
 8010d74:	4611      	mov	r1, r2
 8010d76:	2200      	movs	r2, #0
 8010d78:	6022      	str	r2, [r4, #0]
 8010d7a:	461a      	mov	r2, r3
 8010d7c:	f7f1 f8fc 	bl	8001f78 <_read>
 8010d80:	1c43      	adds	r3, r0, #1
 8010d82:	d102      	bne.n	8010d8a <_read_r+0x1e>
 8010d84:	6823      	ldr	r3, [r4, #0]
 8010d86:	b103      	cbz	r3, 8010d8a <_read_r+0x1e>
 8010d88:	602b      	str	r3, [r5, #0]
 8010d8a:	bd38      	pop	{r3, r4, r5, pc}
 8010d8c:	20003844 	.word	0x20003844

08010d90 <_malloc_usable_size_r>:
 8010d90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d94:	1f18      	subs	r0, r3, #4
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	bfbc      	itt	lt
 8010d9a:	580b      	ldrlt	r3, [r1, r0]
 8010d9c:	18c0      	addlt	r0, r0, r3
 8010d9e:	4770      	bx	lr

08010da0 <_init>:
 8010da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010da2:	bf00      	nop
 8010da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010da6:	bc08      	pop	{r3}
 8010da8:	469e      	mov	lr, r3
 8010daa:	4770      	bx	lr

08010dac <_fini>:
 8010dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dae:	bf00      	nop
 8010db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010db2:	bc08      	pop	{r3}
 8010db4:	469e      	mov	lr, r3
 8010db6:	4770      	bx	lr
